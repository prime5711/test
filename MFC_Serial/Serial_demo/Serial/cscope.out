cscope 15 /cygdrive/c/shcho/Source_Debugging/wisd/shcho_test_program/MFC_Serial/Serial_demo/Serial               0000188934
	@HelloWorld/HelloWorld.cpp

17 
	#STRICT


	)

18 
	~<tch¨.h
>

19 
	~<wödows.h
>

20 
	~"Sîül.h
"

22 
	$ShowEº‹
 (
LONG
 
lEº‹
, 
LPCTSTR
 
ÕtszMesßge
)

25 
TCHAR
 
tszMesßge
[256];

26 
	`w•rötf
(
tszMesßge
,
	`_T
("%s\n”º‹ codê%d)"), 
ÕtszMesßge
, 
lEº‹
);

29 ::
	`MesßgeBox
(0,
tszMesßge
,
	`_T
("Hñlÿw‹ld"), 
MB_ICONSTOP
|
MB_OK
);

31 
	}
}

33 
WINAPI
 
	$_tWöMaö
 (
HINSTANCE
 , HINSTANCE , 
LPTSTR
 , )

35 
CSîül
 
£rül
;

36 
LONG
 
lLa°Eº‹
 = 
ERROR_SUCCESS
;

39 
lLa°Eº‹
 = 
£rül
.
	`O≥n
(
	`_T
("COM1"),0,0,
Ál£
);

40 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

41  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo open COM-port"));

44 
lLa°Eº‹
 = 
£rül
.
	`Sëup
(
CSîül
::
EBaud9600
,CSîül::
ED©a8
,CSîül::
EP¨N⁄e
,CSîül::
ESt›1
);

45 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

46  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-port setting"));

49 
lLa°Eº‹
 = 
£rül
.
	`SëupH™dshakög
(
CSîül
::
EH™dshakeH¨dw¨e
);

50 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

51  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-port handshaking"));

56 
lLa°Eº‹
 = 
£rül
.
	`Wrôe
("Hello world\n");

57 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

58  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo send data"));

61 
£rül
.
	`Clo£
();

63 
	}
}

	@Listener/Listener.cpp

19 
	#STRICT


	)

20 
	~<tch¨.h
>

21 
	~<wödows.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~"Sîül.h
"

26 íum { 
	mEOF_Ch¨
 = 27 };

28 
	$ShowEº‹
 (
LONG
 
lEº‹
, 
LPCTSTR
 
ÕtszMesßge
)

31 
TCHAR
 
tszMesßge
[256];

32 
	`w•rötf
(
tszMesßge
,
	`_T
("%s\n”º‹ codê%d)"), 
ÕtszMesßge
, 
lEº‹
);

35 ::
	`MesßgeBox
(0,
tszMesßge
,
	`_T
("Li°íî"), 
MB_ICONSTOP
|
MB_OK
);

37 
	}
}

39 
__cde˛
 
	$_tmaö
 (, ** )

41 
CSîül
 
£rül
;

42 
LONG
 
lLa°Eº‹
 = 
ERROR_SUCCESS
;

45 
lLa°Eº‹
 = 
£rül
.
	`O≥n
(
	`_T
("COM1"),0,0,
Ál£
);

46 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

47  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo open COM-port"));

50 
lLa°Eº‹
 = 
£rül
.
	`Sëup
(
CSîül
::
EBaud9600
,CSîül::
ED©a8
,CSîül::
EP¨N⁄e
,CSîül::
ESt›1
);

51 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

52  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-port setting"));

55 
lLa°Eº‹
 = 
£rül
.
	`SëMask
(
CSîül
::
EEvítBªak
 |

56 
CSîül
::
EEvítCTS
 |

57 
CSîül
::
EEvítDSR
 |

58 
CSîül
::
EEvítEº‹
 |

59 
CSîül
::
EEvítRög
 |

60 
CSîül
::
EEvítRLSD
 |

61 
CSîül
::
EEvítRecv
);

62 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

63  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-portÉvent mask"));

68 
lLa°Eº‹
 = 
£rül
.
	`SëupRódTimeouts
(
CSîül
::
ERódTimeoutN⁄blockög
);

69 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

70  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-portÑeadÅimeout."));

73 
boﬁ
 
fC⁄töue
 = 
åue
;

77 
lLa°Eº‹
 = 
£rül
.
	`WaôEvít
();

78 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

79  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo wait forá COM-portÉvent."));

82 c⁄° 
CSîül
::
EEvít
 
eEvít
 = 
£rül
.
	`GëEvítTy≥
();

85 i‡(
eEvít
 & 
CSîül
::
EEvítBªak
)

87 
	`¥ötf
("\n### BREAKÑeceived ###\n");

91 i‡(
eEvít
 & 
CSîül
::
EEvítCTS
)

93 
	`¥ötf
("\n### CÀ¨Åÿ£nd %†###\n", 
£rül
.
	`GëCTS
()?"on":"off");

97 i‡(
eEvít
 & 
CSîül
::
EEvítDSR
)

99 
	`¥ötf
("\n### D©®£àªady %†###\n", 
£rül
.
	`GëDSR
()?"on":"off");

103 i‡(
eEvít
 & 
CSîül
::
EEvítEº‹
)

105 
	`¥ötf
("\n### ERROR: ");

106 
£rül
.
	`GëEº‹
())

108 
CSîül
::
EEº‹Bªak
: 
	`¥ötf
("Break condition"); ;

109 
CSîül
::
EEº‹Føme
: 
	`¥ötf
("FramingÉrror"); ;

110 
CSîül
::
EEº‹IOE
: 
	`¥ötf
("IO deviceÉrror"); ;

111 
CSîül
::
EEº‹Mode
: 
	`¥ötf
("Unsupported mode"); ;

112 
CSîül
::
EEº‹Ovîrun
: 
	`¥ötf
("Buffer overrun"); ;

113 
CSîül
::
EEº‹RxOvî
: 
	`¥ötf
("Input buffer overflow"); ;

114 
CSîül
::
EEº‹P¨ôy
: 
	`¥ötf
("InputÖarityÉrror"); ;

115 
CSîül
::
EEº‹TxFuŒ
: 
	`¥ötf
("Output buffer full"); ;

116 : 
	`¥ötf
("Unknown"); ;

118 
	`¥ötf
(" ###\n");

122 i‡(
eEvít
 & 
CSîül
::
EEvítRög
)

124 
	`¥ötf
("\n### RING ###\n");

128 i‡(
eEvít
 & 
CSîül
::
EEvítRLSD
)

130 
	`¥ötf
("\n### RLSD/CD %†###\n", 
£rül
.
	`GëRLSD
()?"on":"off");

134 i‡(
eEvít
 & 
CSîül
::
EEvítRecv
)

137 
DWORD
 
dwByãsRód
 = 0;

138 
szBuf„r
[101];

142 
lLa°Eº‹
 = 
£rül
.
	`Ród
(
szBuf„r
,(szBuf„r)-1,&
dwByãsRód
);

143 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

144  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅoÑead from COM-port."));

146 i‡(
dwByãsRód
 > 0)

149 
szBuf„r
[
dwByãsRód
] = '\0';

152 
	`¥ötf
("%s", 
szBuf„r
);

155 i‡(
	`°rchr
(
szBuf„r
,
EOF_Ch¨
))

156 
fC⁄töue
 = 
Ál£
;

159 
dwByãsRód
 =(
szBuf„r
)-1);

162 
fC⁄töue
);

165 
£rül
.
	`Clo£
();

167 
	}
}

	@Overlapped/Overlapped.cpp

19 
	#STRICT


	)

20 
	~<tch¨.h
>

21 
	~<wödows.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~"Sîül.h
"

26 
	$ShowEº‹
 (
LONG
 
lEº‹
, 
LPCTSTR
 
ÕtszMesßge
)

29 
TCHAR
 
tszMesßge
[256];

30 
	`w•rötf
(
tszMesßge
,
	`_T
("%s\n”º‹ codê%d)"), 
ÕtszMesßge
, 
lEº‹
);

33 ::
	`MesßgeBox
(0,
tszMesßge
,
	`_T
("Li°íî"), 
MB_ICONSTOP
|
MB_OK
);

35 
	}
}

37 
__cde˛
 
	$_tmaö
 (, ** )

39 
CSîül
 
£rül
;

40 
LONG
 
lLa°Eº‹
 = 
ERROR_SUCCESS
;

43 
lLa°Eº‹
 = 
£rül
.
	`O≥n
(
	`_T
("COM1"),0,0,
åue
);

44 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

45  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo open COM-port"));

48 
lLa°Eº‹
 = 
£rül
.
	`Sëup
(
CSîül
::
EBaud9600
,CSîül::
ED©a8
,CSîül::
EP¨N⁄e
,CSîül::
ESt›1
);

49 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

50  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-port setting"));

53 
lLa°Eº‹
 = 
£rül
.
	`SëupH™dshakög
(
CSîül
::
EH™dshakeH¨dw¨e
);

54 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

55  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-port handshaking"));

58 
lLa°Eº‹
 = 
£rül
.
	`SëMask
(
CSîül
::
EEvítBªak
 |

59 
CSîül
::
EEvítCTS
 |

60 
CSîül
::
EEvítDSR
 |

61 
CSîül
::
EEvítEº‹
 |

62 
CSîül
::
EEvítRög
 |

63 
CSîül
::
EEvítRLSD
 |

64 
CSîül
::
EEvítRecv
);

65 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

66  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-portÉvent mask"));

71 
lLa°Eº‹
 = 
£rül
.
	`SëupRódTimeouts
(
CSîül
::
ERódTimeoutN⁄blockög
);

72 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

73  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo set COM-portÑeadÅimeout."));

76 
HANDLE
 
hevtOvîœµed
 = ::
	`Cª©eEvít
(0,
TRUE
,
FALSE
,0);;

77 i‡(
hevtOvîœµed
 == 0)

78  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo create manual-resetÉvent for overlapped I/O."));

81 
OVERLAPPED
 
ov
 = {0};

82 
ov
.
hEvít
 = 
hevtOvîœµed
;

85 
HANDLE
 
hevtSt›
 = ::
	`Cª©eEvít
(0,
TRUE
,
FALSE
,
	`_T
("Overlapped_Stop_Event"));

86 i‡(
hevtSt›
 == 0)

87  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo create manual-resetÉvent for stopÉvent."));

90 
boﬁ
 
fC⁄töue
 = 
åue
;

94 
lLa°Eº‹
 = 
£rül
.
	`WaôEvít
(&
ov
);

95 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

96  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅo wait forá COM-portÉvent."));

99 
HANDLE
 
ahWaô
[2];

100 
ahWaô
[0] = 
hevtOvîœµed
;

101 
ahWaô
[1] = 
hevtSt›
;

104 ::
	`WaôF‹Mu…ùÀObje˘s
((
ahWaô
)/(*ahWaô),ahWaô,
FALSE
,
INFINITE
))

106 
WAIT_OBJECT_0
:

109 c⁄° 
CSîül
::
EEvít
 
eEvít
 = 
£rül
.
	`GëEvítTy≥
();

112 i‡(
eEvít
 & 
CSîül
::
EEvítBªak
)

114 
	`¥ötf
("\n### BREAKÑeceived ###\n");

118 i‡(
eEvít
 & 
CSîül
::
EEvítCTS
)

120 
	`¥ötf
("\n### CÀ¨Åÿ£nd %†###\n", 
£rül
.
	`GëCTS
()?"on":"off");

124 i‡(
eEvít
 & 
CSîül
::
EEvítDSR
)

126 
	`¥ötf
("\n### D©®£àªady %†###\n", 
£rül
.
	`GëDSR
()?"on":"off");

130 i‡(
eEvít
 & 
CSîül
::
EEvítEº‹
)

132 
	`¥ötf
("\n### ERROR: ");

133 
£rül
.
	`GëEº‹
())

135 
CSîül
::
EEº‹Bªak
: 
	`¥ötf
("Break condition"); ;

136 
CSîül
::
EEº‹Føme
: 
	`¥ötf
("FramingÉrror"); ;

137 
CSîül
::
EEº‹IOE
: 
	`¥ötf
("IO deviceÉrror"); ;

138 
CSîül
::
EEº‹Mode
: 
	`¥ötf
("Unsupported mode"); ;

139 
CSîül
::
EEº‹Ovîrun
: 
	`¥ötf
("Buffer overrun"); ;

140 
CSîül
::
EEº‹RxOvî
: 
	`¥ötf
("Input buffer overflow"); ;

141 
CSîül
::
EEº‹P¨ôy
: 
	`¥ötf
("InputÖarityÉrror"); ;

142 
CSîül
::
EEº‹TxFuŒ
: 
	`¥ötf
("Output buffer full"); ;

143 : 
	`¥ötf
("Unknown"); ;

145 
	`¥ötf
(" ###\n");

149 i‡(
eEvít
 & 
CSîül
::
EEvítRög
)

151 
	`¥ötf
("\n### RING ###\n");

155 i‡(
eEvít
 & 
CSîül
::
EEvítRLSD
)

157 
	`¥ötf
("\n### RLSD/CD %†###\n", 
£rül
.
	`GëRLSD
()?"on":"off");

161 i‡(
eEvít
 & 
CSîül
::
EEvítRecv
)

164 
DWORD
 
dwByãsRód
 = 0;

167 
szBuf„r
[101];

170 
lLa°Eº‹
 = 
£rül
.
	`Ród
(
szBuf„r
,(szBuf„r)-1,&
dwByãsRód
);

171 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

172  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("UnableÅoÑead from COM-port."));

174 i‡(
dwByãsRód
 > 0)

177 
szBuf„r
[
dwByãsRód
] = '\0';

180 
	`¥ötf
("%s", 
szBuf„r
);

183 
dwByãsRód
 > 0);

188 
WAIT_OBJECT_0
+1:

191 
fC⁄töue
 = 
Ál£
;

198  ::
	`ShowEº‹
(
£rül
.
	`GëLa°Eº‹
(), 
	`_T
("Error while calling WaitForMultipleObjects."));

203 
fC⁄töue
);

206 
£rül
.
	`Clo£
();

208 
	}
}

	@Serial/Serial.cpp

23 
	#STRICT


	)

24 
	~<¸tdbg.h
>

25 
	~<tch¨.h
>

26 
	~<wödows.h
>

32 
	~"Sîül.h
"

39 #¥agm®
w¨nög
(
dißbÀ
: 4127)

45 #ifde‡
_DEBUG


47 #ifde‡
THIS_FILE


48 #unde‡
THIS_FILE


51 c⁄° 
	gTHIS_FILE
[] = 
__FILE__
;

52 
	#√w
 
DEBUG_NEW


	)

60 
ölöe
 
	gCSîül
::
	$CheckRequúemíts
 (
LPOVERLAPPED
 
ÕOvîœµed
, 
DWORD
 
dwTimeout
) const

62 #ifde‡
SERIAL_NO_OVERLAPPED


65 i‡(
ÕOvîœµed
 || (
dwTimeout
 !
INFINITE
))

68 ::
	`MesßgeBox
(0,
	`_T
("Ovîœµed I/OándÅime-out†¨ênŸ suµ‹ãd, whí ovîœµed I/O i†dißbÀd."),_T("Sîü»libøry"), 
MB_ICONERROR
 | 
MB_TASKMODAL
);

69 ::
	`DebugBªak
();

70 ::
	`ExôPro˚ss
(0xFFFFFFF);

75 #ifde‡
SERIAL_NO_CANCELIO


79 i‡((
dwTimeout
 !0Ë&& (dwTimeouà!
INFINITE
))

82 ::
	`MesßgeBox
(0,
	`_T
("Timeout†¨ênŸ suµ‹ãd, whí SERIAL_NO_CANCELIO i†deföed"),_T("Sîü»libøry"), 
MB_ICONERROR
 | 
MB_TASKMODAL
);

83 ::
	`DebugBªak
();

84 ::
	`ExôPro˚ss
(0xFFFFFFF);

90 (Ë
dwTimeout
;

91 (Ë
ÕOvîœµed
;

92 
	}
}

94 
ölöe
 
BOOL
 
	gCSîül
::
	$C™˚lCommIo
 ()

96 #ifde‡
SERIAL_NO_CANCELIO


98 ::
	`DebugBªak
();

99  
FALSE
;

103  ::
	`C™˚lIo
(
m_hFûe
);

106 
	}
}

112 
	gCSîül
::
	$CSîül
 ()

113 : 
	`m_lLa°Eº‹
(
ERROR_SUCCESS
)

114 , 
	`m_hFûe
(0)

115 , 
	`m_eEvít
(
EEvítN⁄e
)

116 , 
	$m_dwEvítMask
(0)

117 #i‚de‡
SERIAL_NO_OVERLAPPED


118 , 
	$m_hevtOvîœµed
(0)

121 
	}
}

123 
	gCSîül
::~
	$CSîül
 ()

127 i‡(
m_hFûe
)

130 
	`_RPTF0
(
_CRT_WARN
,"CSerial::~CSerial - SerialÖortÇot closed\n");

133 
	`Clo£
();

135 
	}
}

137 
	gCSîül
::
EP‹t
 
CSîül
::
	$CheckP‹t
 (
LPCTSTR
 
ÕszDevi˚
)

140 
HANDLE
 
hFûe
 = ::
	`Cª©eFûe
(
ÕszDevi˚
,

141 
GENERIC_READ
|
GENERIC_WRITE
,

144 
OPEN_EXISTING
,

149 i‡(
hFûe
 =
INVALID_HANDLE_VALUE
)

152 ::
	`GëLa°Eº‹
())

154 
ERROR_FILE_NOT_FOUND
:

156  
EP‹tNŸAvaûabÀ
;

158 
ERROR_ACCESS_DENIED
:

160  
EP‹tInU£
;

164  
EP‹tUnknownEº‹
;

169 ::
	`Clo£H™dÀ
(
hFûe
);

172  
EP‹tAvaûabÀ
;

173 
	}
}

175 
LONG
 
	gCSîül
::
	$O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
DWORD
 
dwInQueue
, DWORD 
dwOutQueue
, 
boﬁ
 
fOvîœµed
)

178 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

181 i‡(
m_hFûe
)

183 
m_lLa°Eº‹
 = 
ERROR_ALREADY_INITIALIZED
;

184 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Open - Portálready opened\n");

185  
m_lLa°Eº‹
;

189 
m_hFûe
 = ::
	`Cª©eFûe
(
ÕszDevi˚
,

190 
GENERIC_READ
|
GENERIC_WRITE
,

193 
OPEN_EXISTING
,

194 
fOvîœµed
?
FILE_FLAG_OVERLAPPED
:0,

196 i‡(
m_hFûe
 =
INVALID_HANDLE_VALUE
)

199 
m_hFûe
 = 0;

202 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

203 
	`_RPTF0
(
_CRT_WARN
, "CSerial::Open - UnableÅo openÖort\n");

204  
m_lLa°Eº‹
;

207 #i‚de‡
SERIAL_NO_OVERLAPPED


209 
	`_ASSERTE
(
m_hevtOvîœµed
 == 0);

212 i‡(
fOvîœµed
)

214 
m_hevtOvîœµed
 = ::
	`Cª©eEvít
(0,
åue
,
Ál£
,0);

215 i‡(
m_hevtOvîœµed
 == 0)

218 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

219 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Open - UnableÅo createÉvent\n");

222 ::
	`Clo£H™dÀ
(
m_hFûe
);

223 
m_hFûe
 = 0;

226  
m_lLa°Eº‹
;

232 
	`_ASSERTE
(!
fOvîœµed
);

237 i‡(
dwInQueue
 || 
dwOutQueue
)

242 
	`_ASSERTE
(
dwInQueue
 >= 16);

243 
	`_ASSERTE
(
dwOutQueue
 >= 16);

245 i‡(!::
	`SëupComm
(
m_hFûe
,
dwInQueue
,
dwOutQueue
))

248 
lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

249 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Open - UnableÅo setupÅhe COM-port\n");

252 
	`Clo£
();

255 
m_lLa°Eº‹
 = 
lLa°Eº‹
;

256  
m_lLa°Eº‹
;

261 
	`SëMask
();

264 
	`SëupRódTimeouts
(
ERódTimeoutN⁄blockög
);

267 
COMMCONFIG
 
commC⁄fig
 = {0};

268 
DWORD
 
dwSize
 = (
commC⁄fig
);

269 
commC⁄fig
.
dwSize
 = dwSize;

270 i‡(::
	`GëDeÁu…CommC⁄fig
(
ÕszDevi˚
,&
commC⁄fig
,&
dwSize
))

273 i‡(!::
	`SëCommC⁄fig
(
m_hFûe
,&
commC⁄fig
,
dwSize
))

276 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Open - UnableÅo set default communication configuration.\n");

282 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Open - UnableÅo obtain default communication configuration.\n");

286  
m_lLa°Eº‹
;

287 
	}
}

289 
LONG
 
	gCSîül
::
	$Clo£
 ()

292 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

296 i‡(
m_hFûe
 == 0)

299 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Close - Method called when device isÇot open\n");

300  
m_lLa°Eº‹
;

303 #i‚de‡
SERIAL_NO_OVERLAPPED


305 i‡(
m_hevtOvîœµed
)

307 ::
	`Clo£H™dÀ
(
m_hevtOvîœµed
);

308 
m_hevtOvîœµed
 = 0;

313 ::
	`Clo£H™dÀ
(
m_hFûe
);

314 
m_hFûe
 = 0;

317  
m_lLa°Eº‹
;

318 
	}
}

320 
LONG
 
	gCSîül
::
	$Sëup
 (
EBaudøã
 
eBaudøã
, 
ED©aBôs
 
eD©aBôs
, 
EP¨ôy
 
eP¨ôy
, 
ESt›Bôs
 
eSt›Bôs
)

323 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

326 i‡(
m_hFûe
 == 0)

329 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

332 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Setup - Device isÇot opened\n");

333  
m_lLa°Eº‹
;

337 
CDCB
 
dcb
;

338 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

341 
m_lLa°Eº‹
 = :: 
	`GëLa°Eº‹
();

344 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Setup - UnableÅo obtain DCB information\n");

345  
m_lLa°Eº‹
;

349 
dcb
.
BaudR©e
 = 
	`DWORD
(
eBaudøã
);

350 
dcb
.
ByãSize
 = 
	`BYTE
(
eD©aBôs
);

351 
dcb
.
P¨ôy
 = 
	`BYTE
(
eP¨ôy
);

352 
dcb
.
St›Bôs
 = 
	`BYTE
(
eSt›Bôs
);

355 
dcb
.
fP¨ôy
 = (
eP¨ôy
 !
EP¨N⁄e
);

358 i‡(!::
	`SëCommSèã
(
m_hFûe
,&
dcb
))

361 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

364 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Setup - UnableÅo set DCB information\n");

365  
m_lLa°Eº‹
;

369  
m_lLa°Eº‹
;

370 
	}
}

372 
LONG
 
	gCSîül
::
	$SëEvítCh¨
 (
BYTE
 
bEvítCh¨
, 
boﬁ
 
fAdju°Mask
)

375 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

378 i‡(
m_hFûe
 == 0)

381 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

384 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetEventChar - Device isÇot opened\n");

385  
m_lLa°Eº‹
;

389 
CDCB
 
dcb
;

390 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

393 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

396 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetEventChar - UnableÅo obtain DCB information\n");

397  
m_lLa°Eº‹
;

401 
dcb
.
EvtCh¨
 = (
bEvítCh¨
);

404 i‡(
fAdju°Mask
)

409 
	`SëMask
(
	`GëEvítMask
(Ë| 
EEvítRcvEv
);

413 i‡(!::
	`SëCommSèã
(
m_hFûe
,&
dcb
))

416 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

419 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetEventChar - UnableÅo set DCB information\n");

420  
m_lLa°Eº‹
;

424  
m_lLa°Eº‹
;

425 
	}
}

427 
LONG
 
	gCSîül
::
	$SëMask
 (
DWORD
 
dwEvítMask
)

430 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

433 i‡(
m_hFûe
 == 0)

436 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

439 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetMask - Device isÇot opened\n");

440  
m_lLa°Eº‹
;

445 i‡(!::
	`SëCommMask
(
m_hFûe
,
dwEvítMask
))

448 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

451 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetMask - UnableÅo setÉvent mask\n");

452  
m_lLa°Eº‹
;

456 
m_dwEvítMask
 = 
dwEvítMask
;

457  
m_lLa°Eº‹
;

458 
	}
}

460 
LONG
 
	gCSîül
::
	$WaôEvít
 (
LPOVERLAPPED
 
ÕOvîœµed
, 
DWORD
 
dwTimeout
)

463 
	`CheckRequúemíts
(
ÕOvîœµed
,
dwTimeout
);

466 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

469 i‡(
m_hFûe
 == 0)

472 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

475 
	`_RPTF0
(
_CRT_WARN
,"CSerial::WaitEvent - Device isÇot opened\n");

476  
m_lLa°Eº‹
;

479 #i‚de‡
SERIAL_NO_OVERLAPPED


482 i‡(!
m_hevtOvîœµed
 && (
ÕOvîœµed
 || (
dwTimeout
 !
INFINITE
)))

485 
m_lLa°Eº‹
 = 
ERROR_INVALID_FUNCTION
;

488 
	`_RPTF0
(
_CRT_WARN
,"CSerial::WaitEvent - Overlapped I/O is disabled, specifiedÖarametersáre illegal.\n");

489  
m_lLa°Eº‹
;

493 
OVERLAPPED
 
ovI¡î«l
;

494 i‡(!
ÕOvîœµed
 && 
m_hevtOvîœµed
)

497 
	`mem£t
(&
ovI¡î«l
,0,(ovInternal));

498 
ovI¡î«l
.
hEvít
 = 
m_hevtOvîœµed
;

501 
ÕOvîœµed
 = &
ovI¡î«l
;

505 
	`_ASSERTE
(!
m_hevtOvîœµed
 || 
	`HasOvîœµedIoCom∂ëed
(
ÕOvîœµed
));

508 i‡(!::
	`WaôCommEvít
(
m_hFûe
,
	`LPDWORD
(&
m_eEvít
),
ÕOvîœµed
))

511 
lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

514 i‡(
lLa°Eº‹
 !
ERROR_IO_PENDING
)

517 
m_lLa°Eº‹
 = 
lLa°Eº‹
;

520 
	`_RPTF0
(
_CRT_WARN
,"CSerial::WaitEvent - UnableÅo wait for COMÉvent\n");

521  
m_lLa°Eº‹
;

525 i‡(
ÕOvîœµed
 =&
ovI¡î«l
)

528 ::
	`WaôF‹SögÀObje˘
(
ÕOvîœµed
->
hEvít
,
dwTimeout
))

530 
WAIT_OBJECT_0
:

534 
WAIT_TIMEOUT
:

536 
	`C™˚lCommIo
();

539 
m_lLa°Eº‹
 = 
ERROR_TIMEOUT
;

540  
m_lLa°Eº‹
;

544 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

547 
	`_RPTF0
(
_CRT_WARN
,"CSerial::WaitEvent - UnableÅo wait until COMÉvent hasárrived\n");

548  
m_lLa°Eº‹
;

556 i‡(
ÕOvîœµed
)

557 ::
	`SëEvít
(
ÕOvîœµed
->
hEvít
);

562 i‡(!::
	`WaôCommEvít
(
m_hFûe
,
	`LPDWORD
(&
m_eEvít
),0))

565 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

568 
	`_RPTF0
(
_CRT_WARN
,"CSerial::WaitEvent - UnableÅo wait for COMÉvent\n");

569  
m_lLa°Eº‹
;

575  
m_lLa°Eº‹
;

576 
	}
}

579 
LONG
 
	gCSîül
::
	$SëupH™dshakög
 (
EH™dshake
 
eH™dshake
)

582 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

585 i‡(
m_hFûe
 == 0)

588 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

591 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupHandshaking - Device isÇot opened\n");

592  
m_lLa°Eº‹
;

596 
CDCB
 
dcb
;

597 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

600 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

603 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupHandshaking - UnableÅo obtain DCB information\n");

604  
m_lLa°Eº‹
;

608 
eH™dshake
)

610 
EH™dshakeOff
:

611 
dcb
.
fOutxCtsFlow
 = 
Ál£
;

612 
dcb
.
fOutxD§Flow
 = 
Ál£
;

613 
dcb
.
fDåC⁄åﬁ
 = 
DTR_CONTROL_DISABLE
;

614 
dcb
.
fOutX
 = 
Ál£
;

615 
dcb
.
fInX
 = 
Ál£
;

616 
dcb
.
fRtsC⁄åﬁ
 = 
RTS_CONTROL_DISABLE
;

619 
EH™dshakeH¨dw¨e
:

620 
dcb
.
fOutxCtsFlow
 = 
åue
;

621 
dcb
.
fOutxD§Flow
 = 
åue
;

622 
dcb
.
fDåC⁄åﬁ
 = 
DTR_CONTROL_HANDSHAKE
;

623 
dcb
.
fOutX
 = 
Ál£
;

624 
dcb
.
fInX
 = 
Ál£
;

625 
dcb
.
fRtsC⁄åﬁ
 = 
RTS_CONTROL_HANDSHAKE
;

628 
EH™dshakeSo·w¨e
:

629 
dcb
.
fOutxCtsFlow
 = 
Ál£
;

630 
dcb
.
fOutxD§Flow
 = 
Ál£
;

631 
dcb
.
fDåC⁄åﬁ
 = 
DTR_CONTROL_DISABLE
;

632 
dcb
.
fOutX
 = 
åue
;

633 
dcb
.
fInX
 = 
åue
;

634 
dcb
.
fRtsC⁄åﬁ
 = 
RTS_CONTROL_DISABLE
;

639 
	`_ASSERTE
(
Ál£
);

640 
m_lLa°Eº‹
 = 
E_INVALIDARG
;

641  
m_lLa°Eº‹
;

645 i‡(!::
	`SëCommSèã
(
m_hFûe
,&
dcb
))

648 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

651 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupHandshaking - UnableÅo set DCB information\n");

652  
m_lLa°Eº‹
;

656  
m_lLa°Eº‹
;

657 
	}
}

659 
LONG
 
	gCSîül
::
	$SëupRódTimeouts
 (
ERódTimeout
 
eRódTimeout
)

662 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

665 i‡(
m_hFûe
 == 0)

668 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

671 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupReadTimeouts - Device isÇot opened\n");

672  
m_lLa°Eº‹
;

676 
COMMTIMEOUTS
 
˘o
;

677 i‡(!::
	`GëCommTimeouts
(
m_hFûe
,&
˘o
))

680 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

683 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupReadTimeouts - UnableÅo obtainÅimeout information\n");

684  
m_lLa°Eº‹
;

688 
eRódTimeout
)

690 
ERódTimeoutBlockög
:

691 
˘o
.
RódI¡îvÆTimeout
 = 0;

692 
˘o
.
RódTŸÆTimeoutC⁄°™t
 = 0;

693 
˘o
.
RódTŸÆTimeoutMu…ùlõr
 = 0;

695 
ERódTimeoutN⁄blockög
:

696 
˘o
.
RódI¡îvÆTimeout
 = 
MAXDWORD
;

697 
˘o
.
RódTŸÆTimeoutC⁄°™t
 = 0;

698 
˘o
.
RódTŸÆTimeoutMu…ùlõr
 = 0;

702 
	`_ASSERTE
(
Ál£
);

703 
m_lLa°Eº‹
 = 
E_INVALIDARG
;

704  
m_lLa°Eº‹
;

708 i‡(!::
	`SëCommTimeouts
(
m_hFûe
,&
˘o
))

711 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

714 
	`_RPTF0
(
_CRT_WARN
,"CSerial::SetupReadTimeouts - UnableÅo setÅimeout information\n");

715  
m_lLa°Eº‹
;

719  
m_lLa°Eº‹
;

720 
	}
}

722 
	gCSîül
::
EBaudøã
 
CSîül
::
	$GëBaudøã
 ()

725 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

728 i‡(
m_hFûe
 == 0)

731 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

734 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetBaudrate - Device isÇot opened\n");

735  
EBaudUnknown
;

739 
CDCB
 
dcb
;

740 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

743 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

746 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetBaudrate - UnableÅo obtain DCB information\n");

747  
EBaudUnknown
;

751  
	`EBaudøã
(
dcb
.
BaudR©e
);

752 
	}
}

754 
	gCSîül
::
ED©aBôs
 
CSîül
::
	$GëD©aBôs
 ()

757 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

760 i‡(
m_hFûe
 == 0)

763 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

766 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetDataBits - Device isÇot opened\n");

767  
ED©aUnknown
;

771 
CDCB
 
dcb
;

772 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

775 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

778 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetDataBits - UnableÅo obtain DCB information\n");

779  
ED©aUnknown
;

783  
	`ED©aBôs
(
dcb
.
ByãSize
);

784 
	}
}

786 
	gCSîül
::
EP¨ôy
 
CSîül
::
	$GëP¨ôy
 ()

789 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

792 i‡(
m_hFûe
 == 0)

795 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

798 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetParity - Device isÇot opened\n");

799  
EP¨Unknown
;

803 
CDCB
 
dcb
;

804 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

807 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

810 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetParity - UnableÅo obtain DCB information\n");

811  
EP¨Unknown
;

815 i‡(!
dcb
.
fP¨ôy
)

818  
EP¨N⁄e
;

822  
	`EP¨ôy
(
dcb
.
P¨ôy
);

823 
	}
}

825 
	gCSîül
::
ESt›Bôs
 
CSîül
::
	$GëSt›Bôs
 ()

828 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

831 i‡(
m_hFûe
 == 0)

834 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

837 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetStopBits - Device isÇot opened\n");

838  
ESt›Unknown
;

842 
CDCB
 
dcb
;

843 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

846 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

849 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetStopBits - UnableÅo obtain DCB information\n");

850  
ESt›Unknown
;

854  
	`ESt›Bôs
(
dcb
.
St›Bôs
);

855 
	}
}

857 
DWORD
 
	gCSîül
::
	$GëEvítMask
 ()

860 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

863 i‡(
m_hFûe
 == 0)

866 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

869 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetEventMask - Device isÇot opened\n");

874  
m_dwEvítMask
;

875 
	}
}

877 
BYTE
 
	gCSîül
::
	$GëEvítCh¨
 ()

880 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

883 i‡(
m_hFûe
 == 0)

886 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

889 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetEventChar - Device isÇot opened\n");

894 
CDCB
 
dcb
;

895 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

898 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

901 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetEventChar - UnableÅo obtain DCB information\n");

906  
	`BYTE
(
dcb
.
EvtCh¨
);

907 
	}
}

909 
	gCSîül
::
EH™dshake
 
CSîül
::
	$GëH™dshakög
 ()

912 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

915 i‡(
m_hFûe
 == 0)

918 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

921 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetHandshaking - Device isÇot opened\n");

922  
EH™dshakeUnknown
;

926 
CDCB
 
dcb
;

927 i‡(!::
	`GëCommSèã
(
m_hFûe
,&
dcb
))

930 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

933 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetHandshaking - UnableÅo obtain DCB information\n");

934  
EH™dshakeUnknown
;

938 i‡((
dcb
.
fDåC⁄åﬁ
 =
DTR_CONTROL_HANDSHAKE
Ë&& (dcb.
fRtsC⁄åﬁ
 =
RTS_CONTROL_HANDSHAKE
))

939  
EH™dshakeH¨dw¨e
;

942 i‡(
dcb
.
fOutX
 && dcb.
fInX
)

943  
EH™dshakeSo·w¨e
;

946  
EH™dshakeOff
;

947 
	}
}

949 
LONG
 
	gCSîül
::
	$Wrôe
 (c⁄° * 
pD©a
, 
size_t
 
iLí
, 
DWORD
* 
pdwWrôãn
, 
LPOVERLAPPED
 
ÕOvîœµed
, DWORD 
dwTimeout
)

952 
	`CheckRequúemíts
(
ÕOvîœµed
,
dwTimeout
);

955 
	`_ASSERTE
(!
ÕOvîœµed
 || 
pdwWrôãn
);

958 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

961 
DWORD
 
dwWrôãn
;

962 i‡(
pdwWrôãn
 == 0)

964 
pdwWrôãn
 = &
dwWrôãn
;

968 *
pdwWrôãn
 = 0;

971 i‡(
m_hFûe
 == 0)

974 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

977 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - Device isÇot opened\n");

978  
m_lLa°Eº‹
;

981 #i‚de‡
SERIAL_NO_OVERLAPPED


984 i‡(!
m_hevtOvîœµed
 && (
ÕOvîœµed
 || (
dwTimeout
 !
INFINITE
)))

987 
m_lLa°Eº‹
 = 
ERROR_INVALID_FUNCTION
;

990 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - Overlapped I/O is disabled, specifiedÖarametersáre illegal.\n");

991  
m_lLa°Eº‹
;

995 
OVERLAPPED
 
ovI¡î«l
;

996 i‡(!
ÕOvîœµed
 && 
m_hevtOvîœµed
)

999 
	`mem£t
(&
ovI¡î«l
,0,(ovInternal));

1000 
ovI¡î«l
.
hEvít
 = 
m_hevtOvîœµed
;

1003 
ÕOvîœµed
 = &
ovI¡î«l
;

1007 
	`_ASSERTE
(!
m_hevtOvîœµed
 || 
	`HasOvîœµedIoCom∂ëed
(
ÕOvîœµed
));

1010 i‡(!::
	`WrôeFûe
(
m_hFûe
,
pD©a
,
iLí
,
pdwWrôãn
,
ÕOvîœµed
))

1013 
lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1016 i‡(
lLa°Eº‹
 !
ERROR_IO_PENDING
)

1019 
m_lLa°Eº‹
 = 
lLa°Eº‹
;

1022 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - UnableÅo writeÅhe data\n");

1023  
m_lLa°Eº‹
;

1027 i‡(
ÕOvîœµed
 =&
ovI¡î«l
)

1030 ::
	`WaôF‹SögÀObje˘
(
ÕOvîœµed
->
hEvít
,
dwTimeout
))

1032 
WAIT_OBJECT_0
:

1034 i‡(!::
	`GëOvîœµedResu…
(
m_hFûe
,
ÕOvîœµed
,
pdwWrôãn
,
FALSE
))

1037 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1039 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - Overlapped completed withoutÑesult\n");

1040  
m_lLa°Eº‹
;

1044 
WAIT_TIMEOUT
:

1046 
	`C™˚lCommIo
();

1049 
m_lLa°Eº‹
 = 
ERROR_TIMEOUT
;

1050  
m_lLa°Eº‹
;

1054 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1057 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - UnableÅo wait until data has been sent\n");

1058  
m_lLa°Eº‹
;

1066 i‡(
ÕOvîœµed
)

1067 ::
	`SëEvít
(
ÕOvîœµed
->
hEvít
);

1073 i‡(!::
	`WrôeFûe
(
m_hFûe
,
pD©a
,
iLí
,
pdwWrôãn
,0))

1076 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1079 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Write - UnableÅo writeÅhe data\n");

1080  
m_lLa°Eº‹
;

1086  
m_lLa°Eº‹
;

1087 
	}
}

1089 
LONG
 
	gCSîül
::
	$Wrôe
 (
LPCSTR
 
pSåög
, 
DWORD
* 
pdwWrôãn
, 
LPOVERLAPPED
 
ÕOvîœµed
, DWORD 
dwTimeout
)

1092 
	`CheckRequúemíts
(
ÕOvîœµed
,
dwTimeout
);

1095  
	`Wrôe
(
pSåög
,
	`°æí
’Såög),
pdwWrôãn
,
ÕOvîœµed
,
dwTimeout
);

1096 
	}
}

1098 
LONG
 
	gCSîül
::
	$Ród
 (* 
pD©a
, 
size_t
 
iLí
, 
DWORD
* 
pdwRód
, 
LPOVERLAPPED
 
ÕOvîœµed
, DWORD 
dwTimeout
)

1101 
	`CheckRequúemíts
(
ÕOvîœµed
,
dwTimeout
);

1104 
	`_ASSERTE
(!
ÕOvîœµed
 || 
pdwRód
);

1107 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1110 
DWORD
 
dwRód
;

1111 i‡(
pdwRód
 == 0)

1113 
pdwRód
 = &
dwRód
;

1117 *
pdwRód
 = 0;

1120 i‡(
m_hFûe
 == 0)

1123 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

1126 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - Device isÇot opened\n");

1127  
m_lLa°Eº‹
;

1130 #ifde‡
_DEBUG


1133 
	`mem£t
(
pD©a
,0xDC,
iLí
);

1136 #i‚de‡
SERIAL_NO_OVERLAPPED


1139 i‡(!
m_hevtOvîœµed
 && (
ÕOvîœµed
 || (
dwTimeout
 !
INFINITE
)))

1142 
m_lLa°Eº‹
 = 
ERROR_INVALID_FUNCTION
;

1145 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - Overlapped I/O is disabled, specifiedÖarametersáre illegal.\n");

1146  
m_lLa°Eº‹
;

1150 
OVERLAPPED
 
ovI¡î«l
;

1151 i‡(
ÕOvîœµed
 == 0)

1154 
	`mem£t
(&
ovI¡î«l
,0,(ovInternal));

1155 
ovI¡î«l
.
hEvít
 = 
m_hevtOvîœµed
;

1158 
ÕOvîœµed
 = &
ovI¡î«l
;

1162 
	`_ASSERTE
(!
m_hevtOvîœµed
 || 
	`HasOvîœµedIoCom∂ëed
(
ÕOvîœµed
));

1165 i‡(!::
	`RódFûe
(
m_hFûe
,
pD©a
,
iLí
,
pdwRód
,
ÕOvîœµed
))

1168 
lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1171 i‡(
lLa°Eº‹
 !
ERROR_IO_PENDING
)

1174 
m_lLa°Eº‹
 = 
lLa°Eº‹
;

1177 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - UnableÅoÑeadÅhe data\n");

1178  
m_lLa°Eº‹
;

1182 i‡(
ÕOvîœµed
 =&
ovI¡î«l
)

1185 ::
	`WaôF‹SögÀObje˘
(
ÕOvîœµed
->
hEvít
,
dwTimeout
))

1187 
WAIT_OBJECT_0
:

1189 i‡(!::
	`GëOvîœµedResu…
(
m_hFûe
,
ÕOvîœµed
,
pdwRód
,
FALSE
))

1192 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1194 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - Overlapped completed withoutÑesult\n");

1195  
m_lLa°Eº‹
;

1199 
WAIT_TIMEOUT
:

1201 
	`C™˚lCommIo
();

1204 
m_lLa°Eº‹
 = 
ERROR_TIMEOUT
;

1205  
m_lLa°Eº‹
;

1209 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1212 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - UnableÅo wait until data has beenÑead\n");

1213  
m_lLa°Eº‹
;

1221 i‡(
ÕOvîœµed
)

1222 ::
	`SëEvít
(
ÕOvîœµed
->
hEvít
);

1228 i‡(!::
	`RódFûe
(
m_hFûe
,
pD©a
,
iLí
,
pdwRód
,0))

1231 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1234 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Read - UnableÅoÑeadÅhe data\n");

1235  
m_lLa°Eº‹
;

1241  
m_lLa°Eº‹
;

1242 
	}
}

1244 
LONG
 
	gCSîül
::
	$Purge
()

1247 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1250 i‡(
m_hFûe
 == 0)

1253 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

1256 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Purge - Device isÇot opened\n");

1257  
m_lLa°Eº‹
;

1260 i‡(!::
	`PurgeComm
(
m_hFûe
, 
PURGE_TXCLEAR
 | 
PURGE_RXCLEAR
))

1263 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1264 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Purge - Overlapped completed withoutÑesult\n");

1268  
m_lLa°Eº‹
;

1269 
	}
}

1271 
LONG
 
	gCSîül
::
	$Bªak
 ()

1274 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1277 i‡(
m_hFûe
 == 0)

1280 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

1283 
	`_RPTF0
(
_CRT_WARN
,"CSerial::Break - Device isÇot opened\n");

1284  
m_lLa°Eº‹
;

1288 ::
	`SëCommBªak
(
m_hFûe
);

1289 ::
	`SÀï
(100);

1290 ::
	`CÀ¨CommBªak
(
m_hFûe
);

1293  
m_lLa°Eº‹
;

1294 
	}
}

1296 
	gCSîül
::
EEvít
 
CSîül
::
	$GëEvítTy≥
 ()

1298 #ifde‡
_DEBUG


1300 i‡((
m_eEvít
 & 
m_dwEvítMask
) == 0)

1301 
	`_RPTF2
(
_CRT_WARN
,"CSîül::GëEvítTy≥ - Evíà%08XhÇŸ wôhö mask %08Xh.\n", 
m_eEvít
, 
m_dwEvítMask
);

1305 
EEvít
 
eEvít
 = 
	`EEvít
(
m_eEvít
 & 
m_dwEvítMask
);

1308 
m_eEvít
 = 
EEvítN⁄e
;

1311  
eEvít
;

1312 
	}
}

1314 
	gCSîül
::
EEº‹
 
CSîül
::
	$GëEº‹
 ()

1317 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1320 i‡(
m_hFûe
 == 0)

1323 
m_lLa°Eº‹
 = 
ERROR_INVALID_HANDLE
;

1326 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetError - Device isÇot opened\n");

1327  
EEº‹Unknown
;

1331 
DWORD
 
dwEº‹s
 = 0;

1332 i‡(!::
	`CÀ¨CommEº‹
(
m_hFûe
,&
dwEº‹s
,0))

1335 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1338 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetError - UnableÅo obtain COM status\n");

1339  
EEº‹Unknown
;

1343  
	`EEº‹
(
dwEº‹s
);

1344 
	}
}

1346 
boﬁ
 
	gCSîül
::
	$GëCTS
 ()

1349 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1352 
DWORD
 
dwModemSèt
 = 0;

1353 i‡(!::
	`GëCommModemSètus
(
m_hFûe
,&
dwModemSèt
))

1356 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1359 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetCTS - UnableÅo obtainÅhe modem status\n");

1360  
Ál£
;

1364  (
dwModemSèt
 & 
MS_CTS_ON
) != 0;

1365 
	}
}

1367 
boﬁ
 
	gCSîül
::
	$GëDSR
 ()

1370 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1373 
DWORD
 
dwModemSèt
 = 0;

1374 i‡(!::
	`GëCommModemSètus
(
m_hFûe
,&
dwModemSèt
))

1377 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1380 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetDSR - UnableÅo obtainÅhe modem status\n");

1381  
Ál£
;

1385  (
dwModemSèt
 & 
MS_DSR_ON
) != 0;

1386 
	}
}

1388 
boﬁ
 
	gCSîül
::
	$GëRög
 ()

1391 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1394 
DWORD
 
dwModemSèt
 = 0;

1395 i‡(!::
	`GëCommModemSètus
(
m_hFûe
,&
dwModemSèt
))

1398 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1401 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetRing - UnableÅo obtainÅhe modem status");

1402  
Ál£
;

1406  (
dwModemSèt
 & 
MS_RING_ON
) != 0;

1407 
	}
}

1409 
boﬁ
 
	gCSîül
::
	$GëRLSD
 ()

1412 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

1415 
DWORD
 
dwModemSèt
 = 0;

1416 i‡(!::
	`GëCommModemSètus
(
m_hFûe
,&
dwModemSèt
))

1419 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

1422 
	`_RPTF0
(
_CRT_WARN
,"CSerial::GetRLSD - UnableÅo obtainÅhe modem status");

1423  
Ál£
;

1427  (
dwModemSèt
 & 
MS_RLSD_ON
) != 0;

1428 
	}
}

	@Serial/Serial.h

20 #i‚de‡
__SERIAL_H


21 
	#__SERIAL_H


	)

30 #i‚de‡
SERIAL_DEFAULT_OVERLAPPED


31 #i‚de‡
SERIAL_NO_OVERLAPPED


32 
	#SERIAL_DEFAULT_OVERLAPPED
 
åue


	)

34 
	#SERIAL_DEFAULT_OVERLAPPED
 
Ál£


	)

82 ˛as†
	cCSîül


85 
	mpublic
:

89 
EEvítUnknown
 = -1,

90 
	mEEvítN⁄e
 = 0,

91 
	mEEvítBªak
 = 
EV_BREAK
,

92 
	mEEvítCTS
 = 
EV_CTS
,

93 
	mEEvítDSR
 = 
EV_DSR
,

94 
	mEEvítEº‹
 = 
EV_ERR
,

95 
	mEEvítRög
 = 
EV_RING
,

96 
	mEEvítRLSD
 = 
EV_RLSD
,

97 
	mEEvítRecv
 = 
EV_RXCHAR
,

98 
	mEEvítRcvEv
 = 
EV_RXFLAG
,

99 
	mEEvítSíd
 = 
EV_TXEMPTY
,

100 
	mEEvítPröãrEº‹
 = 
EV_PERR
,

101 
	mEEvítRx80FuŒ
 = 
EV_RX80FULL
,

102 
	mEEvítProvidîEvt1
 = 
EV_EVENT1
,

103 
	mEEvítProvidîEvt2
 = 
EV_EVENT2
,

105 
	tEEvít
;

110 
	gEBaudUnknown
 = -1,

111 
	gEBaud110
 = 
CBR_110
,

112 
	gEBaud300
 = 
CBR_300
,

113 
	gEBaud600
 = 
CBR_600
,

114 
	gEBaud1200
 = 
CBR_1200
,

115 
	gEBaud2400
 = 
CBR_2400
,

116 
	gEBaud4800
 = 
CBR_4800
,

117 
	gEBaud9600
 = 
CBR_9600
,

118 
	gEBaud14400
 = 
CBR_14400
,

119 
	gEBaud19200
 = 
CBR_19200
,

120 
	gEBaud38400
 = 
CBR_38400
,

121 
	gEBaud56000
 = 
CBR_56000
,

122 
	gEBaud57600
 = 
CBR_57600
,

123 
	gEBaud115200
 = 
CBR_115200
,

124 
	gEBaud128000
 = 
CBR_128000
,

125 
	gEBaud256000
 = 
CBR_256000
,

127 
	tEBaudøã
;

132 
	gED©aUnknown
 = -1,

133 
	gED©a5
 = 5,

134 
	gED©a6
 = 6,

135 
	gED©a7
 = 7,

136 
	gED©a8
 = 8

138 
	tED©aBôs
;

143 
	gEP¨Unknown
 = -1,

144 
	gEP¨N⁄e
 = 
NOPARITY
,

145 
	gEP¨Odd
 = 
ODDPARITY
,

146 
	gEP¨Eví
 = 
EVENPARITY
,

147 
	gEP¨M¨k
 = 
MARKPARITY
,

148 
	gEP¨S∑˚
 = 
SPACEPARITY


150 
	tEP¨ôy
;

155 
	gESt›Unknown
 = -1,

156 
	gESt›1
 = 
ONESTOPBIT
,

157 
	gESt›1_5
 = 
ONE5STOPBITS
,

158 
	gESt›2
 = 
TWOSTOPBITS


160 
	tESt›Bôs
;

165 
	gEH™dshakeUnknown
 = -1,

166 
	gEH™dshakeOff
 = 0,

167 
	gEH™dshakeH¨dw¨e
 = 1,

168 
	gEH™dshakeSo·w¨e
 = 2

170 
	tEH™dshake
;

175 
	gERódTimeoutUnknown
 = -1,

176 
	gERódTimeoutN⁄blockög
 = 0,

177 
	gERódTimeoutBlockög
 = 1

179 
	tERódTimeout
;

184 
	gEEº‹Unknown
 = 0,

185 
	gEEº‹Bªak
 = 
CE_BREAK
,

186 
	gEEº‹Føme
 = 
CE_FRAME
,

187 
	gEEº‹IOE
 = 
CE_IOE
,

188 
	gEEº‹Mode
 = 
CE_MODE
,

189 
	gEEº‹Ovîrun
 = 
CE_OVERRUN
,

190 
	gEEº‹RxOvî
 = 
CE_RXOVER
,

191 
	gEEº‹P¨ôy
 = 
CE_RXPARITY
,

192 
	gEEº‹TxFuŒ
 = 
CE_TXFULL


194 
	tEEº‹
;

199 
	gEP‹tUnknownEº‹
 = -1,

200 
	gEP‹tAvaûabÀ
 = 0,

201 
	gEP‹tNŸAvaûabÀ
 = 1,

202 
	gEP‹tInU£
 = 2

205 
	tEP‹t
;

208 
	gpublic
:

209 
CSîül
();

210 
	gvútuÆ
 ~
CSîül
();

213 
	gpublic
:

215 
EP‹t
 
CheckP‹t
 (
LPCTSTR
 
ÕszDevi˚
);

220 
vútuÆ
 
LONG
 
O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
DWORD
 
dwInQueue
 = 0, DWORD 
dwOutQueue
 = 0, 
boﬁ
 
fOvîœµed
 = 
SERIAL_DEFAULT_OVERLAPPED
);

223 
vútuÆ
 
LONG
 
Clo£
 ();

241 
vútuÆ
 
LONG
 
Sëup
 (
EBaudøã
 
eBaudøã
 = 
EBaud9600
,

242 
ED©aBôs
 
eD©aBôs
 = 
ED©a8
,

243 
EP¨ôy
 
eP¨ôy
 = 
EP¨N⁄e
,

244 
ESt›Bôs
 
eSt›Bôs
 = 
ESt›1
);

250 
vútuÆ
 
LONG
 
SëEvítCh¨
 (
BYTE
 
bEvítCh¨
, 
boﬁ
 
fAdju°Mask
 = 
åue
);

257 
vútuÆ
 
LONG
 
SëMask
 (
DWORD
 
dwMask
 = 
EEvítBªak
|
EEvítEº‹
|
EEvítRecv
);

261 
vútuÆ
 
LONG
 
WaôEvít
 (
LPOVERLAPPED
 
ÕOvîœµed
 = 0, 
DWORD
 
dwTimeout
 = 
INFINITE
);

278 
vútuÆ
 
LONG
 
SëupH™dshakög
 (
EH™dshake
 
eH™dshake
);

291 
vútuÆ
 
LONG
 
SëupRódTimeouts
 (
ERódTimeout
 
eRódTimeout
);

294 
vútuÆ
 
EBaudøã
 
GëBaudøã
 ();

295 
vútuÆ
 
ED©aBôs
 
GëD©aBôs
 ();

296 
vútuÆ
 
EP¨ôy
 
GëP¨ôy
 ();

297 
vútuÆ
 
ESt›Bôs
 
GëSt›Bôs
 ();

298 
vútuÆ
 
EH™dshake
 
GëH™dshakög
 ();

299 
vútuÆ
 
DWORD
 
GëEvítMask
 ();

300 
vútuÆ
 
BYTE
 
GëEvítCh¨
 ();

305 
vútuÆ
 
LONG
 
Wrôe
 (c⁄° * 
pD©a
, 
size_t
 
iLí
, 
DWORD
* 
pdwWrôãn
 = 0, 
LPOVERLAPPED
 
ÕOvîœµed
 = 0, DWORD 
dwTimeout
 = 
INFINITE
);

306 
vútuÆ
 
LONG
 
Wrôe
 (
LPCSTR
 
pSåög
, 
DWORD
* 
pdwWrôãn
 = 0, 
LPOVERLAPPED
 
ÕOvîœµed
 = 0, DWORD 
dwTimeout
 = 
INFINITE
);

311 
vútuÆ
 
LONG
 
Ród
 (* 
pD©a
, 
size_t
 
iLí
, 
DWORD
* 
pdwRód
 = 0, 
LPOVERLAPPED
 
ÕOvîœµed
 = 0, DWORD 
dwTimeout
 = 
INFINITE
);

314 
LONG
 
Bªak
 ();

317 
EEvít
 
GëEvítTy≥
 ();

320 
EEº‹
 
GëEº‹
 ();

323 
HANDLE
 
	$GëCommH™dÀ
 (Ë{  
m_hFûe
; 
	}
}

326 
boﬁ
 
	$IsO≥n
 (Ëc⁄° {  (
m_hFûe
 !0); 
	}
}

329 
LONG
 
	$GëLa°Eº‹
 (Ëc⁄° {  
m_lLa°Eº‹
; 
	}
}

332 
boﬁ
 
GëCTS
 ();

333 
boﬁ
 
GëDSR
 ();

334 
boﬁ
 
GëRög
 ();

335 
boﬁ
 
GëRLSD
 ();

338 
LONG
 
Purge
 ();

340 
	g¥Ÿe˘ed
:

342 ˛as†
	cCDCB
 : 
public
 
DCB


344 
public
:

345 
CDCB
(Ë{ 
DCBÀngth
 = (
DCB
); }

349 
	g¥Ÿe˘ed
:

350 
LONG
 
m_lLa°Eº‹
;

351 
HANDLE
 
	gm_hFûe
;

352 
EEvít
 
	gm_eEvít
;

353 
DWORD
 
	gm_dwEvítMask
;

355 #i‚de‡
SERIAL_NO_OVERLAPPED


356 
HANDLE
 
	gm_hevtOvîœµed
;

359 
	g¥Ÿe˘ed
:

361 
	$CheckRequúemíts
 (
LPOVERLAPPED
 
ÕOvîœµed
, 
DWORD
 
dwTimeout
) const;

364 
BOOL
 
	`C™˚lCommIo
 ();

365 
	}
};

	@Serial/SerialEx.cpp

23 
	#STRICT


	)

24 
	~<¸tdbg.h
>

25 
	~<tch¨.h
>

26 
	~<wödows.h
>

32 
	~"SîülEx.h
"

39 #¥agm®
w¨nög
(
dißbÀ
: 4127)

45 #ifde‡
_DEBUG


47 #ifde‡
THIS_FILE


48 #unde‡
THIS_FILE


51 c⁄° 
	gTHIS_FILE
[] = 
__FILE__
;

52 
	#√w
 
DEBUG_NEW


	)

60 
	gCSîülEx
::
	$CSîülEx
()

61 : 
	`m_fSt›pög
(
Ál£
)

62 , 
	$m_hThªad
(0)

63 #i‚de‡
SERIAL_NO_OVERLAPPED


64 , 
	$m_hevtOvîœµedW‹kîThªad
(0)

67 
	}
}

69 
	gCSîülEx
::~
	$CSîülEx
()

75 i‡(
m_hThªad
)

78 
	`_RPTF0
(
_CRT_WARN
, "CSerialEx::~CSerialEx - SerialÖortÇot closed\n");

81 
	`Clo£
();

83 
	}
}

85 
LONG
 
	gCSîülEx
::
	$O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
DWORD
 
dwInQueue
, DWORD 
dwOutQueue
, 
boﬁ
 
fSèπLi°íî
)

88 
lLa°Eº‹
 = 
CSîül
::
	`O≥n
(
ÕszDevi˚
,
dwInQueue
,
dwOutQueue
,
SERIAL_DEFAULT_OVERLAPPED
);

89 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

90  
lLa°Eº‹
;

92 #i‚de‡
SERIAL_NO_OVERLAPPED


96 
m_hevtOvîœµedW‹kîThªad
 = ::
	`Cª©eEvít
(0,
åue
,
Ál£
,0);

97 i‡(
m_hevtOvîœµedW‹kîThªad
 == 0)

100 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

101 
	`_RPTF0
(
_CRT_WARN
,"CSerialEx::Open - UnableÅo createÉvent\n");

104 
CSîül
::
	`Clo£
();

107  
m_lLa°Eº‹
;

113 i‡(
fSèπLi°íî
)

115 
lLa°Eº‹
 = 
	`SèπLi°íî
();

116 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

117  
lLa°Eº‹
;

121  
m_lLa°Eº‹
;

122 
	}
}

124 
LONG
 
	gCSîülEx
::
	$Clo£
 ()

127 
	`St›Li°íî
(
INFINITE
);

129 #i‚de‡
SERIAL_NO_OVERLAPPED


131 i‡(
m_hevtOvîœµedW‹kîThªad
)

133 ::
	`Clo£H™dÀ
(
m_hevtOvîœµedW‹kîThªad
);

134 
m_hevtOvîœµedW‹kîThªad
 = 0;

140  
CSîül
::
	`Clo£
();

141 
	}
}

143 
LONG
 
	gCSîülEx
::
	$SèπLi°íî
 ()

146 i‡(
m_hThªad
 == 0)

149 
	`_ASSERTE
(!
m_fSt›pög
);

152 
DWORD
 
dwThªadId
 = 0;

153 
m_hThªad
 = ::
	`Cª©eThªad
(0,0,
ThªadProc
,
	`LPVOID
(
this
),0,&
dwThªadId
);

154 i‡(
m_hThªad
 == 0)

157 
	`_RPTF0
(
_CRT_WARN
, "CSerialEx::StartListener - UnableÅo start COMM watcherÅhread\n");

160 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

161  
m_lLa°Eº‹
;

166 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

167  
m_lLa°Eº‹
;

168 
	}
}

170 
LONG
 
	gCSîülEx
::
	$St›Li°íî
 (
DWORD
 
dwTimeout
)

173 i‡(
m_hThªad
)

176 
m_fSt›pög
 = 
åue
;

183 
	`SëMask
(
	`GëEvítMask
());

186 ::
	`WaôF‹SögÀObje˘
(
m_hThªad
,
dwTimeout
);

189 
m_fSt›pög
 = 
Ál£
;

192 ::
	`Clo£H™dÀ
(
m_hThªad
);

193 
m_hThªad
 = 0;

197 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

198  
m_lLa°Eº‹
;

199 
	}
}

201 
DWORD
 
WINAPI
 
	gCSîülEx
::
	$ThªadProc
 (
LPVOID
 
ÕArg
)

204 
CSîülEx
* 
pThis
 = 
ªöãΩªt_ˇ°
<CSîülEx*>(
ÕArg
);

205  
pThis
->
	`ThªadProc
();

206 
	}
}

208 
DWORD
 
	gCSîülEx
::
	$ThªadProc
 ()

211 
LPOVERLAPPED
 
ÕOvîœµed
 = 0;

216 #i‚de‡
SERIAL_NO_OVERLAPPED


218 ::
	`Re£tEvít
(
m_hevtOvîœµedW‹kîThªad
);

221 
OVERLAPPED
 
ovI¡î«l
 = {0};

222 
ovI¡î«l
.
hEvít
 = 
m_hevtOvîœµedW‹kîThªad
;

225 i‡(
	`WaôEvít
(&
ovI¡î«l
Ë!
ERROR_SUCCESS
)

226  
m_lLa°Eº‹
;

229 i‡(::
	`WaôF‹SögÀObje˘
(
m_hevtOvîœµedW‹kîThªad
,
INFINITE
Ë!
WAIT_OBJECT_0
)

232 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

235 
	`_RPTF0
(
_CRT_WARN
,"CSerialEx::ThreadProc - UnableÅo wait until COMÉvent hasárrived\n");

236  
m_lLa°Eº‹
;

240 i‡(
	`WaôEvít
(Ë!
ERROR_SUCCESS
)

241  
m_lLa°Eº‹
;

245 i‡(!
m_fSt›pög
)

248 
EEvít
 
eEvít
 = 
	`GëEvítTy≥
();

251 
DWORD
 
dwEº‹s
 = 0;

252 i‡(!::
	`CÀ¨CommEº‹
(
m_hFûe
,&
dwEº‹s
,0))

255 
m_lLa°Eº‹
 = ::
	`GëLa°Eº‹
();

258 
	`_RPTF0
(
_CRT_WARN
, "CSerialEx::ThreadProc - UnableÅo obtain COM status\n");

262 
EEº‹
 
eEº‹
 = 
	`EEº‹
(
dwEº‹s
);

268 i‡(
eEvít
)

269 
	`OnEvít
(
eEvít
,
eEº‹
);

272 !
m_fSt›pög
);

276 
	}
}

	@Serial/SerialEx.h

20 #i‚de‡
__SERIAL_EX_H


21 
	#__SERIAL_EX_H


	)

27 
	~"Sîül.h
"

60 ˛as†
	cCSîülEx
 : 
public
 
CSîül


63 
public
:

64 
CSîülEx
();

65 
	mvútuÆ
 ~
CSîülEx
();

68 
	mpublic
:

71 
vútuÆ
 
LONG
 
O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
DWORD
 
dwInQueue
 = 0, DWORD 
dwOutQueue
 = 0, 
boﬁ
 
fSèπLi°íî
 = 
Ál£
);

74 
vútuÆ
 
LONG
 
Clo£
 ();

77 
vútuÆ
 
LONG
 
SèπLi°íî
 ();

82 
vútuÆ
 
LONG
 
St›Li°íî
 (
DWORD
 
dwTimeout
 = 
INFINITE
);

84 
	m¥Ÿe˘ed
:

89 
DWORD
 
WINAPI
 
ThªadProc
 (
LPVOID
 
ÕArg
);

90 
DWORD
 
ThªadProc
 ();

93 
vútuÆ
 
OnEvít
 (
EEvít
 
eEvít
, 
EEº‹
 
eEº‹
) = 0;

95 
	m¥Ÿe˘ed
:

99 
usög
 
CSîül
::
WaôEvít
;

104 
usög
 
	mCSîül
::
GëEvítTy≥
;

105 
usög
 
	mCSîül
::
GëEº‹
;

107 
	m¥Ÿe˘ed
:

109 
boﬁ
 
m_fSt›pög
;

110 
HANDLE
 
	mm_hThªad
;

112 #i‚de‡
SERIAL_NO_OVERLAPPED


114 
HANDLE
 
	mm_hevtOvîœµedW‹kîThªad
;

	@Serial/SerialMFC.h

20 #i‚de‡
__SERIAL_MFC_H


21 
	#__SERIAL_MFC_H


	)

27 
	~"SîülWnd.h
"

36 #i‚de‡
__AFXWIN_H__


94 ˛as†
	cCSîülMFC
 : 
public
 
CSîülWnd


97 
public
:

100 
vútuÆ
 
LONG
 
	$O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
CWnd
* 
pwndDe°
, 
UINT
 
nComMsg
 = 
WM_NULL
, 
LPARAM
 
lP¨am
 = 0, 
DWORD
 
dwInQueue
 = 0, DWORD 
dwOutQueue
 = 0)

102  
CSîülWnd
::
	`O≥n
(
ÕszDevi˚
,
pwndDe°
->
	`GëSa„Hwnd
(),
nComMsg
,
lP¨am
,
dwInQueue
,
dwOutQueue
);

104 
	}
};

110 
	#ON_WM_SERIAL
(
membîFxn
) \

111 
	`ON_REGISTERED_MESSAGE
(
CSîülMFC
::
mg_nDeÁu…ComMsg
,
membîFxn
)

	)

118 #ifde‡
_DEBUG


119 #¥agm®
commít
(
lökî
,"/nodefaultlib:LIBCD")

121 #¥agm®
commít
(
lökî
,"/nodefaultlib:LIBC")

	@Serial/SerialWnd.cpp

23 
	#STRICT


	)

24 
	~<¸tdbg.h
>

25 
	~<tch¨.h
>

26 
	~<wödows.h
>

32 
	~"SîülWnd.h
"

39 #¥agm®
w¨nög
(
dißbÀ
: 4127)

45 #ifde‡
_DEBUG


47 #ifde‡
THIS_FILE


48 #unde‡
THIS_FILE


51 c⁄° 
	gTHIS_FILE
[] = 
__FILE__
;

52 
	#√w
 
DEBUG_NEW


	)

61 c⁄° 
UINT
 
	gCSîülWnd
::
mg_nDeÁu…ComMsg
 = ::
Regi°îWödowMesßge
(
_T
("CSerialWnd_DefaultComMsg"));

64 
	gCSîülWnd
::
	$CSîülWnd
()

65 : 
	`m_hwndDe°
(0)

66 , 
	`m_nComMsg
(
WM_NULL
)

67 , 
	$m_lP¨am
(0)

69 
	}
}

71 
	gCSîülWnd
::~
	$CSîülWnd
()

77 i‡(
m_hThªad
)

80 
	`_RPTF0
(
_CRT_WARN
, "CSerialWnd::~CSerialWnd - SerialÖortÇot closed\n");

83 
	`Clo£
();

85 
	}
}

87 
LONG
 
	gCSîülWnd
::
	$O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
HWND
 
hwndDe°
, 
UINT
 
nComMsg
, 
LPARAM
 
lP¨am
, 
DWORD
 
dwInQueue
, DWORD 
dwOutQueue
)

90 
lLa°Eº‹
 = 
CSîülEx
::
	`O≥n
(
ÕszDevi˚
,
dwInQueue
,
dwOutQueue
);

91 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

92  
lLa°Eº‹
;

95 
m_hwndDe°
 = 
hwndDe°
;

96 
m_nComMsg
 = 
nComMsg
?nComMsg:
mg_nDeÁu…ComMsg
;

97 
m_lP¨am
 = 
lP¨am
;

100 
lLa°Eº‹
 = 
	`SèπLi°íî
();

101 i‡(
lLa°Eº‹
 !
ERROR_SUCCESS
)

104 
	`Clo£
();

107 
m_lLa°Eº‹
 = 
lLa°Eº‹
;

108  
m_lLa°Eº‹
;

112 
m_lLa°Eº‹
 = 
ERROR_SUCCESS
;

113  
m_lLa°Eº‹
;

114 
	}
}

116 
LONG
 
	gCSîülWnd
::
	$Clo£
 ()

119 
m_hwndDe°
 = 0;

120 
m_nComMsg
 = 
WM_NULL
;

123  
CSîülEx
::
	`Clo£
();

124 
	}
}

126 
	gCSîülWnd
::
	$OnEvít
 (
EEvít
 
eEvít
, 
EEº‹
 
eEº‹
)

129 ::
	`Po°Mesßge
(
m_hwndDe°
,
m_nComMsg
,
	`MAKEWPARAM
(
eEvít
,
eEº‹
),
	`LPARAM
(
m_lP¨am
));

130 
	}
}

	@Serial/SerialWnd.h

20 #i‚de‡
__SERIAL_WND_H


21 
	#__SERIAL_WND_H


	)

27 
	~"SîülEx.h
"

60 ˛as†
	cCSîülWnd
 : 
public
 
CSîülEx


63 
public
:

64 
CSîülWnd
();

65 
	mvútuÆ
 ~
CSîülWnd
();

68 
	mpublic
:

71 
vútuÆ
 
LONG
 
O≥n
 (
LPCTSTR
 
ÕszDevi˚
, 
HWND
 
hwndDe°
, 
UINT
 
nComMsg
=
WM_NULL
, 
LPARAM
 
lP¨am
=0, 
DWORD
 
dwInQueue
 = 0, DWORD 
dwOutQueue
 = 0);

74 
vútuÆ
 
LONG
 
Clo£
 ();

76 
	m¥Ÿe˘ed
:

78 
vútuÆ
 
OnEvít
 (
EEvít
 
eEvít
, 
EEº‹
 
eEº‹
);

80 
	mpublic
:

82 c⁄° 
UINT
 
mg_nDeÁu…ComMsg
;

84 
	m¥Ÿe˘ed
:

86 
HWND
 
m_hwndDe°
;

87 
UINT
 
	mm_nComMsg
;

88 
LONG
 
	mm_lP¨am
;

	@SerialTestMFC/AboutDlg.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"AboutDlg.h
"

5 #ifde‡
_DEBUG


6 
	#√w
 
DEBUG_NEW


	)

7 #unde‡
THIS_FILE


8 
	gTHIS_FILE
[] = 
__FILE__
;

15 
	$BEGIN_MESSAGE_MAP
(
CAboutDlg
, 
CDülog
)

18 
	$END_MESSAGE_MAP
()

24 
CAboutDlg
::
	$CAboutDlg
(Ë: 
	$CDülog
(
CAboutDlg
::
IDD
)

28 
	}
}

30 
CAboutDlg
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

32 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

35 
	}
}

37 
BOOL
 
	gCAboutDlg
::
	$OnInôDülog
()

40 
CDülog
::
	`OnInôDülog
();

42 
LOGFONT
 
logF⁄t
 = {0};

44 
logF⁄t
.
lfCh¨Së
 = 
DEFAULT_CHARSET
;

45 
logF⁄t
.
lfHeight
 = 24;

46 
logF⁄t
.
lfWeight
 = 
FW_BOLD
;

47 
	`l°r˝y
(
logF⁄t
.
lfFa˚Name
, 
	`_T
("Arial"));

49 
HFONT
 
hF⁄t
 = ::
	`Cª©eF⁄tIndúe˘
(&
logF⁄t
);

51 
	`SídDlgIãmMesßge
(
IDC_ABOUT_TITLE
, 
WM_SETFONT
, 
	`LPARAM
(
hF⁄t
), 
FALSE
);

54  
TRUE
;

56 
	}
}

	@SerialTestMFC/AboutDlg.h

1 #i‚de‡
__ABOUTDLG_H


2 
	#__ABOUTDLG_H


	)

8 
	~"Resour˚.h
"

14 ˛as†
	cCAboutDlg
 : 
public
 
CDülog


16 
public
:

18 
CAboutDlg
();

20 
	mpublic
:

23 íum { 
IDD
 = 
IDD_ABOUTBOX
 };

26 
	gpublic
:

31 
¥Ÿe˘ed
:

32 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

35 
	g¥Ÿe˘ed
:

39 
vútuÆ
 
BOOL
 
OnInôDülog
();

42 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/ChildFrm.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"ChûdFrm.h
"

5 #ifde‡
_DEBUG


6 
	#√w
 
DEBUG_NEW


	)

7 #unde‡
THIS_FILE


8 
	gTHIS_FILE
[] = 
__FILE__
;

15 
	$IMPLEMENT_DYNCREATE
(
CChûdFøme
, 
CMDIChûdWnd
)

17 
	$BEGIN_MESSAGE_MAP
(
CChûdFøme
, 
CMDIChûdWnd
)

19 
	$ON_WM_CREATE
()

20 
	$ON_WM_SETFOCUS
()

21 
	$ON_COMMAND
(
ID_FILE_CLOSE
, 
OnFûeClo£
)

22 
	$ON_COMMAND
(
ID_COM_CLOSE
, 
OnComClo£
)

24 
	$END_MESSAGE_MAP
()

30 
CChûdFøme
::
	$CChûdFøme
()

32 
	}
}

34 
CChûdFøme
::~
	$CChûdFøme
()

36 
	}
}

38 
BOOL
 
CChûdFøme
::
	$PªCª©eWödow
(
CREATESTRUCT
& 
cs
)

41 i‡(!
CMDIChûdWnd
::
	`PªCª©eWödow
(
cs
))

42  
FALSE
;

45 
cs
.
dwExStyÀ
 &~
WS_EX_CLIENTEDGE
;

46 
cs
.
ÕszCœss
 = 
	`AfxRegi°îWndCœss
(0);

47  
TRUE
;

48 
	}
}

50 
BOOL
 
	gCChûdFøme
::
	$OnCmdMsg
(
UINT
 
nID
, 
nCode
, * 
pExåa
, 
AFX_CMDHANDLERINFO
* 
pH™dÀrInfo
)

53 i‡(
m_wndVõw
.
	`OnCmdMsg
(
nID
, 
nCode
, 
pExåa
, 
pH™dÀrInfo
))

54  
TRUE
;

57  
CMDIChûdWnd
::
	`OnCmdMsg
(
nID
, 
nCode
, 
pExåa
, 
pH™dÀrInfo
);

58 
	}
}

60 
	gCChûdFøme
::
	$OnCª©e
(
LPCREATESTRUCT
 
ÕCª©eSåu˘
)

62 i‡(
CMDIChûdWnd
::
	`OnCª©e
(
ÕCª©eSåu˘
) == -1)

66 i‡(!
m_wndVõw
.
	`Cª©e
(0, 0, 
AFX_WS_DEFAULT_VIEW
,

67 
	`CRe˘
(0, 0, 0, 0), 
this
, 
AFX_IDW_PANE_FIRST
, 0))

69 
	`TRACE0
("FailedÅo create view window\n");

74 
	}
}

76 
	gCChûdFøme
::
	$OnSëFocus
(
CWnd
* 
pOldWnd
)

79 
CMDIChûdWnd
::
	`OnSëFocus
(
pOldWnd
);

82 
m_wndVõw
.
	`SëFocus
();

83 
	}
}

85 
	gCChûdFøme
::
	$OnFûeClo£
()

90 
	`SídMesßge
(
WM_CLOSE
);

91 
	}
}

93 
	gCChûdFøme
::
	$OnComClo£
()

96 
	`De°royWödow
();

97 
	}
}

	@SerialTestMFC/ChildFrm.h

1 #i‚de‡
__CHILDFRM_H


2 
	#__CHILDFRM_H


	)

8 
	~"ChûdVõw.h
"

14 ˛as†
	cCChûdFøme
 : 
public
 
CMDIChûdWnd


16 
public
:

18 
CChûdFøme
();

19 
	mvútuÆ
 ~
CChûdFøme
();

21 
	mpublic
:

26 
public
:

27 
vútuÆ
 
BOOL
 
PªCª©eWödow
(
CREATESTRUCT
& 
cs
);

28 
vútuÆ
 
BOOL
 
OnCmdMsg
(
UINT
 
nID
, 
nCode
, * 
pExåa
, 
AFX_CMDHANDLERINFO
* 
pH™dÀrInfo
);

31 
	mpublic
:

33 
CChûdVõw
 
m_wndVõw
;

35 
	m¥Ÿe˘ed
:

39 
afx_msg
 
OnCª©e
(
LPCREATESTRUCT
 
ÕCª©eSåu˘
);

40 
afx_msg
 
OnSëFocus
(
CWnd
* 
pOldWnd
);

41 
afx_msg
 
OnFûeClo£
();

42 
afx_msg
 
OnComClo£
();

45 
	$DECLARE_MESSAGE_MAP
()

46 
	`DECLARE_DYNCREATE
(
CChûdFøme
)

	@SerialTestMFC/ChildView.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"ChûdVõw.h
"

4 
	~"ComSñe˘Dlg.h
"

5 
	~"ShìtSëtögs.h
"

7 #ifde‡
_UNICODE


8 
	~<mÆloc.h
>

11 #ifde‡
_DEBUG


12 
	#√w
 
DEBUG_NEW


	)

13 #unde‡
THIS_FILE


14 
	gTHIS_FILE
[] = 
__FILE__
;

21 
	$BEGIN_MESSAGE_MAP
(
CChûdVõw
,
CWnd
)

23 
	$ON_COMMAND
(
ID_COM_SETTINGS
, 
OnComSëtögs
)

24 
	$ON_UPDATE_COMMAND_UI
(
ID_COM_SETTINGS
, 
OnUpd©eComSëtögs
)

25 
	$ON_WM_CREATE
()

26 
	$ON_WM_SIZE
()

27 
	$ON_COMMAND
(
ID_COMMANDS_SENDFILE
, 
OnComm™dSídFûe
)

28 
	$ON_COMMAND
(
ID_COMMANDS_SENDBREAK
, 
OnComm™dSídBªak
)

29 
	$ON_WM_SETFOCUS
()

31 
	$ON_WM_SERIAL
(
OnSîülMsg
)

32 
	$END_MESSAGE_MAP
()

38 
CChûdVõw
::
	$CChûdVõw
()

40 
	}
}

42 
CChûdVõw
::~
	$CChûdVõw
()

45 
m_£rül
.
	`Clo£
();

46 
	}
}

48 
BOOL
 
	gCChûdVõw
::
	$PªCª©eWödow
(
CREATESTRUCT
& 
cs
)

51 i‡(!
CWnd
::
	`PªCª©eWödow
(
cs
))

52  
FALSE
;

55 
cs
.
°yÀ
 &~
WS_BORDER
;

56 
cs
.
ÕszCœss
 = 
	`AfxRegi°îWndCœss
(
CS_HREDRAW
|
CS_VREDRAW
|
CS_DBLCLKS
,::
	`LﬂdCurs‹
(0, 
IDC_ARROW
), 
	`HBRUSH
(
COLOR_WINDOW
), 0);

58  
TRUE
;

59 
	}
}

61 
	gCChûdVõw
::
	$OnComSëtögs
()

64 
CShìtSëtögs
 
	`shìtSëtögs
(&
m_£rül
,
this
);

65 
shìtSëtögs
.
	`DoModÆ
();

66 
	}
}

68 
	gCChûdVõw
::
	$OnUpd©eComSëtögs
(
CCmdUI
* 
pCmdUI
)

70 
pCmdUI
->
	`E«bÀ
(
m_£rül
.
	`GëCommH™dÀ
(Ë!
INVALID_HANDLE_VALUE
);

71 
	}
}

73 
	gCChûdVõw
::
	$OnCª©e
(
LPCREATESTRUCT
 
ÕCª©eSåu˘
)

76 i‡(
CWnd
::
	`OnCª©e
(
ÕCª©eSåu˘
) == -1)

80 
	`VERIFY
(
m_wndEdô
.
	`Cª©e
(
WS_VISIBLE
|
WS_CHILD
|
WS_BORDER
|
ES_AUTOHSCROLL
|
ES_AUTOVSCROLL
|
ES_LEFT
|
ES_MULTILINE
,
	`CRe˘
(0,0,0,0),
this
,0));

83 
CComSñe˘Dlg
 
	`dlgComSñe˘
(
this
);

84 
dlgComSñe˘
.
	`DoModÆ
();

87 i‡(
m_£rül
.
	`O≥n
(
dlgComSñe˘
.
m_°rComP‹t
,
this
Ë!
ERROR_SUCCESS
)

89 
	`AfxMesßgeBox
(
	`_T
("U«bÀÅÿ›í COM-p‹t"),
MB_ICONSTOP
|
MB_OK
);

90 
	`GëP¨ít
()->
	`Po°Mesßge
(
WM_CLOSE
);

95 
m_wndEdô
.
m_pSîül
 = &
m_£rül
;

97 
	}
}

99 
	gCChûdVõw
::
	$OnSize
(
UINT
 
nTy≥
, 
cx
, 
cy
)

102 
CWnd
::
	`OnSize
(
nTy≥
, 
cx
, 
cy
);

105 
m_wndEdô
.
	`SëWödowPos
(0,0,0,
cx
,
cy
,
SWP_NOACTIVATE
|
SWP_NOMOVE
|
SWP_NOOWNERZORDER
|
SWP_NOZORDER
);

106 
	}
}

108 
LRESULT
 
	gCChûdVõw
::
	$OnSîülMsg
 (
WPARAM
 
wP¨am
, 
LPARAM
 )

110 
CSîül
::
EEvít
 
eEvít
 = CSîül::
	`EEvít
(
	`LOWORD
(
wP¨am
));

111 
CSîül
::
EEº‹
 
eEº‹
 = CSîül::
	`EEº‹
(
	`HIWORD
(
wP¨am
));

113 i‡(
eEº‹
)

114 
	`Di•œyEvít
(
	`_T
("An internalÉrror occurred."));

116 i‡(
eEvít
 & 
CSîül
::
EEvítBªak
)

117 
	`Di•œyEvít
(
	`_T
("Break detected on input."));

119 i‡(
eEvít
 & 
CSîül
::
EEvítEº‹
)

120 
	`Di•œyEvít
(
	`_T
("AÜine-statusÉrror occurred."));

122 i‡(
eEvít
 & 
CSîül
::
EEvítRcvEv
)

123 
	`Di•œyEvít
(
	`_T
("Event character has beenÑeceived."));

125 i‡(
eEvít
 & 
CSîül
::
EEvítRög
)

126 
	`Di•œyEvít
(
	`_T
("Ring detected"));

128 i‡(
eEvít
 & 
CSîül
::
EEvítSíd
)

129 
	`Di•œyEvít
(
	`_T
("All data is send"));

131 i‡(
eEvít
 & 
CSîül
::
EEvítCTS
)

132 
	`Di•œyEvítSëtög
(
	`_T
("CTS sig«»ch™ge"), _T("CTS"), 
m_£rül
.
	`GëCTS
());

134 i‡(
eEvít
 & 
CSîül
::
EEvítDSR
)

135 
	`Di•œyEvítSëtög
(
	`_T
("DSR sig«»ch™ge"), _T("DSR"), 
m_£rül
.
	`GëDSR
());

137 i‡(
eEvít
 & 
CSîül
::
EEvítRLSD
)

138 
	`Di•œyEvítSëtög
(
	`_T
("RLSD sig«»ch™ge"), _T("RLSD"), 
m_£rül
.
	`GëRLSD
());

140 i‡(
eEvít
 & 
CSîül
::
EEvítRecv
)

143 
DWORD
 
dwRód
;

144 
szD©a
[101];

145 c⁄° 
nBuÊí
 = (
szD©a
)-1;

150 
m_£rül
.
	`Ród
(
szD©a
,
nBuÊí
,&
dwRód
);

151 
szD©a
[
dwRód
] = '\0';

154 
DWORD
 
dwCh¨
=0; dwCh¨<
dwRód
; dwChar++)

156 i‡(!
	`i•röt
(
szD©a
[
dwCh¨
]Ë&& !
	`is•a˚
(szData[dwChar]))

158 
szD©a
[
dwCh¨
] = '.';

162 #ifde‡
_UNICODE


164 
LPTSTR
 
ÕszD©a
 = 
	`LPTSTR
(
	`_Æloˇ
((
dwRód
+1)*(
TCHAR
)));

165 i‡(!::
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
szD©a
, -1, 
ÕszD©a
, 
dwRód
+1))

169 
	`Di•œyD©a
(
ÕszD©a
);

172 
	`Di•œyD©a
(
szD©a
);

174 } 
dwRód
 =
nBuÊí
);

178 
	}
}

180 
	gCChûdVõw
::
	$Di•œyEvít
 (
LPCTSTR
 
ÕszMsg
)

183 
CHARFORMAT
 
cf
;

184 
cf
.
cbSize
 = (cf);

185 
cf
.
dwMask
 = 
CFM_COLOR
;

186 
m_wndEdô
.
	`GëSñe˘i⁄Ch¨F‹m©
(
cf
);

187 
cf
.
¸TextCﬁ‹
 = 0x000000FF;

188 
cf
.
dwEf„˘s
 &~
CFE_AUTOCOLOR
;

189 
m_wndEdô
.
	`SëSñe˘i⁄Ch¨F‹m©
(
cf
);

192 
TCHAR
 
tszMsg
[200];

193 
	`w•rötf
(
tszMsg
,
	`_T
("[%s]"), 
ÕszMsg
);

194 
m_wndEdô
.
	`SëSñ
(-1,-1);

195 
m_wndEdô
.
	`Rïœ˚Sñ
(
tszMsg
);

196 
	}
}

198 
	gCChûdVõw
::
	$Di•œyEvítSëtög
 (
LPCTSTR
 
ÕszMsg
, LPCTSTR 
ÕszSëtög
, 
boﬁ
 
fOn
)

200 
TCHAR
 
tszMsg
[200];

201 
	`w•rötf
(
tszMsg
,
	`_T
("%†(%s=%s)"), 
ÕszMsg
, 
ÕszSëtög
, (
fOn
?_T("on"):_T("off")));

202 
	`Di•œyEvít
(
tszMsg
);

203 
	}
}

205 
	gCChûdVõw
::
	$Di•œyD©a
 (
LPCTSTR
 
pszD©a
)

208 
CHARFORMAT
 
cf
;

209 
cf
.
cbSize
 = (cf);

210 
cf
.
dwMask
 = 
CFM_COLOR
;

211 
m_wndEdô
.
	`GëSñe˘i⁄Ch¨F‹m©
(
cf
);

212 
cf
.
dwEf„˘s
 |
CFE_AUTOCOLOR
;

213 
m_wndEdô
.
	`SëSñe˘i⁄Ch¨F‹m©
(
cf
);

216 
m_wndEdô
.
	`SëSñ
(-1,-1);

217 
m_wndEdô
.
	`Rïœ˚Sñ
(
pszD©a
);

218 
	}
}

220 
	gCChûdVõw
::
	$OnComm™dSídFûe
()

223 
CFûeDülog
 
	`dlgFûeO≥n
(
TRUE
,
NULL
,NULL,
OFN_FILEMUSTEXIST
|
OFN_HIDEREADONLY
|
OFN_PATHMUSTEXIST
,
	`_T
("AŒ fûe†(*.*)|*.*||"),
this
);

224 i‡(
dlgFûeO≥n
.
	`DoModÆ
(Ë!
IDOK
)

228 
HANDLE
 
hFûe
 = ::
	`Cª©eFûe
(
dlgFûeO≥n
.
	`GëP©hName
(),
GENERIC_READ
,
FILE_SHARE_READ
,
NULL
,
OPEN_EXISTING
,
FILE_FLAG_SEQUENTIAL_SCAN
,NULL);

229 i‡(
hFûe
 !
INVALID_HANDLE_VALUE
)

232 
DWORD
 
dwD©aLí
 = ::
	`GëFûeSize
(
hFûe
,0);

235 
HANDLE
 
hM≠
 = ::
	`Cª©eFûeM≠pög
(
hFûe
,
NULL
,
PAGE_READONLY
,0,0,NULL);

236 i‡(
hM≠
 !
NULL
)

238 
LPVOID
 
ÕD©a
 = ::
	`M≠VõwOfFûe
(
hM≠
,
FILE_MAP_READ
,0,0,0);

239 i‡(
ÕD©a
)

242 
DWORD
 
dwWrôãn
 = 0;

243 
m_£rül
.
	`Wrôe
(
ÕD©a
,
dwD©aLí
,&
dwWrôãn
);

246 
CSåög
 
°rEvít
;

247 
°rEvít
.
	`F‹m©
(
	`_T
("Wrôã¿%d byãs."), 
dwWrôãn
);

248 
	`Di•œyEvít
(
°rEvít
);

251 ::
	`Unm≠VõwOfFûe
(
ÕD©a
);

255 ::
	`Clo£H™dÀ
(
hM≠
);

259 ::
	`Clo£H™dÀ
(
hFûe
);

261 
	}
}

263 
	gCChûdVõw
::
	$OnComm™dSídBªak
()

266 
m_£rül
.
	`Bªak
();

267 
	}
}

269 
	gCChûdVõw
::
	$OnSëFocus
(
CWnd
* 
pOldWnd
)

272 
CWnd
::
	`OnSëFocus
(
pOldWnd
);

275 
m_wndEdô
.
	`SëFocus
();

276 
	}
}

	@SerialTestMFC/ChildView.h

1 #i‚de‡
__CHILDVIEW_H


2 
	#__CHILDVIEW_H


	)

8 
	~"SîülMFC.h
"

9 
	~"RichCommEdô.h
"

15 ˛as†
	cCChûdVõw
 : 
public
 
CWnd


17 
public
:

19 
CChûdVõw
();

20 
	mvútuÆ
 ~
CChûdVõw
();

22 
	mpublic
:

24 
CRichCommEdô
 
m_wndEdô
;

25 
CSîülMFC
 
	mm_£rül
;

27 
	mpublic
:

32 
¥Ÿe˘ed
:

33 
vútuÆ
 
BOOL
 
PªCª©eWödow
(
CREATESTRUCT
& 
cs
);

36 
	m¥Ÿe˘ed
:

40 
afx_msg
 
OnComSëtögs
();

41 
afx_msg
 
OnUpd©eComSëtögs
(
CCmdUI
* 
pCmdUI
);

42 
afx_msg
 
OnCª©e
(
LPCREATESTRUCT
 
ÕCª©eSåu˘
);

43 
afx_msg
 
OnSize
(
UINT
 
nTy≥
, 
cx
, 
cy
);

44 
afx_msg
 
OnComm™dSídFûe
();

45 
afx_msg
 
OnComm™dSídBªak
();

46 
afx_msg
 
OnSëFocus
(
CWnd
* 
pOldWnd
);

48 
afx_msg
 
LRESULT
 
OnSîülMsg
 (
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
);

50 
	m¥Ÿe˘ed
:

52 
Di•œyEvít
 (
LPCTSTR
 
ÕszMsg
);

53 
Di•œyEvítSëtög
 (
LPCTSTR
 
ÕszMsg
, LPCTSTR 
ÕszSëtög
, 
boﬁ
 
fOn
);

54 
Di•œyD©a
 (
LPCTSTR
 
pszD©a
);

56 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/ComSelectDlg.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"ComSñe˘Dlg.h
"

4 
	~"Sîül.h
"

6 #ifde‡
_DEBUG


7 
	#√w
 
DEBUG_NEW


	)

8 #unde‡
THIS_FILE


9 
	gTHIS_FILE
[] = 
__FILE__
;

16 
	$BEGIN_MESSAGE_MAP
(
CComSñe˘Dlg
, 
CDülog
)

19 
	$END_MESSAGE_MAP
()

25 
CComSñe˘Dlg
::
	$CComSñe˘Dlg
(
CWnd
* 
pP¨ít
 )

26 : 
	$CDülog
(
CComSñe˘Dlg
::
IDD
, 
pP¨ít
)

29 
m_nComIndex
 = 0;

31 
	}
}

34 
	gCComSñe˘Dlg
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

36 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

38 
	`DDX_Radio
(
pDX
, 
IDC_COM1
, 
m_nComIndex
);

40 
	}
}

42 
BOOL
 
	gCComSñe˘Dlg
::
	$OnInôDülog
()

45 
CDülog
::
	`OnInôDülog
();

48 
	`GëDlgIãm
(
IDC_COM1
)->
	`E«bÀWödow
(
CSîül
::
	`CheckP‹t
(
	`_T
("COM1")Ë=CSîül::
EP‹tAvaûabÀ
);

49 
	`GëDlgIãm
(
IDC_COM2
)->
	`E«bÀWödow
(
CSîül
::
	`CheckP‹t
(
	`_T
("COM2")Ë=CSîül::
EP‹tAvaûabÀ
);

50 
	`GëDlgIãm
(
IDC_COM3
)->
	`E«bÀWödow
(
CSîül
::
	`CheckP‹t
(
	`_T
("COM3")Ë=CSîül::
EP‹tAvaûabÀ
);

51 
	`GëDlgIãm
(
IDC_COM4
)->
	`E«bÀWödow
(
CSîül
::
	`CheckP‹t
(
	`_T
("COM4")Ë=CSîül::
EP‹tAvaûabÀ
);

52  
TRUE
;

53 
	}
}

55 
	gCComSñe˘Dlg
::
	$OnOK
 ()

58 
	`Upd©eD©a
(
TRUE
);

61 
m_°rComP‹t
.
	`F‹m©
(
	`_T
("COM%d"), 
m_nComIndex
+1);

64 
CDülog
::
	`OnOK
();

65 
	}
}

	@SerialTestMFC/ComSelectDlg.h

1 #i‚de‡
__COMSELECTDLG_H


2 
	#__COMSELECTDLG_H


	)

8 
	~"Resour˚.h
"

14 ˛as†
	cCComSñe˘Dlg
 : 
public
 
CDülog


16 
public
:

18 
CComSñe˘Dlg
(
CWnd
* 
pP¨ít
 = 0);

20 
	mpublic
:

22 
CSåög
 
m_°rComP‹t
;

24 
	mpublic
:

27 íum { 
IDD
 = 
IDD_COM_SELECT
 };

28 
	gm_nComIndex
;

31 
	gpublic
:

36 
¥Ÿe˘ed
:

37 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

38 
vútuÆ
 
OnOK
 ();

41 
	g¥Ÿe˘ed
:

45 
vútuÆ
 
BOOL
 
OnInôDülog
();

48 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/MainFrm.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"MaöFrm.h
"

5 #ifde‡
_DEBUG


6 
	#√w
 
DEBUG_NEW


	)

7 #unde‡
THIS_FILE


8 
	gTHIS_FILE
[] = 
__FILE__
;

15 
	$IMPLEMENT_DYNAMIC
(
CMaöFøme
, 
CMDIFømeWnd
)

17 
	$BEGIN_MESSAGE_MAP
(
CMaöFøme
, 
CMDIFømeWnd
)

20 
	$END_MESSAGE_MAP
()

26 
CMaöFøme
::
	$CMaöFøme
()

28 
	}
}

30 
CMaöFøme
::~
	$CMaöFøme
()

32 
	}
}

	@SerialTestMFC/MainFrm.h

1 #i‚de‡
__MAINFRM_H


2 
	#__MAINFRM_H


	)

8 ˛as†
	cCMaöFøme
 : 
public
 
CMDIFømeWnd


10 
public
:

12 
CMaöFøme
();

13 
	mvútuÆ
 ~
CMaöFøme
();

15 
	mpublic
:

22 
public
:

28 
	$DECLARE_MESSAGE_MAP
()

29 
	`DECLARE_DYNAMIC
(
CMaöFøme
)

	@SerialTestMFC/PageComEvents.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"PageComEvíts.h
"

4 
	~"Sîül.h
"

6 #ifde‡
_DEBUG


7 
	#√w
 
DEBUG_NEW


	)

8 #unde‡
THIS_FILE


9 
	gTHIS_FILE
[] = 
__FILE__
;

16 
	$BEGIN_MESSAGE_MAP
(
CPageComEvíts
, 
CPr›îtyPage
)

18 
	$ON_BN_CLICKED
(
IDC_EVENT_RCV_EV
, 
OnEvítRcvEv
)

20 
	$END_MESSAGE_MAP
()

26 
CPageComEvíts
::
	$CPageComEvíts
(
CSîül
* 
pSîül
)

27 : 
	`CPr›îtyPage
(
CPageComEvíts
::
IDD
)

28 , 
	$m_pSîül
(
pSîül
)

31 
DWORD
 
dwEvíts
 = 
m_pSîül
->
	`GëEvítMask
();

32 
m_fBªak
 = ((
dwEvíts
 & 
CSîül
::
EEvítBªak
) != 0);

33 
m_fCTS
 = ((
dwEvíts
 & 
CSîül
::
EEvítCTS
 ) != 0);

34 
m_fDSR
 = ((
dwEvíts
 & 
CSîül
::
EEvítDSR
 ) != 0);

35 
m_fEº‹
 = ((
dwEvíts
 & 
CSîül
::
EEvítEº‹
) != 0);

36 
m_fEvítCh¨
 = ((
dwEvíts
 & 
CSîül
::
EEvítRcvEv
) != 0);

37 
m_fRecv
 = ((
dwEvíts
 & 
CSîül
::
EEvítRecv
 ) != 0);

38 
m_fRög
 = ((
dwEvíts
 & 
CSîül
::
EEvítRög
 ) != 0);

39 
m_fRLSD
 = ((
dwEvíts
 & 
CSîül
::
EEvítRLSD
 ) != 0);

40 
m_fSíd
 = ((
dwEvíts
 & 
CSîül
::
EEvítSíd
 ) != 0);

43 
m_bEvítCh¨
 = 
m_pSîül
->
	`GëEvítCh¨
();

45 
	}
}

47 
	gCPageComEvíts
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

50 
CPr›îtyPage
::
	`DoD©aExch™ge
(
pDX
);

53 
	`DDX_Check
(
pDX
, 
IDC_EVENT_BREAK
, 
m_fBªak
);

54 
	`DDX_Check
(
pDX
, 
IDC_EVENT_CTS
, 
m_fCTS
);

55 
	`DDX_Check
(
pDX
, 
IDC_EVENT_DSR
, 
m_fDSR
);

56 
	`DDX_Check
(
pDX
, 
IDC_EVENT_ERROR
, 
m_fEº‹
);

57 
	`DDX_Check
(
pDX
, 
IDC_EVENT_RCV_EV
, 
m_fEvítCh¨
);

58 
	`DDX_Check
(
pDX
, 
IDC_EVENT_RECV
, 
m_fRecv
);

59 
	`DDX_Check
(
pDX
, 
IDC_EVENT_RING
, 
m_fRög
);

60 
	`DDX_Check
(
pDX
, 
IDC_EVENT_RLSD
, 
m_fRLSD
);

61 
	`DDX_Check
(
pDX
, 
IDC_EVENT_SEND
, 
m_fSíd
);

62 
	`DDX_Text
(
pDX
, 
IDC_EVENT_CHAR_VALUE
, 
m_bEvítCh¨
);

63 
	`DDV_MöMaxByã
(
pDX
, 
m_bEvítCh¨
, 0, 255);

65 
	}
}

67 
BOOL
 
	gCPageComEvíts
::
	$OnInôDülog
()

70 
CPr›îtyPage
::
	`OnInôDülog
();

73 
	`OnEvítRcvEv
();

74  
TRUE
;

75 
	}
}

77 
BOOL
 
	gCPageComEvíts
::
	$OnAµly
()

80 
	`Upd©eD©a
(
åue
);

83 
DWORD
 
dwEvíts
 = 0;

84 i‡(
m_fBªak
Ë
dwEvíts
 |
CSîül
::
EEvítBªak
;

85 i‡(
m_fCTS
Ë
dwEvíts
 |
CSîül
::
EEvítCTS
;

86 i‡(
m_fDSR
Ë
dwEvíts
 |
CSîül
::
EEvítDSR
;

87 i‡(
m_fEº‹
Ë
dwEvíts
 |
CSîül
::
EEvítEº‹
;

88 i‡(
m_fEvítCh¨
Ë
dwEvíts
 |
CSîül
::
EEvítRcvEv
;

89 i‡(
m_fRecv
Ë
dwEvíts
 |
CSîül
::
EEvítRecv
;

90 i‡(
m_fRög
Ë
dwEvíts
 |
CSîül
::
EEvítRög
;

91 i‡(
m_fRLSD
Ë
dwEvíts
 |
CSîül
::
EEvítRLSD
;

92 i‡(
m_fSíd
Ë
dwEvíts
 |
CSîül
::
EEvítSíd
;

95 i‡(
m_pSîül
->
	`SëMask
(
dwEvíts
))

96  
Ál£
;

99 i‡(
m_pSîül
->
	`SëEvítCh¨
(
m_bEvítCh¨
,
Ál£
))

100  
Ál£
;

103  
CPr›îtyPage
::
	`OnAµly
();

104 
	}
}

106 
	gCPageComEvíts
::
	$OnEvítRcvEv
()

109 
BOOL
 
fU£EvítCh¨
 = (
	`SídDlgIãmMesßge
(
IDC_EVENT_RCV_EV
,
BM_GETCHECK
Ë=
BST_CHECKED
);

112 
	`GëDlgIãm
(
IDC_EVENT_CHAR
)->
	`E«bÀWödow
(
fU£EvítCh¨
);

113 
	`GëDlgIãm
(
IDC_EVENT_CHAR_TEXT
)->
	`E«bÀWödow
(
fU£EvítCh¨
);

114 
	`GëDlgIãm
(
IDC_EVENT_CHAR_VALUE
)->
	`E«bÀWödow
(
fU£EvítCh¨
);

115 
	}
}

	@SerialTestMFC/PageComEvents.h

1 #i‚de‡
__PAGECOMEVENTS_H


2 
	#__PAGECOMEVENTS_H


	)

8 
	~"Resour˚.h
"

9 
	~"Sîül.h
"

15 ˛as†
	cCPageComEvíts
 : 
public
 
CPr›îtyPage


17 
public
:

19 
CPageComEvíts
(
CSîül
* 
pSîül
);

21 
	mpublic
:

23 
CSîül
* 
m_pSîül
;

25 
	mpublic
:

28 íum { 
IDD
 = 
IDD_COM_EVENTS
 };

29 
BOOL
 
	gm_fBªak
;

30 
BYTE
 
	gm_bEvítCh¨
;

31 
BOOL
 
	gm_fCTS
;

32 
BOOL
 
	gm_fDSR
;

33 
BOOL
 
	gm_fEº‹
;

34 
BOOL
 
	gm_fEvítCh¨
;

35 
BOOL
 
	gm_fRecv
;

36 
BOOL
 
	gm_fRög
;

37 
BOOL
 
	gm_fRLSD
;

38 
BOOL
 
	gm_fSíd
;

41 
	gpublic
:

46 
public
:

47 
vútuÆ
 
BOOL
 
OnAµly
();

48 
	g¥Ÿe˘ed
:

49 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

52 
	g¥Ÿe˘ed
:

56 
vútuÆ
 
BOOL
 
OnInôDülog
();

57 
afx_msg
 
OnEvítRcvEv
();

60 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/PageComSettings.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"PageComSëtögs.h
"

4 
	~"Sîül.h
"

6 #ifde‡
_DEBUG


7 
	#√w
 
DEBUG_NEW


	)

8 #unde‡
THIS_FILE


9 
	gTHIS_FILE
[] = 
__FILE__
;

16 
	$BEGIN_MESSAGE_MAP
(
CPageComSëtögs
, 
CPr›îtyPage
)

20 
	$END_MESSAGE_MAP
()

26 
CPageComSëtögs
::
	$CPageComSëtögs
(
CSîül
* 
pSîül
)

27 : 
	`CPr›îtyPage
(
CPageComSëtögs
::
IDD
)

28 , 
	$m_pSîül
(
pSîül
)

31 
CSîül
::
EBaudøã
 
eBaudøã
 = 
m_pSîül
->
	`GëBaudøã
();

32 
CSîül
::
ED©aBôs
 
eD©aBôs
 = 
m_pSîül
->
	`GëD©aBôs
();

33 
CSîül
::
EP¨ôy
 
eP¨ôy
 = 
m_pSîül
->
	`GëP¨ôy
();

34 
CSîül
::
ESt›Bôs
 
eSt›Bôs
 = 
m_pSîül
->
	`GëSt›Bôs
();

35 
CSîül
::
EH™dshake
 
eH™dshake
 = 
m_pSîül
->
	`GëH™dshakög
();

37 
eBaudøã
)

39 
CSîül
::
EBaud1200
: 
m_nBaudøãIndex
 = 0; ;

40 
CSîül
::
EBaud2400
: 
m_nBaudøãIndex
 = 1; ;

41 
CSîül
::
EBaud9600
: 
m_nBaudøãIndex
 = 2; ;

42 
CSîül
::
EBaud14400
: 
m_nBaudøãIndex
 = 3; ;

43 
CSîül
::
EBaud19200
: 
m_nBaudøãIndex
 = 4; ;

44 
CSîül
::
EBaud38400
: 
m_nBaudøãIndex
 = 5; ;

45 
CSîül
::
EBaud56000
: 
m_nBaudøãIndex
 = 6; ;

46 
CSîül
::
EBaud57600
: 
m_nBaudøãIndex
 = 7; ;

47 
CSîül
::
EBaud115200
: 
m_nBaudøãIndex
 = 8; ;

48 : 
m_nBaudøãIndex
 = 2; ;

51 
eD©aBôs
)

53 
CSîül
::
ED©a5
: 
m_nD©aIndex
 = 0; ;

54 
CSîül
::
ED©a6
: 
m_nD©aIndex
 = 1; ;

55 
CSîül
::
ED©a7
: 
m_nD©aIndex
 = 2; ;

56 
CSîül
::
ED©a8
: 
m_nD©aIndex
 = 3; ;

57 : 
m_nD©aIndex
 = 3; ;

60 
eP¨ôy
)

62 
CSîül
::
EP¨N⁄e
: 
m_nP¨ôyIndex
 = 0; ;

63 
CSîül
::
EP¨Odd
: 
m_nP¨ôyIndex
 = 1; ;

64 
CSîül
::
EP¨Eví
: 
m_nP¨ôyIndex
 = 2; ;

65 
CSîül
::
EP¨M¨k
: 
m_nP¨ôyIndex
 = 3; ;

66 
CSîül
::
EP¨S∑˚
: 
m_nP¨ôyIndex
 = 4; ;

67 : 
m_nP¨ôyIndex
 = 0; ;

70 
eSt›Bôs
)

72 
CSîül
::
ESt›1
: 
m_nSt›Index
 = 0; ;

73 
CSîül
::
ESt›1_5
: 
m_nSt›Index
 = 1; ;

74 
CSîül
::
ESt›2
: 
m_nSt›Index
 = 2; ;

75 : 
m_nSt›Index
 = 0; ;

78 
eH™dshake
)

80 
CSîül
::
EH™dshakeOff
: 
m_nH™dshakögIndex
 = 0; ;

81 
CSîül
::
EH™dshakeSo·w¨e
: 
m_nH™dshakögIndex
 = 1; ;

82 
CSîül
::
EH™dshakeH¨dw¨e
: 
m_nH™dshakögIndex
 = 2; ;

83 : 
m_nH™dshakögIndex
 = 2; ;

85 
	}
}

87 
	gCPageComSëtögs
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

89 
CPr›îtyPage
::
	`DoD©aExch™ge
(
pDX
);

91 
	`DDX_Radio
(
pDX
, 
IDC_BAUDRATE_1200
, 
m_nBaudøãIndex
);

92 
	`DDX_Radio
(
pDX
, 
IDC_DATA_5
, 
m_nD©aIndex
);

93 
	`DDX_Radio
(
pDX
, 
IDC_HANDSHAKING_OFF
, 
m_nH™dshakögIndex
);

94 
	`DDX_Radio
(
pDX
, 
IDC_PARITY_NONE
, 
m_nP¨ôyIndex
);

95 
	`DDX_Radio
(
pDX
, 
IDC_STOP_1
, 
m_nSt›Index
);

97 
	}
}

99 
BOOL
 
	gCPageComSëtögs
::
	$OnAµly
()

102 
	`Upd©eD©a
(
åue
);

105 
CSîül
::
EBaudøã
 
eBaudøã
 = CSîül::
EBaudUnknown
;

106 
m_nBaudøãIndex
)

108 0: 
eBaudøã
 = 
CSîül
::
EBaud1200
; ;

109 1: 
eBaudøã
 = 
CSîül
::
EBaud2400
; ;

110 2: 
eBaudøã
 = 
CSîül
::
EBaud9600
; ;

111 3: 
eBaudøã
 = 
CSîül
::
EBaud14400
; ;

112 4: 
eBaudøã
 = 
CSîül
::
EBaud19200
; ;

113 5: 
eBaudøã
 = 
CSîül
::
EBaud38400
; ;

114 6: 
eBaudøã
 = 
CSîül
::
EBaud56000
; ;

115 7: 
eBaudøã
 = 
CSîül
::
EBaud57600
; ;

116 8: 
eBaudøã
 = 
CSîül
::
EBaud115200
; ;

117 : 
	`ASSERT
(
Ál£
); ;

120 
CSîül
::
ED©aBôs
 
eD©aBôs
 = CSîül::
ED©aUnknown
;

121 
m_nD©aIndex
)

123 0: 
eD©aBôs
 = 
CSîül
::
ED©a5
; ;

124 1: 
eD©aBôs
 = 
CSîül
::
ED©a6
; ;

125 2: 
eD©aBôs
 = 
CSîül
::
ED©a7
; ;

126 3: 
eD©aBôs
 = 
CSîül
::
ED©a8
; ;

129 
CSîül
::
EP¨ôy
 
eP¨ôy
 = CSîül::
EP¨Unknown
;

130 
m_nP¨ôyIndex
)

132 0: 
eP¨ôy
 = 
CSîül
::
EP¨N⁄e
; ;

133 1: 
eP¨ôy
 = 
CSîül
::
EP¨Odd
; ;

134 2: 
eP¨ôy
 = 
CSîül
::
EP¨Eví
; ;

135 3: 
eP¨ôy
 = 
CSîül
::
EP¨M¨k
; ;

136 4: 
eP¨ôy
 = 
CSîül
::
EP¨S∑˚
; ;

137 : 
	`ASSERT
(
Ál£
); ;

140 
CSîül
::
ESt›Bôs
 
eSt›Bôs
 = CSîül::
ESt›Unknown
;

141 
m_nSt›Index
)

143 0: 
eSt›Bôs
 = 
CSîül
::
ESt›1
; ;

144 1: 
eSt›Bôs
 = 
CSîül
::
ESt›1_5
; ;

145 2: 
eSt›Bôs
 = 
CSîül
::
ESt›2
; ;

146 : 
	`ASSERT
(
Ál£
); ;

149 
CSîül
::
EH™dshake
 
eH™dshake
 = CSîül::
EH™dshakeUnknown
;

150 
m_nH™dshakögIndex
)

152 0: 
eH™dshake
 = 
CSîül
::
EH™dshakeOff
; ;

153 1: 
eH™dshake
 = 
CSîül
::
EH™dshakeSo·w¨e
; ;

154 2: 
eH™dshake
 = 
CSîül
::
EH™dshakeH¨dw¨e
; ;

155 : 
	`ASSERT
(
Ál£
); ;

159 i‡(
m_pSîül
->
	`Sëup
(
eBaudøã
,
eD©aBôs
,
eP¨ôy
,
eSt›Bôs
))

160  
Ál£
;

163 i‡(
m_pSîül
->
	`SëupH™dshakög
(
eH™dshake
))

164  
Ál£
;

167  
CPr›îtyPage
::
	`OnAµly
();

168 
	}
}

	@SerialTestMFC/PageComSettings.h

1 #i‚de‡
__PAGECOMSETTINGS_H


2 
	#__PAGECOMSETTINGS_H


	)

8 
	~"Resour˚.h
"

9 
	~"Sîül.h
"

15 ˛as†
	cCPageComSëtögs
 : 
public
 
CPr›îtyPage


17 
public
:

19 
CPageComSëtögs
(
CSîül
* 
pSîül
);

21 
	mpublic
:

23 
CSîül
* 
m_pSîül
;

25 
	mpublic
:

28 íum { 
IDD
 = 
IDD_COM_SETTINGS
 };

29 
	gm_nBaudøãIndex
;

30 
	gm_nD©aIndex
;

31 
	gm_nH™dshakögIndex
;

32 
	gm_nP¨ôyIndex
;

33 
	gm_nP‹tIndex
;

34 
	gm_nSt›Index
;

37 
	gpublic
:

42 
public
:

43 
vútuÆ
 
BOOL
 
OnAµly
();

44 
	g¥Ÿe˘ed
:

45 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

48 
	g¥Ÿe˘ed
:

55 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/Resource.h

5 
	#IDCANCEL2
 3

	)

6 
	#IDC_ABORT
 3

	)

7 
	#IDD_ABOUTBOX
 100

	)

8 
	#IDR_MAINFRAME
 128

	)

9 
	#IDR_SERIALTYPE
 129

	)

10 
	#IDD_COM_SETTINGS
 130

	)

11 
	#IDD_COM_EVENTS
 131

	)

12 
	#IDD_COM_SELECT
 132

	)

13 
	#IDD_DIALOG1
 133

	)

14 
	#IDD_ASSERTION
 133

	)

15 
	#IDC_BAUDRATE
 1000

	)

16 
	#IDC_BAUDRATE_1200
 1001

	)

17 
	#IDC_BAUDRATE_2400
 1002

	)

18 
	#IDC_BAUDRATE_9600
 1003

	)

19 
	#IDC_BAUDRATE_14400
 1004

	)

20 
	#IDC_BAUDRATE_19200
 1005

	)

21 
	#IDC_BAUDRATE_38400
 1006

	)

22 
	#IDC_BAUDRATE_56000
 1007

	)

23 
	#IDC_BAUDRATE_57600
 1008

	)

24 
	#IDC_BAUDRATE_115200
 1009

	)

25 
	#IDC_DATA
 1010

	)

26 
	#IDC_DATA_5
 1011

	)

27 
	#IDC_DATA_6
 1012

	)

28 
	#IDC_DATA_7
 1013

	)

29 
	#IDC_DATA_8
 1014

	)

30 
	#IDC_PARITY
 1020

	)

31 
	#IDC_PARITY_NONE
 1021

	)

32 
	#IDC_PARITY_ODD
 1022

	)

33 
	#IDC_PARITY_EVEN
 1023

	)

34 
	#IDC_PARITY_MARK
 1024

	)

35 
	#IDC_PARITY_SPACE
 1025

	)

36 
	#IDC_STOP
 1030

	)

37 
	#IDC_STOP_1
 1031

	)

38 
	#IDC_STOP_15
 1032

	)

39 
	#IDC_STOP_2
 1033

	)

40 
	#IDC_HANDSHAKING
 1040

	)

41 
	#IDC_HANDSHAKING_OFF
 1041

	)

42 
	#IDC_HANDSHAKING_SOFTWARE
 1042

	)

43 
	#IDC_HANDSHAKING_HARDWARE
 1043

	)

44 
	#IDC_PORT
 1050

	)

45 
	#IDC_PORT_COM1
 1051

	)

46 
	#IDC_PORT_COM2
 1052

	)

47 
	#IDC_PORT_COM3
 1053

	)

48 
	#IDC_PORT_COM4
 1054

	)

49 
	#IDC_EVENTS
 1100

	)

50 
	#IDC_EVENT_BREAK
 1101

	)

51 
	#IDC_EVENT_CTS
 1102

	)

52 
	#IDC_EVENT_DSR
 1103

	)

53 
	#IDC_EVENT_ERROR
 1104

	)

54 
	#IDC_EVENT_RING
 1105

	)

55 
	#IDC_EVENT_RLSD
 1106

	)

56 
	#IDC_EVENT_RECV
 1107

	)

57 
	#IDC_EVENT_RCV_EV
 1108

	)

58 
	#IDC_EVENT_SEND
 1109

	)

59 
	#IDC_EVENT_CHAR
 1110

	)

60 
	#IDC_EVENT_CHAR_TEXT
 1111

	)

61 
	#IDC_EVENT_CHAR_VALUE
 1112

	)

62 
	#IDC_COM1
 1200

	)

63 
	#IDC_COM2
 1201

	)

64 
	#IDC_COM3
 1202

	)

65 
	#IDC_COM4
 1203

	)

66 
	#IDC_EDIT1
 1301

	)

67 
	#IDC_EXPRESSION
 1301

	)

68 
	#IDC_EDIT2
 1302

	)

69 
	#IDC_LOCATION
 1302

	)

70 
	#IDC_EDIT3
 1303

	)

71 
	#IDC_PROCESS
 1303

	)

72 
	#IDC_EDIT4
 1304

	)

73 
	#IDC_TIMESTAMP
 1304

	)

74 
	#IDC_EDIT5
 1305

	)

75 
	#IDC_STACKTRACE
 1305

	)

76 
	#IDC_EDIT6
 1306

	)

77 
	#IDC_STACKDUMP
 1306

	)

78 
	#IDC_IGNORE
 1307

	)

79 
	#IDC_DEBUG
 1308

	)

80 
	#IDI_ABOUT_ICON
 1309

	)

81 
	#IDC_ABOUT_TITLE
 1310

	)

82 
	#IDC_ABOUT_COPYRIGHT
 1311

	)

83 
	#ID_COM_OPEN
 32771

	)

84 
	#ID_COM_CLOSE
 32772

	)

85 
	#ID_COM_SETTINGS
 32773

	)

86 
	#ID_DATA_SEND
 32774

	)

87 
	#ID_COMMANDS_SENDFILE
 32775

	)

88 
	#ID_COMMANDS_SENDBREAK
 32776

	)

92 #ifde‡
APSTUDIO_INVOKED


93 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


94 
	#_APS_3D_CONTROLS
 1

	)

95 
	#_APS_NEXT_RESOURCE_VALUE
 134

	)

96 
	#_APS_NEXT_COMMAND_VALUE
 32777

	)

97 
	#_APS_NEXT_CONTROL_VALUE
 1312

	)

98 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@SerialTestMFC/RichCommEdit.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"RichCommEdô.h
"

5 #ifde‡
_DEBUG


6 
	#√w
 
DEBUG_NEW


	)

7 #unde‡
THIS_FILE


8 
	gTHIS_FILE
[] = 
__FILE__
;

15 
	$BEGIN_MESSAGE_MAP
(
CRichCommEdô
, 
CRichEdôCål
)

17 
	$ON_WM_CHAR
()

19 
	$END_MESSAGE_MAP
()

25 
CRichCommEdô
::
	$CRichCommEdô
()

26 : 
	`m_pSîül
(0)

27 , 
	$m_fEcho
(
Ál£
)

29 
	}
}

31 
	gCRichCommEdô
::~
	$CRichCommEdô
()

33 
	}
}

35 
CRichCommEdô
::
	$OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
)

38 i‡(
m_pSîül
 && m_pSîül->
	`IsO≥n
())

40 
ch
 = 
°©ic_ˇ°
<>(
nCh¨
);

41 
m_pSîül
->
	`Wrôe
(&
ch
,1);

45 i‡(
m_fEcho
)

47 
CRichEdôCål
::
	`OnCh¨
(
nCh¨
, 
nRïC¡
, 
nFœgs
);

49 
	}
}

	@SerialTestMFC/RichCommEdit.h

1 #i‚de‡
__RICHCOMMEDIT_H


2 
	#__RICHCOMMEDIT_H


	)

8 
	~"Sîül.h
"

14 ˛as†
	cCRichCommEdô
 : 
public
 
CRichEdôCål


16 
public
:

18 
CRichCommEdô
();

19 
	mvútuÆ
 ~
CRichCommEdô
();

21 
	mpublic
:

23 
CSîül
* 
m_pSîül
;

24 
boﬁ
 
	mm_fEcho
;

26 
	mpublic
:

33 
¥Ÿe˘ed
:

37 
afx_msg
 
OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

40 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/SerialTestMFC.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"MaöFrm.h
"

4 
	~"ChûdFrm.h
"

5 
	~"AboutDlg.h
"

7 #ifde‡
_DEBUG


8 
	#√w
 
DEBUG_NEW


	)

9 #unde‡
THIS_FILE


10 
	gTHIS_FILE
[] = 
__FILE__
;

17 
CTe°Aµ
 
	gtheAµ
;

23 
	$BEGIN_MESSAGE_MAP
(
CTe°Aµ
, 
CWöAµ
)

25 
	$ON_COMMAND
(
ID_APP_ABOUT
, 
OnAµAbout
)

26 
	$ON_COMMAND
(
ID_COM_OPEN
, 
OnComO≥n
)

28 
	$END_MESSAGE_MAP
()

34 
CTe°Aµ
::
	$CTe°Aµ
()

36 
	}
}

38 
CTe°Aµ
::~
	$CTe°Aµ
()

40 
	}
}

42 
BOOL
 
CTe°Aµ
::
	$InôIn°™˚
()

48 #i‡
_MFC_VER
 < 0x0700

49 #ifde‡
_AFXDLL


50 
	`E«bÀ3dC⁄åﬁs
();

52 
	`E«bÀ3dC⁄åﬁsSètic
();

58 
CMDIFømeWnd
* 
pFøme
 = 
√w
 
CMaöFøme
;

59 
m_pMaöWnd
 = 
pFøme
;

62 i‡(!
pFøme
->
	`LﬂdFøme
(
IDR_MAINFRAME
))

63  
FALSE
;

66 
HINSTANCE
 
hIn°
 = 
	`AfxGëResour˚H™dÀ
();

67 
m_hMDIMíu
 = ::
	`LﬂdMíu
(
hIn°
, 
	`MAKEINTRESOURCE
(
IDR_SERIALTYPE
));

68 
m_hMDIAc˚l
 = ::
	`LﬂdAc˚Àøt‹s
(
hIn°
, 
	`MAKEINTRESOURCE
(
IDR_SERIALTYPE
));

71 
pFøme
->
	`ShowWödow
(
m_nCmdShow
);

72 
pFøme
->
	`Upd©eWödow
();

74  
TRUE
;

75 
	}
}

77 
	gCTe°Aµ
::
	$ExôIn°™˚
()

79 i‡(
m_hMDIMíu
)

80 
	`FªeResour˚
(
m_hMDIMíu
);

82 i‡(
m_hMDIAc˚l
)

83 
	`FªeResour˚
(
m_hMDIAc˚l
);

85  
CWöAµ
::
	`ExôIn°™˚
();

86 
	}
}

88 
	gCTe°Aµ
::
	$OnComO≥n
()

90 
CMaöFøme
* 
pFøme
 = 
	`STATIC_DOWNCAST
(CMaöFøme,
m_pMaöWnd
);

93 
pFøme
->
	`Cª©eNewChûd
(
	`RUNTIME_CLASS
(
CChûdFøme
), 
IDR_SERIALTYPE
, 
m_hMDIMíu
, 
m_hMDIAc˚l
);

94 
	}
}

96 
	gCTe°Aµ
::
	$OnAµAbout
()

98 
CAboutDlg
 
aboutDlg
;

99 
aboutDlg
.
	`DoModÆ
();

100 
	}
}

	@SerialTestMFC/SerialTestMFC.h

1 #i‚de‡
__SERIALTESTMFC_H


2 
	#__SERIALTESTMFC_H


	)

8 
	~"Resour˚.h
"

14 ˛as†
	cCTe°Aµ
 : 
public
 
CWöAµ


16 
public
:

18 
CTe°Aµ
();

19 
	mvútuÆ
 ~
CTe°Aµ
();

21 
	mpublic
:

23 
HMENU
 
m_hMDIMíu
;

24 
HACCEL
 
	mm_hMDIAc˚l
;

26 
	mpublic
:

31 
public
:

32 
vútuÆ
 
BOOL
 
InôIn°™˚
();

33 
vútuÆ
 
ExôIn°™˚
();

36 
	m¥Ÿe˘ed
:

40 
afx_msg
 
OnAµAbout
();

41 
afx_msg
 
OnComO≥n
();

44 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/SheetSettings.cpp

1 
	~"StdAfx.h
"

2 
	~"SîülTe°MFC.h
"

3 
	~"ShìtSëtögs.h
"

5 #ifde‡
_DEBUG


6 
	#√w
 
DEBUG_NEW


	)

7 #unde‡
THIS_FILE


8 
	gTHIS_FILE
[] = 
__FILE__
;

15 
	$BEGIN_MESSAGE_MAP
(
CShìtSëtögs
, 
CPr›îtyShìt
)

18 
	$END_MESSAGE_MAP
()

24 
CShìtSëtögs
::
	$CShìtSëtögs
(
CSîül
* 
pSîül
, 
CWnd
* 
pP¨ítWnd
, 
UINT
 
iSñe˘Page
)

25 : 
	`CPr›îtyShìt
(
	`_T
("COM Sëtögs"), 
pP¨ítWnd
, 
iSñe˘Page
)

26 , 
	`m_∑geSëtögs
(
pSîül
)

27 , 
	$m_∑geEvíts
(
pSîül
)

30 
m_psh
.
dwFœgs
 |
PSH_NOAPPLYNOW
;

33 
	`AddPage
(&
m_∑geSëtögs
);

34 
	`AddPage
(&
m_∑geEvíts
);

35 
	}
}

37 
	gCShìtSëtögs
::~
	$CShìtSëtögs
()

39 
	}
}

	@SerialTestMFC/SheetSettings.h

1 #i‚de‡
__SHEETSETTINGS_H


2 
	#__SHEETSETTINGS_H


	)

8 
	~"Resour˚.h
"

9 
	~"Sîül.h
"

10 
	~"PageComSëtögs.h
"

11 
	~"PageComEvíts.h
"

17 ˛as†
	cCShìtSëtögs
 : 
public
 
CPr›îtyShìt


19 
public
:

21 
CShìtSëtögs
(
CSîül
* 
pSîül
, 
CWnd
* 
pP¨ítWnd
 = 0, 
UINT
 
iSñe˘Page
 = 0);

22 
	mvútuÆ
 ~
CShìtSëtögs
();

24 
	mpublic
:

26 
CPageComSëtögs
 
m_∑geSëtögs
;

27 
CPageComEvíts
 
	mm_∑geEvíts
;

29 
	mpublic
:

36 
¥Ÿe˘ed
:

42 
DECLARE_MESSAGE_MAP
()

	@SerialTestMFC/StdAfx.cpp

1 
	~"StdAfx.h
"

	@SerialTestMFC/StdAfx.h

1 #i‚de‡
__STDAFX_H


2 
	#__STDAFX_H


	)

6 #i‚de‡
WINVER


7 
	#WINVER
 0x0400

	)

12 
	#VC_EXTRALEAN


	)

16 
	~<afxwö.h
>

17 
	~<afxext.h
>

18 
	~<afxcmn.h
>

25 #¥agm®
w¨nög
(
dißbÀ
: 4711)

	@/usr/include/malloc.h

3 #i‚de‡
_INCLUDE_MALLOC_H_


4 
	#_INCLUDE_MALLOC_H_


	)

6 
	~<_™si.h
>

7 
	~<sys/ªít.h
>

9 
	#__√ed_size_t


	)

10 
	~<°ddef.h
>

13 
	~<machöe/mÆloc.h
>

15 #ifde‡
__˝lu•lus


22 
	smÆlöfo
 {

23 
size_t
 
¨ía
;

24 
size_t
 
‹dblks
;

25 
size_t
 
smblks
;

26 
size_t
 
hblks
;

27 
size_t
 
hblkhd
;

28 
size_t
 
usmblks
;

29 
size_t
 
fsmblks
;

30 
size_t
 
u‹dblks
;

31 
size_t
 
f‹dblks
;

32 
size_t
 
kìpco°
;

37 
_PTR
 
mÆloc
 
_PARAMS
 ((
size_t
));

38 #ifde‡
__CYGWIN__


39 #unde‡
_mÆloc_r


40 
	#_mÆloc_r
(
r
, 
s
Ë
	`mÆloc
 (s)

	)

42 
_PTR
 
_mÆloc_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
));

45 
_VOID
 
‰ì
 
_PARAMS
 ((
_PTR
));

46 #ifde‡
__CYGWIN__


47 #unde‡
_‰ì_r


48 
	#_‰ì_r
(
r
, 
p
Ë
	`‰ì
 (p)

	)

50 
_VOID
 
_‰ì_r
 
_PARAMS
 ((
_ªít
 *, 
_PTR
));

53 
_PTR
 
ªÆloc
 
_PARAMS
 ((_PTR, 
size_t
));

54 #ifde‡
__CYGWIN__


55 #unde‡
_ªÆloc_r


56 
	#_ªÆloc_r
(
r
, 
p
, 
s
Ë
	`ªÆloc
 (p, s)

	)

58 
_PTR
 
_ªÆloc_r
 
_PARAMS
 ((
_ªít
 *, _PTR, 
size_t
));

61 
_PTR
 
ˇŒoc
 
_PARAMS
 ((
size_t
, size_t));

62 #ifde‡
__CYGWIN__


63 #unde‡
_ˇŒoc_r


64 
	#_ˇŒoc_r
(
r
, 
s1
, 
s2
Ë
	`ˇŒoc
 (s1, s2);

	)

66 
_PTR
 
_ˇŒoc_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
, size_t));

69 
_PTR
 
memÆign
 
_PARAMS
 ((
size_t
, size_t));

70 #ifde‡
__CYGWIN__


71 #unde‡
_memÆign_r


72 
	#_memÆign_r
(
r
, 
s1
, 
s2
Ë
	`memÆign
 (s1, s2);

	)

74 
_PTR
 
_memÆign_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
, size_t));

77 
mÆlöfo
 mÆlöfÿ
_PARAMS
 (());

78 #ifde‡
__CYGWIN__


79 #unde‡
_mÆlöfo_r


80 
	#_mÆlöfo_r
(
r
Ë
	`mÆlöfo
 ()

	)

82 
mÆlöfo
 
_mÆlöfo_r
 
_PARAMS
 ((
_ªít
 *));

85 
mÆloc_°©s
 
_PARAMS
 (());

86 #ifde‡
__CYGWIN__


87 #unde‡
_mÆloc_°©s_r


88 
	#_mÆloc_°©s_r
(
r
Ë
	`mÆloc_°©s
 ()

	)

90 
_mÆloc_°©s_r
 
_PARAMS
 ((
_ªít
 *));

93 
mÆl›t
 
_PARAMS
 ((, ));

94 #ifde‡
__CYGWIN__


95 #unde‡
_mÆl›t_r


96 
	#_mÆl›t_r
(
i1
, 
i2
Ë
	`mÆl›t
 (i1, i2)

	)

98 
_mÆl›t_r
 
_PARAMS
 ((
_ªít
 *, , ));

101 
size_t
 
mÆloc_ußbÀ_size
 
_PARAMS
 ((
_PTR
));

102 #ifde‡
__CYGWIN__


103 #unde‡
_mÆloc_ußbÀ_size_r


104 
	#_mÆloc_ußbÀ_size_r
(
r
, 
p
Ë
	`mÆloc_ußbÀ_size
 (p)

	)

106 
size_t
 
_mÆloc_ußbÀ_size_r
 
_PARAMS
 ((
_ªít
 *, 
_PTR
));

112 
_PTR
 
vÆloc
 
_PARAMS
 ((
size_t
));

113 #ifde‡
__CYGWIN__


114 #unde‡
_vÆloc_r


115 
	#_vÆloc_r
(
r
, 
s
Ë
	`vÆloc
 (s)

	)

117 
_PTR
 
_vÆloc_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
));

120 
_PTR
 
pvÆloc
 
_PARAMS
 ((
size_t
));

121 #ifde‡
__CYGWIN__


122 #unde‡
_pvÆloc_r


123 
	#_pvÆloc_r
(
r
, 
s
Ë
	`pvÆloc
 (s)

	)

125 
_PTR
 
_pvÆloc_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
));

128 
mÆloc_åim
 
_PARAMS
 ((
size_t
));

129 #ifde‡
__CYGWIN__


130 #unde‡
_mÆloc_åim_r


131 
	#_mÆloc_åim_r
(
r
, 
s
Ë
	`mÆloc_åim
 (s)

	)

133 
_mÆloc_åim_r
 
_PARAMS
 ((
_ªít
 *, 
size_t
));

138 
_VOID
 
m°©s
 
_PARAMS
 ((*));

139 #ifde‡
__CYGWIN__


140 #unde‡
_m°©s_r


141 
	#_m°©s_r
(
r
, 
p
Ë
	`m°©s
 (p)

	)

143 
_VOID
 
_m°©s_r
 
_PARAMS
 ((
_ªít
 *, *));

148 
	#M_MXFAST
 1

	)

149 
	#M_NLBLKS
 2

	)

150 
	#M_GRAIN
 3

	)

151 
	#M_KEEP
 4

	)

155 
	#M_TRIM_THRESHOLD
 -1

	)

156 
	#M_TOP_PAD
 -2

	)

157 
	#M_MMAP_THRESHOLD
 -3

	)

158 
	#M_MMAP_MAX
 -4

	)

160 #i‚de‡
__CYGWIN__


162 
c‰ì
 
_PARAMS
 ((
_PTR
));

165 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

26 #i‚de‡
_STDIO_H_


27 
	#_STDIO_H_


	)

29 
	~"_™si.h
"

31 
	#_FSTDIO


	)

33 
	#__√ed_size_t


	)

34 
	#__√ed_NULL


	)

35 
	~<°ddef.h
>

37 
	#__√ed___va_li°


	)

38 
	~<°d¨g.h
>

46 
	~<sys/ªít.h
>

47 
	~<sys/ty≥s.h
>

49 
_BEGIN_STD_C


51 
__FILE
 
	tFILE
;

53 #ifde‡
__CYGWIN__


54 
_Âos64_t
 
	tÂos_t
;

56 
_Âos_t
 
	tÂos_t
;

57 #ifde‡
__LARGE64_FILES


58 
_Âos64_t
 
	tÂos64_t
;

62 
	~<sys/°dio.h
>

64 
	#__SLBF
 0x0001

	)

65 
	#__SNBF
 0x0002

	)

66 
	#__SRD
 0x0004

	)

67 
	#__SWR
 0x0008

	)

69 
	#__SRW
 0x0010

	)

70 
	#__SEOF
 0x0020

	)

71 
	#__SERR
 0x0040

	)

72 
	#__SMBF
 0x0080

	)

73 
	#__SAPP
 0x0100

	)

74 
	#__SSTR
 0x0200

	)

75 
	#__SOPT
 0x0400

	)

76 
	#__SNPT
 0x0800

	)

77 
	#__SOFF
 0x1000

	)

78 
	#__SORD
 0x2000

	)

79 #i‡
deföed
(
__CYGWIN__
)

80 
	#__SCLE
 0x4000

	)

82 
	#__SL64
 0x8000

	)

85 
	#__SWID
 0x2000

	)

96 
	#_IOFBF
 0

	)

97 
	#_IOLBF
 1

	)

98 
	#_IONBF
 2

	)

100 
	#EOF
 (-1)

	)

102 #ifde‡
__BUFSIZ__


103 
	#BUFSIZ
 
__BUFSIZ__


	)

105 
	#BUFSIZ
 1024

	)

108 #ifde‡
__FOPEN_MAX__


109 
	#FOPEN_MAX
 
__FOPEN_MAX__


	)

111 
	#FOPEN_MAX
 20

	)

114 #ifde‡
__FILENAME_MAX__


115 
	#FILENAME_MAX
 
__FILENAME_MAX__


	)

117 
	#FILENAME_MAX
 1024

	)

120 #ifde‡
__L_tm≤am__


121 
	#L_tm≤am
 
__L_tm≤am__


	)

123 
	#L_tm≤am
 
FILENAME_MAX


	)

126 #i‚de‡
__STRICT_ANSI__


127 
	#P_tmpdú
 "/tmp"

	)

130 #i‚de‡
SEEK_SET


131 
	#SEEK_SET
 0

	)

133 #i‚de‡
SEEK_CUR


134 
	#SEEK_CUR
 1

	)

136 #i‚de‡
SEEK_END


137 
	#SEEK_END
 2

	)

140 
	#TMP_MAX
 26

	)

142 
	#°dö
 (
_REENT
->
_°dö
)

	)

143 
	#°dout
 (
_REENT
->
_°dout
)

	)

144 
	#°dîr
 (
_REENT
->
_°dîr
)

	)

146 
	#_°dö_r
(
x
Ë((x)->
_°dö
)

	)

147 
	#_°dout_r
(
x
Ë((x)->
_°dout
)

	)

148 
	#_°dîr_r
(
x
Ë((x)->
_°dîr
)

	)

154 #i‚de‡
__VALIST


155 #ifde‡
__GNUC__


156 
	#__VALIST
 
__gnuc_va_li°


	)

158 
	#__VALIST
 *

	)

162 
FILE
 * 
_EXFUN
(
tmpfûe
, ());

163 * 
_EXFUN
(
tm≤am
, (*));

164 
_EXFUN
(
f˛o£
, (
FILE
 *));

165 
_EXFUN
(
fÊush
, (
FILE
 *));

166 
FILE
 * 
_EXFUN
(
‰e›í
, (const *, const *, FILE *));

167 
_EXFUN
(
£tbuf
, (
FILE
 *, *));

168 
_EXFUN
(
£tvbuf
, (
FILE
 *, *, , 
size_t
));

169 
_EXFUN
(
Ârötf
, (
FILE
 *, const *, ...)

170 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

171 
_EXFUN
(
fsˇnf
, (
FILE
 *, const *, ...)

172 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

173 
_EXFUN
(
¥ötf
, (const *, ...)

174 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 1, 2))));

175 
_EXFUN
(
sˇnf
, (const *, ...)

176 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 1, 2))));

177 
_EXFUN
(
ssˇnf
, (const *, const *, ...)

178 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

179 
_EXFUN
(
vÂrötf
, (
FILE
 *, c⁄° *, 
__VALIST
)

180 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

181 
_EXFUN
(
v¥ötf
, (c⁄° *, 
__VALIST
)

182 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 1, 0))));

183 
_EXFUN
(
v•rötf
, (*, c⁄° *, 
__VALIST
)

184 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

185 
_EXFUN
(
fgëc
, (
FILE
 *));

186 * 
_EXFUN
(
fgës
, (*, , 
FILE
 *));

187 
_EXFUN
(
Âutc
, (, 
FILE
 *));

188 
_EXFUN
(
Âuts
, (c⁄° *, 
FILE
 *));

189 
_EXFUN
(
gëc
, (
FILE
 *));

190 
_EXFUN
(
gëch¨
, ());

191 * 
_EXFUN
(
gës
, (*));

192 
_EXFUN
(
putc
, (, 
FILE
 *));

193 
_EXFUN
(
putch¨
, ());

194 
_EXFUN
(
puts
, (const *));

195 
_EXFUN
(
ungëc
, (, 
FILE
 *));

196 
size_t
 
_EXFUN
(
‰ód
, (
_PTR
, size_à
_size
, size_à
_n
, 
FILE
 *));

197 
size_t
 
_EXFUN
(
fwrôe
, (c⁄° 
_PTR
 , size_à
_size
, size_à
_n
, 
FILE
 *));

198 #ifde‡
_COMPILING_NEWLIB


199 
_EXFUN
(
fgëpos
, (
FILE
 *, 
_Âos_t
 *));

201 
_EXFUN
(
fgëpos
, (
FILE
 *, 
Âos_t
 *));

203 
_EXFUN
(
f£ek
, (
FILE
 *, , ));

204 #ifde‡
_COMPILING_NEWLIB


205 
_EXFUN
(
f£ços
, (
FILE
 *, c⁄° 
_Âos_t
 *));

207 
_EXFUN
(
f£ços
, (
FILE
 *, c⁄° 
Âos_t
 *));

209 
_EXFUN
(
·ñl
, ( 
FILE
 *));

210 
_EXFUN
(
ªwöd
, (
FILE
 *));

211 
_EXFUN
(
˛óªº
, (
FILE
 *));

212 
_EXFUN
(
„of
, (
FILE
 *));

213 
_EXFUN
(
„º‹
, (
FILE
 *));

214 
_EXFUN
(
≥º‹
, (const *));

215 #i‚de‡
_REENT_ONLY


216 
FILE
 * 
_EXFUN
(
f›í
, (c⁄° *
_«me
, c⁄° *
_ty≥
));

217 
_EXFUN
(
•rötf
, (*, const *, ...)

218 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

219 
_EXFUN
(
ªmove
, (const *));

220 
_EXFUN
(
ª«me
, (const *, const *));

221 #ifde‡
_COMPILING_NEWLIB


222 
_EXFUN
(
_ª«me
, (const *, const *));

225 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__USE_XOPEN2K
)

226 #ifde‡
_COMPILING_NEWLIB


227 
_EXFUN
(
f£eko
, (
FILE
 *, 
_off_t
, ));

228 
_off_t
 
_EXFUN
(
·ñlo
, ( 
FILE
 *));

230 
_EXFUN
(
f£eko
, (
FILE
 *, 
off_t
, ));

231 
off_t
 
_EXFUN
(
·ñlo
, ( 
FILE
 *));

234 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| (
__STDC_VERSION__
 >= 199901L)

235 #i‚de‡
_REENT_ONLY


236 
_EXFUN
(
asùrötf
, (**, const *, ...)

237 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

238 * 
_EXFUN
(
a¢ùrötf
, (*, 
size_t
 *, const *, ...)

239 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

240 * 
_EXFUN
(
a¢¥ötf
, (*, 
size_t
 *, const *, ...)

241 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

242 
_EXFUN
(
a•rötf
, (**, const *, ...)

243 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

244 #i‚de‡
dùrötf


245 
_EXFUN
(
dùrötf
, (, const *, ...)

246 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

248 
_EXFUN
(
f˛o£Æl
, (
_VOID
));

249 
_EXFUN
(
fùrötf
, (
FILE
 *, const *, ...)

250 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

251 
_EXFUN
(
fisˇnf
, (
FILE
 *, const *, ...)

252 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

253 
_EXFUN
(
ùrötf
, (const *, ...)

254 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 1, 2))));

255 
_EXFUN
(
isˇnf
, (const *, ...)

256 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 1, 2))));

257 
_EXFUN
(
sùrötf
, (*, const *, ...)

258 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

259 
_EXFUN
(
sisˇnf
, (const *, const *, ...)

260 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

261 
_EXFUN
(
¢¥ötf
, (*, 
size_t
, const *, ...)

262 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

263 
_EXFUN
(
¢ùrötf
, (*, 
size_t
, const *, ...)

264 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

265 * 
_EXFUN
(
ãm≤am
, (const *, const *));

266 
_EXFUN
(
vasùrötf
, (**, c⁄° *, 
__VALIST
)

267 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

268 * 
_EXFUN
(
va¢ùrötf
, (*, 
size_t
 *, c⁄° *, 
__VALIST
)

269 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

270 * 
_EXFUN
(
va¢¥ötf
, (*, 
size_t
 *, c⁄° *, 
__VALIST
)

271 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

272 
_EXFUN
(
va•rötf
, (**, c⁄° *, 
__VALIST
)

273 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

274 
_EXFUN
(
vdùrötf
, (, c⁄° *, 
__VALIST
)

275 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

276 
_EXFUN
(
vfùrötf
, (
FILE
 *, c⁄° *, 
__VALIST
)

277 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

278 
_EXFUN
(
vfisˇnf
, (
FILE
 *, c⁄° *, 
__VALIST
)

279 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

280 
_EXFUN
(
vfsˇnf
, (
FILE
 *, c⁄° *, 
__VALIST
)

281 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

282 
_EXFUN
(
vùrötf
, (c⁄° *, 
__VALIST
)

283 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 1, 0))));

284 
_EXFUN
(
visˇnf
, (c⁄° *, 
__VALIST
)

285 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 1, 0))));

286 
_EXFUN
(
vsˇnf
, (c⁄° *, 
__VALIST
)

287 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 1, 0))));

288 
_EXFUN
(
vsùrötf
, (*, c⁄° *, 
__VALIST
)

289 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

290 
_EXFUN
(
vsisˇnf
, (c⁄° *, c⁄° *, 
__VALIST
)

291 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

292 
_EXFUN
(
v¢ùrötf
, (*, 
size_t
, c⁄° *, 
__VALIST
)

293 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

294 
_EXFUN
(
v¢¥ötf
, (*, 
size_t
, c⁄° *, 
__VALIST
)

295 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

296 
_EXFUN
(
vssˇnf
, (c⁄° *, c⁄° *, 
__VALIST
)

297 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

305 #i‚de‡
__STRICT_ANSI__


306 #i‚de‡
_REENT_ONLY


307 
FILE
 * 
_EXFUN
(
fd›í
, (, const *));

309 
_EXFUN
(
fûío
, (
FILE
 *));

310 
_EXFUN
(
gëw
, (
FILE
 *));

311 
_EXFUN
(
p˛o£
, (
FILE
 *));

312 
FILE
 * 
_EXFUN
(
p›í
, (const *, const *));

313 
_EXFUN
(
putw
, (, 
FILE
 *));

314 
_EXFUN
(
£tbuf„r
, (
FILE
 *, *, ));

315 
_EXFUN
(
£éöebuf
, (
FILE
 *));

316 
_EXFUN
(
gëc_u∆ocked
, (
FILE
 *));

317 
_EXFUN
(
gëch¨_u∆ocked
, ());

318 
_EXFUN
(
Êockfûe
, (
FILE
 *));

319 
_EXFUN
(
·rylockfûe
, (
FILE
 *));

320 
_EXFUN
(
fu∆ockfûe
, (
FILE
 *));

321 
_EXFUN
(
putc_u∆ocked
, (, 
FILE
 *));

322 
_EXFUN
(
putch¨_u∆ocked
, ());

329 #i‚de‡
__STRICT_ANSI__


330 #i‚de‡
_REENT_ONLY


331 #i‚de‡
d¥ötf


332 
_EXFUN
(
d¥ötf
, (, const *, ...)

333 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

335 
FILE
 * 
_EXFUN
(
fmem›í
, (*, 
size_t
, const *));

338 
FILE
 * 
_EXFUN
(
›í_mem°ªam
, (**, 
size_t
 *));

339 #i‡
deföed
 (
__CYGWIN__
)

340 
_EXFUN
(
ª«mót
, (, const *, , const *));

342 
_EXFUN
(
vd¥ötf
, (, c⁄° *, 
__VALIST
)

343 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

351 
_EXFUN
(
_asùrötf_r
, (
_ªít
 *, **, const *, ...)

352 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

353 * 
_EXFUN
(
_a¢ùrötf_r
, (
_ªít
 *, *, 
size_t
 *, const *, ...)

354 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5))));

355 * 
_EXFUN
(
_a¢¥ötf_r
, (
_ªít
 *, *, 
size_t
 *, const *, ...)

356 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5))));

357 
_EXFUN
(
_a•rötf_r
, (
_ªít
 *, **, const *, ...)

358 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

359 
_EXFUN
(
_dùrötf_r
, (
_ªít
 *, , const *, ...)

360 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

361 
_EXFUN
(
_d¥ötf_r
, (
_ªít
 *, , const *, ...)

362 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

363 
_EXFUN
(
_f˛o£_r
, (
_ªít
 *, 
FILE
 *));

364 
_EXFUN
(
_f˛o£Æl_r
, (
_ªít
 *));

365 
FILE
 * 
_EXFUN
(
_fd›í_r
, (
_ªít
 *, , const *));

366 
_EXFUN
(
_fÊush_r
, (
_ªít
 *, 
FILE
 *));

367 
_EXFUN
(
_fgëc_r
, (
_ªít
 *, 
FILE
 *));

368 * 
_EXFUN
(
_fgës_r
, (
_ªít
 *, *, , 
FILE
 *));

369 #ifde‡
_COMPILING_NEWLIB


370 
_EXFUN
(
_fgëpos_r
, (
_ªít
 *, 
FILE
 *, 
_Âos_t
 *));

371 
_EXFUN
(
_f£ços_r
, (
_ªít
 *, 
FILE
 *, c⁄° 
_Âos_t
 *));

373 
_EXFUN
(
_fgëpos_r
, (
_ªít
 *, 
FILE
 *, 
Âos_t
 *));

374 
_EXFUN
(
_f£ços_r
, (
_ªít
 *, 
FILE
 *, c⁄° 
Âos_t
 *));

376 
_EXFUN
(
_fùrötf_r
, (
_ªít
 *, 
FILE
 *, const *, ...)

377 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

378 
_EXFUN
(
_fisˇnf_r
, (
_ªít
 *, 
FILE
 *, const *, ...)

379 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 4))));

380 
FILE
 * 
_EXFUN
(
_fmem›í_r
, (
_ªít
 *, *, 
size_t
, const *));

381 
FILE
 * 
_EXFUN
(
_f›í_r
, (
_ªít
 *, const *, const *));

382 
FILE
 * 
_EXFUN
(
_‰e›í_r
, (
_ªít
 *, const *, const *, FILE *));

383 
_EXFUN
(
_Ârötf_r
, (
_ªít
 *, 
FILE
 *, const *, ...)

384 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

385 
_EXFUN
(
_Âurge_r
, (
_ªít
 *, 
FILE
 *));

386 
_EXFUN
(
_Âutc_r
, (
_ªít
 *, , 
FILE
 *));

387 
_EXFUN
(
_Âuts_r
, (
_ªít
 *, c⁄° *, 
FILE
 *));

388 
size_t
 
_EXFUN
(
_‰ód_r
, (
_ªít
 *, 
_PTR
, size_à
_size
, size_à
_n
, 
FILE
 *));

389 
_EXFUN
(
_fsˇnf_r
, (
_ªít
 *, 
FILE
 *, const *, ...)

390 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 4))));

391 
_EXFUN
(
_f£ek_r
, (
_ªít
 *, 
FILE
 *, , ));

392 
_EXFUN
(
_f£eko_r
,(
_ªít
 *, 
FILE
 *, 
_off_t
, ));

393 
_EXFUN
(
_·ñl_r
, (
_ªít
 *, 
FILE
 *));

394 
_off_t
 
_EXFUN
(
_·ñlo_r
,(
_ªít
 *, 
FILE
 *));

395 
_EXFUN
(
_ªwöd_r
, (
_ªít
 *, 
FILE
 *));

396 
size_t
 
_EXFUN
(
_fwrôe_r
, (
_ªít
 *, c⁄° 
_PTR
 , size_à
_size
, size_à
_n
, 
FILE
 *));

397 
_EXFUN
(
_gëc_r
, (
_ªít
 *, 
FILE
 *));

398 
_EXFUN
(
_gëc_u∆ocked_r
, (
_ªít
 *, 
FILE
 *));

399 
_EXFUN
(
_gëch¨_r
, (
_ªít
 *));

400 
_EXFUN
(
_gëch¨_u∆ocked_r
, (
_ªít
 *));

401 * 
_EXFUN
(
_gës_r
, (
_ªít
 *, *));

402 
_EXFUN
(
_ùrötf_r
, (
_ªít
 *, const *, ...)

403 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

404 
_EXFUN
(
_isˇnf_r
, (
_ªít
 *, const *, ...)

405 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

406 
FILE
 * 
_EXFUN
(
_›í_mem°ªam_r
, (
_ªít
 *, **, 
size_t
 *));

407 
_EXFUN
(
_≥º‹_r
, (
_ªít
 *, const *));

408 
_EXFUN
(
_¥ötf_r
, (
_ªít
 *, const *, ...)

409 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 3))));

410 
_EXFUN
(
_putc_r
, (
_ªít
 *, , 
FILE
 *));

411 
_EXFUN
(
_putc_u∆ocked_r
, (
_ªít
 *, , 
FILE
 *));

412 
_EXFUN
(
_putch¨_u∆ocked_r
, (
_ªít
 *, ));

413 
_EXFUN
(
_putch¨_r
, (
_ªít
 *, ));

414 
_EXFUN
(
_puts_r
, (
_ªít
 *, const *));

415 
_EXFUN
(
_ªmove_r
, (
_ªít
 *, const *));

416 
_EXFUN
(
_ª«me_r
, (
_ªít
 *,

417 c⁄° *
_ﬁd
, c⁄° *
_√w
));

418 
_EXFUN
(
_sˇnf_r
, (
_ªít
 *, const *, ...)

419 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 3))));

420 
_EXFUN
(
_sùrötf_r
, (
_ªít
 *, *, const *, ...)

421 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

422 
_EXFUN
(
_sisˇnf_r
, (
_ªít
 *, const *, const *, ...)

423 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 4))));

424 
_EXFUN
(
_¢ùrötf_r
, (
_ªít
 *, *, 
size_t
, const *, ...)

425 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5))));

426 
_EXFUN
(
_¢¥ötf_r
, (
_ªít
 *, *, 
size_t
, const *, ...)

427 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 5))));

428 
_EXFUN
(
_•rötf_r
, (
_ªít
 *, *, const *, ...)

429 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 4))));

430 
_EXFUN
(
_ssˇnf_r
, (
_ªít
 *, const *, const *, ...)

431 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 4))));

432 * 
_EXFUN
(
_ãm≤am_r
, (
_ªít
 *, const *, const *));

433 
FILE
 * 
_EXFUN
(
_tmpfûe_r
, (
_ªít
 *));

434 * 
_EXFUN
(
_tm≤am_r
, (
_ªít
 *, *));

435 
_EXFUN
(
_ungëc_r
, (
_ªít
 *, , 
FILE
 *));

436 
_EXFUN
(
_vasùrötf_r
, (
_ªít
 *, **, c⁄° *, 
__VALIST
)

437 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

438 * 
_EXFUN
(
_va¢ùrötf_r
, (
_ªít
*, *, 
size_t
 *, c⁄° *, 
__VALIST
)

439 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 0))));

440 * 
_EXFUN
(
_va¢¥ötf_r
, (
_ªít
*, *, 
size_t
 *, c⁄° *, 
__VALIST
)

441 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 0))));

442 
_EXFUN
(
_va•rötf_r
, (
_ªít
 *, **, c⁄° *, 
__VALIST
)

443 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

444 
_EXFUN
(
_vdùrötf_r
, (
_ªít
 *, , c⁄° *, 
__VALIST
)

445 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

446 
_EXFUN
(
_vd¥ötf_r
, (
_ªít
 *, , c⁄° *, 
__VALIST
)

447 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

448 
_EXFUN
(
_vfùrötf_r
, (
_ªít
 *, 
FILE
 *, c⁄° *, 
__VALIST
)

449 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

450 
_EXFUN
(
_vfisˇnf_r
, (
_ªít
 *, 
FILE
 *, c⁄° *, 
__VALIST
)

451 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 0))));

452 
_EXFUN
(
_vÂrötf_r
, (
_ªít
 *, 
FILE
 *, c⁄° *, 
__VALIST
)

453 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

454 
_EXFUN
(
_vfsˇnf_r
, (
_ªít
 *, 
FILE
 *, c⁄° *, 
__VALIST
)

455 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 0))));

456 
_EXFUN
(
_vùrötf_r
, (
_ªít
 *, c⁄° *, 
__VALIST
)

457 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

458 
_EXFUN
(
_visˇnf_r
, (
_ªít
 *, c⁄° *, 
__VALIST
)

459 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

460 
_EXFUN
(
_v¥ötf_r
, (
_ªít
 *, c⁄° *, 
__VALIST
)

461 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 2, 0))));

462 
_EXFUN
(
_vsˇnf_r
, (
_ªít
 *, c⁄° *, 
__VALIST
)

463 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 2, 0))));

464 
_EXFUN
(
_vsùrötf_r
, (
_ªít
 *, *, c⁄° *, 
__VALIST
)

465 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

466 
_EXFUN
(
_vsisˇnf_r
, (
_ªít
 *, c⁄° *, c⁄° *, 
__VALIST
)

467 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 0))));

468 
_EXFUN
(
_v¢ùrötf_r
, (
_ªít
 *, *, 
size_t
, c⁄° *, 
__VALIST
)

469 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 0))));

470 
_EXFUN
(
_v¢¥ötf_r
, (
_ªít
 *, *, 
size_t
, c⁄° *, 
__VALIST
)

471 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 4, 0))));

472 
_EXFUN
(
_v•rötf_r
, (
_ªít
 *, *, c⁄° *, 
__VALIST
)

473 
_ATTRIBUTE
 ((
__f‹m©__
 (
__¥ötf__
, 3, 0))));

474 
_EXFUN
(
_vssˇnf_r
, (
_ªít
 *, c⁄° *, c⁄° *, 
__VALIST
)

475 
_ATTRIBUTE
 ((
__f‹m©__
 (
__sˇnf__
, 3, 0))));

479 
_EXFUN
(
Âurge
, (
FILE
 *));

480 
ssize_t
 
_EXFUN
(
__gëdñim
, (**, 
size_t
 *, , 
FILE
 *));

481 
ssize_t
 
_EXFUN
(
__gëlöe
, (**, 
size_t
 *, 
FILE
 *));

483 #ifde‡
__LARGE64_FILES


484 #i‡!
deföed
(
__CYGWIN__
Ë|| deföed(
_COMPILING_NEWLIB
)

485 
FILE
 * 
_EXFUN
(
fd›í64
, (, const *));

486 
FILE
 * 
_EXFUN
(
f›í64
, (const *, const *));

487 
FILE
 * 
_EXFUN
(
‰e›í64
, (
_CONST
 *, _CONST *, FILE *));

488 
_off64_t
 
_EXFUN
(
·ñlo64
, (
FILE
 *));

489 
_off64_t
 
_EXFUN
(
f£eko64
, (
FILE
 *, _off64_t, ));

490 
_EXFUN
(
fgëpos64
, (
FILE
 *, 
_Âos64_t
 *));

491 
_EXFUN
(
f£ços64
, (
FILE
 *, c⁄° 
_Âos64_t
 *));

492 
FILE
 * 
_EXFUN
(
tmpfûe64
, ());

494 
FILE
 * 
_EXFUN
(
_fd›í64_r
, (
_ªít
 *, , const *));

495 
FILE
 * 
_EXFUN
(
_f›í64_r
, (
_ªít
 *,const *, const *));

496 
FILE
 * 
_EXFUN
(
_‰e›í64_r
, (
_ªít
 *, 
_CONST
 *, _CONST *, FILE *));

497 
_off64_t
 
_EXFUN
(
_·ñlo64_r
, (
_ªít
 *, 
FILE
 *));

498 
_off64_t
 
_EXFUN
(
_f£eko64_r
, (
_ªít
 *, 
FILE
 *, _off64_t, ));

499 
_EXFUN
(
_fgëpos64_r
, (
_ªít
 *, 
FILE
 *, 
_Âos64_t
 *));

500 
_EXFUN
(
_f£ços64_r
, (
_ªít
 *, 
FILE
 *, c⁄° 
_Âos64_t
 *));

501 
FILE
 * 
_EXFUN
(
_tmpfûe64_r
, (
_ªít
 *));

509 
_EXFUN
(
__§gë_r
, (
_ªít
 *, 
FILE
 *));

510 
_EXFUN
(
__swbuf_r
, (
_ªít
 *, , 
FILE
 *));

516 #i‚de‡
__STRICT_ANSI__


517 #ifde‡
__LARGE64_FILES


518 
FILE
 *
_EXFUN
(
fun›í
,(c⁄° 
_PTR
 
__cookõ
,

519 (*
__ªad‚
)(
_PTR
 
__c
, *
__buf
, 
__n
),

520 (*
__wrôe‚
)(
_PTR
 
__c
, c⁄° *
__buf
, 
__n
),

521 
	$_Âos64_t
 (*
__£ek‚
)(
_PTR
 
__c
, 
_Âos64_t
 
__off
, 
__whí˚
),

522 (*
__˛o£‚
)(
_PTR
 
__c
)));

523 
FILE
 *
	`_EXFUN
(
_fun›í_r
,(
_ªít
 *, c⁄° 
_PTR
 
__cookõ
,

524 (*
__ªad‚
)(
_PTR
 
__c
, *
__buf
, 
__n
),

525 (*
__wrôe‚
)(
_PTR
 
__c
, c⁄° *
__buf
, 
__n
),

526 
	$_Âos64_t
 (*
__£ek‚
)(
_PTR
 
__c
, 
_Âos64_t
 
__off
, 
__whí˚
),

527 (*
__˛o£‚
)(
_PTR
 
__c
)));

529 
FILE
 *
	`_EXFUN
(
fun›í
,(c⁄° 
_PTR
 
__cookõ
,

530 (*
__ªad‚
)(
_PTR
 
__cookõ
, *
__buf
, 
__n
),

531 (*
__wrôe‚
)(
_PTR
 
__cookõ
, c⁄° *
__buf
, 
__n
),

532 
	$Âos_t
 (*
__£ek‚
)(
_PTR
 
__cookõ
, 
Âos_t
 
__off
, 
__whí˚
),

533 (*
__˛o£‚
)(
_PTR
 
__cookõ
)));

534 
FILE
 *
	`_EXFUN
(
_fun›í_r
,(
_ªít
 *, c⁄° 
_PTR
 
__cookõ
,

535 (*
__ªad‚
)(
_PTR
 
__cookõ
, *
__buf
, 
__n
),

536 (*
__wrôe‚
)(
_PTR
 
__cookõ
, c⁄° *
__buf
, 
__n
),

537 
	$Âos_t
 (*
__£ek‚
)(
_PTR
 
__cookõ
, 
Âos_t
 
__off
, 
__whí˚
),

538 (*
__˛o£‚
)(
_PTR
 
__cookõ
)));

541 
	#‰›í
(
__cookõ
, 
__‚
Ë
	`fun›í
(__cookie, __fn, ((*)())0, \

542 (
	`Âos_t
 (*)())0, ((*)())0)

	)

543 
	#fw›í
(
__cookõ
, 
__‚
Ë
	`fun›í
(__cookie, ((*)())0, __fn, \

544 (
	`Âos_t
 (*)())0, ((*)())0)

	)

546 
ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
(*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__n
);

547 
ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
(*
	t__cookõ
, c⁄° *
	t__buf
,

548 
	tsize_t
 
	t__n
);

549 #ifde‡
__LARGE64_FILES


550 
	tcookõ_£ek_fun˘i⁄_t
(*
	t__cookõ
, 
	t_off64_t
 *
	t__off
,

551 
	t__whí˚
);

553 
	tcookõ_£ek_fun˘i⁄_t
(*
	t__cookõ
, 
	toff_t
 *
	t__off
, 
	t__whí˚
);

555 
	tcookõ_˛o£_fun˘i⁄_t
(*
	t__cookõ
);

560 
cookõ_ªad_fun˘i⁄_t
 *
ªad
;

561 
cookõ_wrôe_fun˘i⁄_t
 *
wrôe
;

562 
cookõ_£ek_fun˘i⁄_t
 *
£ek
;

563 
cookõ_˛o£_fun˘i⁄_t
 *
˛o£
;

564 } 
	tcookõ_io_fun˘i⁄s_t
;

565 
FILE
 *
	`_EXFUN
(
f›ícookõ
,(*
__cookõ
,

566 c⁄° *
__mode
, 
cookõ_io_fun˘i⁄s_t
 
__fun˘i⁄s
));

567 
FILE
 *
	`_EXFUN
(
_f›ícookõ_r
,(
_ªít
 *, *
__cookõ
,

568 c⁄° *
__mode
, 
cookõ_io_fun˘i⁄s_t
 
__fun˘i⁄s
));

571 #i‚de‡
__CUSTOM_FILE_IO__


576 
	#__sgëc_øw_r
(
__±r
, 
__f
Ë(--(__f)->
_r
 < 0 ? 
	`__§gë_r
(__±r, __fË: ()(*(__f)->
_p
++))

	)

578 #ifde‡
__SCLE


589 
_ELIDABLE_INLINE
 
	`__sgëc_r
(
_ªít
 *
__±r
, 
FILE
 *
__p
);

591 
_ELIDABLE_INLINE
 
	$__sgëc_r
(
_ªít
 *
__±r
, 
FILE
 *
__p
)

593 
__c
 = 
	`__sgëc_øw_r
(
__±r
, 
__p
);

594 i‡((
__p
->
_Êags
 & 
__SCLE
Ë&& (
__c
 == '\r'))

596 
__c2
 = 
	`__sgëc_øw_r
(
__±r
, 
__p
);

597 i‡(
__c2
 == '\n')

598 
__c
 = 
__c2
;

600 
	`ungëc
(
__c2
, 
__p
);

602  
__c
;

603 
	}
}

605 
	#__sgëc_r
(
__±r
, 
__p
Ë
	`__sgëc_øw_r
(__±r, __p)

	)

608 #ifde‡
_√vî


611 
_ELIDABLE_INLINE
 
	$__•utc_r
(
_ªít
 *
_±r
, 
_c
, 
FILE
 *
_p
) {

612 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

613  (*
_p
->_p++ = 
_c
);

615  (
	`__swbuf_r
(
_±r
, 
_c
, 
_p
));

616 
	}
}

621 
	#__•utc_øw_r
(
__±r
, 
__c
, 
__p
) \

622 (--(
__p
)->
_w
 < 0 ? \

623 (
__p
)->
_w
 >(__p)->
_lbfsize
 ? \

624 (*(
__p
)->
_p
 = (
__c
)), *(__p)->_p != '\n' ? \

625 ()*(
__p
)->
_p
++ : \

626 
	`__swbuf_r
(
__±r
, '\n', 
__p
) : \

627 
	`__swbuf_r
(
__±r
, ()(
__c
), 
__p
) : \

628 (*(
__p
)->
_p
 = (
__c
), ()*(__p)->_p++))

	)

629 #ifde‡
__SCLE


630 
	#__•utc_r
(
__±r
, 
__c
, 
__p
) \

631 ((((
__p
)->
_Êags
 & 
__SCLE
Ë&& ((
__c
) == '\n')) \

632 ? 
	`__•utc_øw_r
(
__±r
, '\r', (
__p
)) : 0 , \

633 
	`__•utc_øw_r
((
__±r
), (
__c
), (
__p
)))

	)

635 
	#__•utc_r
(
__±r
, 
__c
, 
__p
Ë
	`__•utc_øw_r
(__±r, __c, __p)

	)

639 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

640 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

641 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

642 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

644 #i‚de‡
_REENT_SMALL


645 
	#„of
(
p
Ë
	`__s„of
’)

	)

646 
	#„º‹
(
p
Ë
	`__s„º‹
’)

	)

647 
	#˛óªº
(
p
Ë
	`__s˛óªº
’)

	)

651 
	#fûío
(
p
Ë
	`__sfûío
’)

	)

654 #i‚de‡
__CYGWIN__


655 #i‚de‡
löt


656 
	#gëc
(
Â
Ë
	`__sgëc_r
(
_REENT
, fp)

	)

657 
	#putc
(
x
, 
Â
Ë
	`__•utc_r
(
_REENT
, x, fp)

	)

661 #i‚de‡
__STRICT_ANSI__


663 
	#Á°_putc
(
x
,
p
Ë(--’)->
_w
 < 0 ? \

664 
	`__swbuf_r
(
_REENT
, ()(
x
), 
p
Ë=
EOF
 : (*’)->
_p
 = (x), (p)->_p++, 0))

	)

666 
	#L_cu£rid
 9

	)

667 #ifde‡
__CYGWIN__


668 
	#L_˘îmid
 16

	)

674 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

675 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

677 
	g_END_STD_C


	@/usr/include/string.h

7 #i‚de‡
_STRING_H_


8 
	#_STRING_H_


	)

10 
	~"_™si.h
"

11 
	~<sys/ªít.h
>

12 
	~<sys/cdefs.h
>

13 
	~<sys/„©uªs.h
>

15 
	#__√ed_size_t


	)

16 
	#__√ed_NULL


	)

17 
	~<°ddef.h
>

19 
_BEGIN_STD_C


21 
_PTR
 
_EXFUN
(
memchr
,(c⁄° _PTR, , 
size_t
));

22 
_EXFUN
(
memcmp
,(c⁄° 
_PTR
, c⁄° _PTR, 
size_t
));

23 
_PTR
 
_EXFUN
(
mem˝y
,(_PTR 
__ª°ri˘
, c⁄° _PTR __ª°ri˘, 
size_t
));

24 
_PTR
 
_EXFUN
(
memmove
,(_PTR, c⁄° _PTR, 
size_t
));

25 
_PTR
 
_EXFUN
(
mem£t
,(_PTR, , 
size_t
));

26 *
_EXFUN
(
°rˇt
,(*
__ª°ri˘
, const *__restrict));

27 *
_EXFUN
(
°rchr
,(const *, ));

28 
_EXFUN
(
°rcmp
,(const *, const *));

29 
_EXFUN
(
°rcﬁl
,(const *, const *));

30 *
_EXFUN
(
°r˝y
,(*
__ª°ri˘
, const *__restrict));

31 
size_t
 
_EXFUN
(
°rc•n
,(const *, const *));

32 *
_EXFUN
(
°ªº‹
,());

33 
size_t
 
_EXFUN
(
°æí
,(const *));

34 *
_EXFUN
(
°∫ˇt
,(*
__ª°ri˘
, c⁄° *__ª°ri˘, 
size_t
));

35 
_EXFUN
(
°∫cmp
,(c⁄° *, c⁄° *, 
size_t
));

36 *
_EXFUN
(
°∫˝y
,(*
__ª°ri˘
, c⁄° *__ª°ri˘, 
size_t
));

37 *
_EXFUN
(
°Ωbrk
,(const *, const *));

38 *
_EXFUN
(
°ºchr
,(const *, ));

39 
size_t
 
_EXFUN
(
°r•n
,(const *, const *));

40 *
_EXFUN
(
°r°r
,(const *, const *));

42 #i‚de‡
_REENT_ONLY


43 *
_EXFUN
(
°πok
,(*
__ª°ri˘
, const *__restrict));

46 
size_t
 
_EXFUN
(
°rx‰m
,(*
__ª°ri˘
, const *__restrict, size_t));

48 #i‚de‡
__STRICT_ANSI__


49 *
_EXFUN
(
°πok_r
,(*
__ª°ri˘
, const *__restrict, **__restrict));

51 
_EXFUN
(
bcmp
,(c⁄° *, c⁄° *, 
size_t
));

52 
_EXFUN
(
bc›y
,(c⁄° *, *, 
size_t
));

53 
_EXFUN
(
bzîo
,(*, 
size_t
));

54 
_EXFUN
(
ffs
,());

55 *
_EXFUN
(
ödex
,(const *, ));

56 
_PTR
 
_EXFUN
(
memc˝y
,(_PTR 
__ª°ri˘
, c⁄° _PTR __ª°ri˘, , 
size_t
));

57 
_PTR
 
_EXFUN
(
memp˝y
,(_PTR, c⁄° _PTR, 
size_t
));

58 
_PTR
 
_EXFUN
(
memmem
, (c⁄° _PTR, 
size_t
, const _PTR, size_t));

59 
_PTR
 
_EXFUN
(
memrchr
,(c⁄° _PTR, , 
size_t
));

60 
_PTR
 
_EXFUN
(
øwmemchr
,(const _PTR, ));

61 *
_EXFUN
(
rödex
,(const *, ));

62 *
_EXFUN
(
°p˝y
,(*
__ª°ri˘
, const *__restrict));

63 *
_EXFUN
(
°≤˝y
,(*
__ª°ri˘
, c⁄° *__ª°ri˘, 
size_t
));

64 
_EXFUN
(
°rˇ£cmp
,(const *, const *));

65 *
_EXFUN
(
°rˇ£°r
,(const *, const *));

66 *
_EXFUN
(
°rch∫ul
,(const *, ));

68 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| (
_XOPEN_SOURCE
 - 0) >= 500

69 *
_EXFUN
(
°rdup
,(const *));

71 #i‚de‡
__STRICT_ANSI__


72 *
_EXFUN
(
_°rdup_r
,(
_ªít
 *, const *));

74 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| (
_XOPEN_SOURCE
 - 0) >= 700

75 *
_EXFUN
(
°∫dup
,(c⁄° *, 
size_t
));

77 #i‚de‡
__STRICT_ANSI__


78 *
_EXFUN
(
_°∫dup_r
,(
_ªít
 *, c⁄° *, 
size_t
));

83 #ifde‡
_GNU_SOURCE


84 *
_EXFUN
(
°ªº‹_r
,(, *, 
size_t
));

86 #ifde‡
__GNUC__


87 
_EXFUN
(
°ªº‹_r
,(, *, 
size_t
)Ë
__asm__
 (
__ASMNAME
 ("__xpg_strerror_r"));

89 
_EXFUN
(
__xpg_°ªº‹_r
,(, *, 
size_t
));

90 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

93 
size_t
 
_EXFUN
(
°æˇt
,(*, const *, size_t));

94 
size_t
 
_EXFUN
(
°æ˝y
,(*, const *, size_t));

95 
_EXFUN
(
°∫ˇ£cmp
,(c⁄° *, c⁄° *, 
size_t
));

96 
size_t
 
_EXFUN
(
°∫Àn
,(const *, size_t));

97 *
_EXFUN
(
°r£p
,(**, const *));

98 *
_EXFUN
(
°æwr
,(*));

99 *
_EXFUN
(
°ru¥
,(*));

100 #i‚de‡
DEFS_H


101 *
_EXFUN
(
°rsig«l
, (
__signo
));

103 #ifde‡
__CYGWIN__


104 
_EXFUN
(
°πosigno
, (c⁄° *
__«me
));

108 * 
_EXFUN
(
_°ªº‹_r
, (
_ªít
 *, , , *));

110 #i‡
deföed
 
_GNU_SOURCE
 && deföed 
__GNUC__


111 
	#°rdu∑
(
__s
) \

112 (
	`__exãnsi⁄__
 ({c⁄° *
__ö
 = (
__s
); \

113 
size_t
 
__Àn
 = 
	`°æí
 (
__ö
) + 1; \

114 * 
__out
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

115 (*Ë
	`mem˝y
 (
__out
, 
__ö
, 
__Àn
);}))

	)

116 
	#°∫du∑
(
__s
, 
__n
) \

117 (
	`__exãnsi⁄__
 ({c⁄° *
__ö
 = (
__s
); \

118 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ö
, (
__n
)) + 1; \

119 *
__out
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

120 
__out
[
__Àn
-1] = '\0'; \

121 (*Ë
	`mem˝y
 (
__out
, 
__ö
, 
__Àn
-1);}))

	)

125 #i‚de‡
°rcmpi


126 
	#°rcmpi
 
°rˇ£cmp


	)

128 #i‚de‡
°ricmp


129 
	#°ricmp
 
°rˇ£cmp


	)

131 #i‚de‡
°∫cmpi


132 
	#°∫cmpi
 
°∫ˇ£cmp


	)

134 #i‚de‡
°∫icmp


135 
	#°∫icmp
 
°∫ˇ£cmp


	)

140 
	~<sys/°rög.h
>

142 
	g_END_STD_C


	@/usr/include/_ansi.h

12 #i‚def 
_ANSIDECL_H_


13 
	#_ANSIDECL_H_


	)

15 
	~<√wlib.h
>

16 
	~<sys/c⁄fig.h
>

22 #ifde‡
__STDC__


23 
	#_HAVE_STDC


	)

28 #ifde‡
__˝lu•lus


29 #i‡!(
deföed
(
_BEGIN_STD_C
Ë&& deföed(
_END_STD_C
))

30 #ifde‡
_HAVE_STD_CXX


31 
	#_BEGIN_STD_C
 
«me•a˚
 
°d
 { "C" {

	)

32 
	#_END_STD_C
 } }

	)

34 
	#_BEGIN_STD_C
 "C" {

	)

35 
	#_END_STD_C
 }

	)

37 #i‡
__GNUC_PREREQ
 (3, 3)

38 
	#_NOTHROW
 
	`__©åibuã__
 ((
nŸhrow
))

	)

40 
	#_NOTHROW
 
	`throw
()

	)

44 
	#_BEGIN_STD_C


	)

45 
	#_END_STD_C


	)

46 
	#_NOTHROW


	)

49 #ifde‡
_HAVE_STDC


50 
	#_PTR
 *

	)

51 
	#_AND
 ,

	)

52 
	#_NOARGS
 

	)

53 
	#_CONST
 c⁄°

	)

54 
	#_VOLATILE
 vﬁ©ûe

	)

55 
	#_SIGNED
 sig√d

	)

56 
	#_DOTS
 , ...

	)

57 
	#_VOID
 

	)

58 #ifde‡
__CYGWIN__


59 
	#_EXFUN_NOTHROW
(
«me
, 
¥Ÿo
Ë
__cde˛
Çamê¥Ÿÿ
_NOTHROW


	)

60 
	#_EXFUN
(
«me
, 
¥Ÿo
Ë
__cde˛
Çamê
	)
proto

61 
	#_EXPARM
(
«me
, 
¥Ÿo
Ë(* 
__cde˛
ÇameË
	)
proto

62 
	#_EXFNPTR
(
«me
, 
¥Ÿo
Ë(
__cde˛
 *ÇameË
	)
proto

64 
	#_EXFUN_NOTHROW
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
_NOTHROW


	)

65 
	#_EXFUN
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

66 
	#_EXPARM
(
«me
, 
¥Ÿo
Ë(*ÇameË
	)
proto

67 
	#_EXFNPTR
(
«me
, 
¥Ÿo
Ë(*ÇameË
	)
proto

69 
	#_DEFUN
(
«me
, 
¨gli°
, 
¨gs
Ë
	`«me
◊rgs)

	)

70 
	#_DEFUN_VOID
(
«me
Ë
	`«me
(
_NOARGS
)

	)

71 
	#_CAST_VOID
 ()

	)

72 #i‚de‡
_LONG_DOUBLE


73 
	#_LONG_DOUBLE
 

	)

75 #i‚de‡
_LONG_LONG_TYPE


76 
	#_LONG_LONG_TYPE
 

	)

78 #i‚de‡
_PARAMS


79 
	#_PARAMS
(
∑ømli°
Ë
	)
paramlist

82 
	#_PTR
 *

	)

83 
	#_AND
 ;

	)

84 
	#_NOARGS


	)

85 
	#_CONST


	)

86 
	#_VOLATILE


	)

87 
	#_SIGNED


	)

88 
	#_DOTS


	)

89 
	#_VOID
 

	)

90 
	#_EXFUN
(
«me
, 
¥Ÿo
Ë
	`«me
()

	)

91 
	#_EXFUN_NOTHROW
(
«me
, 
¥Ÿo
Ë
	`«me
()

	)

92 
	#_DEFUN
(
«me
, 
¨gli°
, 
¨gs
Ë«mê¨gli°árgs;

	)

93 
	#_DEFUN_VOID
(
«me
Ë
	`«me
()

	)

94 
	#_CAST_VOID


	)

95 
	#_LONG_DOUBLE
 

	)

96 
	#_LONG_LONG_TYPE
 

	)

97 #i‚de‡
_PARAMS


98 
	#_PARAMS
(
∑ømli°
Ë()

	)

104 #ifde‡
__GNUC__


105 
	#_ATTRIBUTE
(
©ås
Ë
	`__©åibuã__
 (©ås)

	)

107 
	#_ATTRIBUTE
(
©ås
)

	)

125 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

127 
	#_ELIDABLE_INLINE
 
__ölöe__
 
	`_ATTRIBUTE
 ((
__Æways_ölöe__
))

	)

131 
	#_ELIDABLE_INLINE
 
__ölöe__


	)

134 #i‡
__GNUC_PREREQ
 (3, 1)

135 
	#_NOINLINE
 
	`__©åibuã__
 ((
__noölöe__
))

	)

136 
	#_NOINLINE_STATIC
 
_NOINLINE
 

	)

140 
	#_NOINLINE


	)

141 
	#_NOINLINE_STATIC


	)

	@/usr/include/machine/malloc.h

1 #i‚def 
_MACHMALLOC_H_


2 
	#_MACHMALLOC_H_


	)

	@/usr/include/sys/cdefs.h

40 #i‚def 
_SYS_CDEFS_H_


41 
	#_SYS_CDEFS_H_


	)

43 
	~<sys/„©uªs.h
>

44 
	~<°ddef.h
>

45 
	~<°döt.h
>

47 
	#__PMT
(
¨gs
Ë
	)
args

48 
	#__DOTS
 , ...

	)

49 
	#__THROW


	)

51 #ifde‡
__GNUC__


52 
	#__ASMNAME
(
˙ame
Ë
	`__XSTRING
 (
__USER_LABEL_PREFIX__
Ë
	)
cname

55 
	#__±r_t
 *

	)

56 
	#__l⁄g_doubÀ_t
 

	)

58 
	#__©åibuã_mÆloc__


	)

59 
	#__©åibuã_puª__


	)

60 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
)

	)

61 
	#__Êex¨r
 [0]

	)

63 #i‚de‡
__BOUNDED_POINTERS__


64 
	#__bounded


	)

65 
	#__unbounded


	)

66 
	#__±rvÆue


	)

69 #i‡
deföed
(
__˝lu•lus
)

70 
	#__BEGIN_DECLS
 "C" {

	)

71 
	#__END_DECLS
 }

	)

73 
	#__BEGIN_DECLS


	)

74 
	#__END_DECLS


	)

83 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

85 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

86 
	#__GNUCLIKE_ASM
 3

	)

87 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

89 
	#__GNUCLIKE_ASM
 2

	)

91 
	#__GNUCLIKE___TYPEOF
 1

	)

92 
	#__GNUCLIKE___OFFSETOF
 1

	)

93 
	#__GNUCLIKE___SECTION
 1

	)

95 #i‚de‡
__INTEL_COMPILER


96 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

99 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

100 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

101 && 
__INTEL_COMPILER
 < 800

102 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


105 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >3Ë&& !
deföed
(
__INTEL_COMPILER
)

106 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

107 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

108 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

111 #i‡
deföed
(
__GNUC__
)

112 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

118 #i‡
deföed
(
__GNUC__
)

119 
	#__compûî_memb¨
(Ë
__asm
 
	`__vﬁ©ûe
(" " : : : "mem‹y")

	)

122 #i‚de‡
__INTEL_COMPILER


123 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

124 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

127 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

130 
	#__CC_SUPPORTS_INLINE
 1

	)

131 
	#__CC_SUPPORTS___INLINE
 1

	)

132 
	#__CC_SUPPORTS___INLINE__
 1

	)

134 
	#__CC_SUPPORTS___FUNC__
 1

	)

135 
	#__CC_SUPPORTS_WARNING
 1

	)

137 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

139 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

155 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

156 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

157 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

158 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

159 
	#__STRING
(
x
Ë#x

	)

160 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

162 
	#__c⁄°
 c⁄°

	)

163 
	#__sig√d
 sig√d

	)

164 
	#__vﬁ©ûe
 vﬁ©ûe

	)

165 #i‡
deföed
(
__˝lu•lus
)

166 
	#__ölöe
 
ölöe


	)

168 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

169 
	#__ölöe


	)

174 
	#__P
(
¥Ÿos
Ë(Ë

	)

175 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

176 
	#__STRING
(
x
Ë"x"

	)

178 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

179 
	#__c⁄°


	)

180 
	#__ölöe


	)

181 
	#__sig√d


	)

182 
	#__vﬁ©ûe


	)

191 #i‚def 
NO_ANSI_KEYWORDS


192 c⁄°

	)

193 
	#ölöe


	)

194 sig√d

	)

195 vﬁ©ûe

	)

209 #ifde‡
löt


210 
	#__dód2


	)

211 
	#__puª2


	)

212 
	#__unu£d


	)

213 
	#__∑cked


	)

214 
	#__Æig√d
(
x
)

	)

215 
	#__£˘i⁄
(
x
)

	)

217 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

218 
	#__dód2


	)

219 
	#__puª2


	)

220 
	#__unu£d


	)

222 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

223 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

224 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

225 
	#__unu£d


	)

228 #i‡
__GNUC_PREREQ__
(2, 7)

229 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

230 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

231 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

232 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

233 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

234 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

235 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

237 #i‡
deföed
(
__INTEL_COMPILER
)

238 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

239 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

240 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

241 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

242 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

243 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

244 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

248 #i‡!
__GNUC_PREREQ__
(2, 95)

249 
	#__Æignof
(
x
Ë
	`__off£tof
(°ru˘ { 
__a
; x 
__b
; }, __b)

	)

255 #i‡
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

256 
	#_Alig«s
(
e
Ë
	`Æig«s
”)

	)

257 
	#_Alignof
(
e
Ë
	`Æignof
”)

	)

258 
	#_N‹ëu∫
 [[
n‹ëu∫
]]

	)

259 
	#_Sètic_as£π
(
e
, 
s
Ë
	`°©ic_as£π
”, s)

	)

261 
	#_Thªad_loˇl
 
__thªad


	)

262 #ñi‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

266 
	#_Alig«s
(
x
Ë
	`__Æig√d
(x)

	)

267 
	#_Alignof
(
x
Ë
	`__Æignof
(x)

	)

268 
	#_N‹ëu∫
 
__dód2


	)

269 
	#_Thªad_loˇl
 
__thªad


	)

270 #i‡
__GNUC_PREREQ__
(4, 6Ë&& !
deföed
(
__˝lu•lus
)

272 #ñi‡
deföed
(
__COUNTER__
)

273 
	#_Sètic_as£π
(
x
, 
y
Ë
	`__Sètic_as£π
(x, 
__COUNTER__
)

	)

274 
	#__Sètic_as£π
(
x
, 
y
Ë
	`___Sètic_as£π
(x, y)

	)

275 
	#___Sètic_as£π
(
x
, 
y
Ë
	t__as£π_
 ## 
	ty
[(xË? 1 : -1]

	)

277 
	t_Sètic_as£π
(
	tx
, 
	ty
Ë
	t__hack


	)

290 #i‡
	tdeföed
(
	t__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

291 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

292 
	t_Gíîic
(
	tex¥
, 
	tt
: 
	tyes
, : 
	tno
)

	)

293 #ñi‡
	t__GNUC_PREREQ__
(3, 1Ë&& !
	tdeföed
(
	t__˝lu•lus
)

294 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

295 
	t__buûtö_choo£_ex¥
( \

296 
	t__buûtö_ty≥s_com∑tibÀ_p
(
	t__ty≥of
(
	tex¥
), 
	tt
), 
	tyes
, 
	tno
)

	)

299 #i‡
	t__GNUC_PREREQ__
(2, 96)

300 
	t__mÆloc_like
 
	t__©åibuã__
((
	t__mÆloc__
))

	)

301 
	t__puª
 
	t__©åibuã__
((
	t__puª__
))

	)

303 
	t__mÆloc_like


	)

304 
	t__puª


	)

307 #i‡
	t__GNUC_PREREQ__
(3, 1Ë|| (
	tdeföed
(
	t__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

308 
	t__Æways_ölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

310 
	t__Æways_ölöe


	)

313 #i‡
	t__GNUC_PREREQ__
(3, 1)

314 
	t__noölöe
 
	t__©åibuã__
 ((
	t__noölöe__
))

	)

316 
	t__noölöe


	)

319 #i‡
	t__GNUC_PREREQ__
(3, 3)

320 
	t__n⁄nuŒ
(
	tx
Ë
	t__©åibuã__
((
	t__n⁄nuŒ__
(x)))

	)

322 
	t__n⁄nuŒ
(
	tx
)

	)

325 #i‡
	t__GNUC_PREREQ__
(3, 4)

326 
	t__Á°ˇŒ
 
	t__©åibuã__
((
	t__Á°ˇŒ__
))

	)

328 
	t__Á°ˇŒ


	)

331 #i‡
	t__GNUC_PREREQ__
(4, 1)

332 
	t__ªtu∫s_twi˚
 
	t__©åibuã__
((
	t__ªtu∫s_twi˚__
))

	)

334 
	t__ªtu∫s_twi˚


	)

338 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

339 
	t__func__
 
	tNULL


	)

348 #i‡!(
	t__GNUC__
 =2 && 
	t__GNUC_MINOR__
 == 95)

349 #i‡!
	tdeföed
(
	t__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
	tlöt
)

350 
	t__ª°ri˘


	)

352 
	t__ª°ri˘
 
	tª°ri˘


	)

384 #i‡
	t__GNUC_PREREQ__
(2, 96)

385 
	t__¥edi˘_åue
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 1)

	)

386 
	t__¥edi˘_Ál£
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 0)

	)

388 
	t__¥edi˘_åue
(
	texp
Ë”xp)

	)

389 
	t__¥edi˘_Ál£
(
	texp
Ë”xp)

	)

392 #i‡
	t__GNUC_PREREQ__
(4, 2)

393 
	t__hiddí
 
	t__©åibuã__
((
	t__visibûôy__
("hiddí")))

	)

394 
	t__exp‹ãd
 
	t__©åibuã__
((
	t__visibûôy__
("deÁu…")))

	)

396 
	t__hiddí


	)

397 
	t__exp‹ãd


	)

400 
	t__off£tof
(
	tty≥
, 
	tfõld
Ë
	toff£tof
—y≥, fõld)

	)

401 
	t__øngeof
(
	tty≥
, 
	t°¨t
, 
	tíd
) \

402 (
	t__off£tof
(
	tty≥
, 
	tíd
Ë- __off£tof—y≥, 
	t°¨t
))

	)

410 #i‡
	t__GNUC_PREREQ__
(3, 1)

411 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) ({ \

412 c⁄° vﬁ©ûê
	`__ty≥of__
(((
s
 *)0)->
m
Ë*
__x
 = (
x
); \

413 
	`__DEQUALIFY
(
s
 *, (c⁄° vﬁ©ûê*)
__x
 - 
	`__off£tof
(s, 
m
));\

414 })

	)

416 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) \

417 
	t__DEQUALIFY
(
	ts
 *, (c⁄° vﬁ©ûê*)(
	tx
Ë- 
	t__off£tof
(s, 
	tm
))

	)

426 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

427 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

428 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

429 
	t__f‹m©_¨g
(
	tfmèrg
)

	)

430 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

431 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

433 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

434 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

435 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

436 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__sˇnf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

437 
	t__f‹m©_¨g
(
	tfmèrg
Ë
	t__©åibuã__
((
	t__f‹m©_¨g__
 (fmèrg)))

	)

438 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

439 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°rfm⁄__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

440 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

441 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°r·ime__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

445 #i‡
	tdeföed
(
	t__FªeBSD_cc_vîsi⁄
) && __FreeBSD_cc_version >= 300001 && \

446 
	tdeföed
(
	t__GNUC__
Ë&& !deföed(
	t__INTEL_COMPILER
)

447 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

448 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf0__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

450 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

453 #i‡
	tdeföed
(
	t__GNUC__
Ë|| deföed(
	t__INTEL_COMPILER
)

454 #i‚de‡
	t__INTEL_COMPILER


455 
	t__°r⁄g_ª„ªn˚
(
	tsym
,
	tÆüssym
) \

456 
	t__ty≥of
 (
	tsym
Ë
	tÆüssym
 
	t__©åibuã__
 ((
	t__Æüs__
 (#sym)))

	)

458 #ifde‡
	t__ELF__


459 #ifde‡
	t__STDC__


460 
	t__wók_ª„ªn˚
(
	tsym
,
	tÆüs
) \

461 
	t__asm__
(".weak " #alias); \

462 
	`__asm__
(".equ " #Æü†", " #sym)

	)

463 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

464 
	`__asm__
(".section .gnu.warning." #sym); \

465 
	`__asm__
(".asciz \"" 
msg
 "\""); \

466 
	`__asm__
(".¥evious")

	)

467 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

468 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

469 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

470 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

472 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

473 
	`__asm__
(".weakálias"); \

474 
	`__asm__
(".equálüs, sym")

	)

475 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

476 
	`__asm__
(".section .gnu.warning.sym"); \

477 
	`__asm__
(".asciz \"msg\""); \

478 
	`__asm__
(".¥evious")

	)

479 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

480 
	`__asm__
(".symvî im∂, sym@vîid")

	)

481 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

482 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

485 #ifde‡
__STDC__


486 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

487 
	`__asm__
(".stabs \"_" #alias "\",11,0,0,0"); \

488 
	`__asm__
(".°ab†\"_" #sym "\",1,0,0,0")

	)

489 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

490 
	`__asm__
(".°ab†\"" 
msg
 "\",30,0,0,0"); \

491 
	`__asm__
(".°ab†\"_" #sym "\",1,0,0,0")

	)

493 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

494 
	`__asm__
(".stabs \"_/**/alias\",11,0,0,0"); \

495 
	`__asm__
(".°ab†\"_/**/sym\",1,0,0,0")

	)

496 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

497 
	`__asm__
(".stabs msg,30,0,0,0"); \

498 
	`__asm__
(".°ab†\"_/**/sym\",1,0,0,0")

	)

503 #i‚def 
__FBSDID


504 
	#__FBSDID
(
s
Ë
__hack


	)

507 #i‚def 
__RCSID


508 
	#__RCSID
(
s
Ë
__hack


	)

511 #i‚def 
__RCSID_SOURCE


512 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

515 #i‚def 
__SCCSID


516 
	#__SCCSID
(
s
Ë
__hack


	)

519 #i‚def 
__COPYRIGHT


520 
	#__COPYRIGHT
(
s
Ë
__hack


	)

523 #i‚def 
__DECONST


524 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° *)(v¨))

	)

527 #i‚def 
__DEVOLATILE


528 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(vﬁ©ûê*)(v¨))

	)

531 #i‚def 
__DEQUALIFY


532 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

559 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

560 #unde‡
_POSIX_C_SOURCE


561 
	#_POSIX_C_SOURCE
 199009

	)

565 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

566 #unde‡
_POSIX_C_SOURCE


567 
	#_POSIX_C_SOURCE
 199209

	)

571 #ifde‡
_XOPEN_SOURCE


572 #i‡
_XOPEN_SOURCE
 - 0 >= 700

573 
	#__XSI_VISIBLE
 700

	)

574 #unde‡
_POSIX_C_SOURCE


575 
	#_POSIX_C_SOURCE
 200809

	)

576 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

577 
	#__XSI_VISIBLE
 600

	)

578 #unde‡
_POSIX_C_SOURCE


579 
	#_POSIX_C_SOURCE
 200112

	)

580 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

581 
	#__XSI_VISIBLE
 500

	)

582 #unde‡
_POSIX_C_SOURCE


583 
	#_POSIX_C_SOURCE
 199506

	)

591 #i‡
	`deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

592 
	#_POSIX_C_SOURCE
 198808

	)

594 #ifde‡
_POSIX_C_SOURCE


595 #i‡
_POSIX_C_SOURCE
 >= 200809

596 
	#__POSIX_VISIBLE
 200809

	)

597 
	#__ISO_C_VISIBLE
 1999

	)

598 #ñi‡
_POSIX_C_SOURCE
 >= 200112

599 
	#__POSIX_VISIBLE
 200112

	)

600 
	#__ISO_C_VISIBLE
 1999

	)

601 #ñi‡
_POSIX_C_SOURCE
 >= 199506

602 
	#__POSIX_VISIBLE
 199506

	)

603 
	#__ISO_C_VISIBLE
 1990

	)

604 #ñi‡
_POSIX_C_SOURCE
 >= 199309

605 
	#__POSIX_VISIBLE
 199309

	)

606 
	#__ISO_C_VISIBLE
 1990

	)

607 #ñi‡
_POSIX_C_SOURCE
 >= 199209

608 
	#__POSIX_VISIBLE
 199209

	)

609 
	#__ISO_C_VISIBLE
 1990

	)

610 #ñi‡
_POSIX_C_SOURCE
 >= 199009

611 
	#__POSIX_VISIBLE
 199009

	)

612 
	#__ISO_C_VISIBLE
 1990

	)

614 
	#__POSIX_VISIBLE
 198808

	)

615 
	#__ISO_C_VISIBLE
 0

	)

630 #i‡
	`deföed
(
_ANSI_SOURCE
)

631 
	#__POSIX_VISIBLE
 0

	)

632 
	#__XSI_VISIBLE
 0

	)

633 
	#__BSD_VISIBLE
 0

	)

634 
	#__ISO_C_VISIBLE
 1990

	)

635 #ñi‡
	`deföed
(
_C99_SOURCE
)

636 
	#__POSIX_VISIBLE
 0

	)

637 
	#__XSI_VISIBLE
 0

	)

638 
	#__BSD_VISIBLE
 0

	)

639 
	#__ISO_C_VISIBLE
 1999

	)

640 #ñi‡
	`deföed
(
_C11_SOURCE
)

641 
	#__POSIX_VISIBLE
 0

	)

642 
	#__XSI_VISIBLE
 0

	)

643 
	#__BSD_VISIBLE
 0

	)

644 
	#__ISO_C_VISIBLE
 2011

	)

646 
	#__POSIX_VISIBLE
 200809

	)

647 
	#__XSI_VISIBLE
 700

	)

648 
	#__BSD_VISIBLE
 1

	)

649 
	#__ISO_C_VISIBLE
 2011

	)

653 #i‚def 
__has_exãnsi⁄


654 
	#__has_exãnsi⁄
 
__has_„©uª


	)

656 #i‚def 
__has_„©uª


657 
	#__has_„©uª
(
x
Ë0

	)

659 #i‚def 
__has_ö˛ude


660 
	#__has_ö˛ude
(
x
Ë0

	)

662 #i‚def 
__has_buûtö


663 
	#__has_buûtö
(
x
Ë0

	)

	@/usr/include/sys/features.h

21 #i‚de‡
_SYS_FEATURES_H


22 
	#_SYS_FEATURES_H


	)

24 #ifde‡
__˝lu•lus


29 #i‚de‡
__GNUC_PREREQ


30 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


31 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

32 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

34 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

38 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë
	`__GNUC_PREREQ
(ma, mi)

	)

42 #ifde‡
__πems__


43 
	#_POSIX_JOB_CONTROL
 1

	)

44 
	#_POSIX_SAVED_IDS
 1

	)

45 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_ASYNCHRONOUS_IO
 1

	)

47 
	#_POSIX_FSYNC
 1

	)

48 
	#_POSIX_MAPPED_FILES
 1

	)

49 
	#_POSIX_MEMLOCK
 1

	)

50 
	#_POSIX_MEMLOCK_RANGE
 1

	)

51 
	#_POSIX_MEMORY_PROTECTION
 1

	)

52 
	#_POSIX_MESSAGE_PASSING
 1

	)

53 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

54 
	#_POSIX_PRIORITIZED_IO
 1

	)

55 
	#_POSIX_PRIORITY_SCHEDULING
 1

	)

56 
	#_POSIX_REALTIME_SIGNALS
 1

	)

57 
	#_POSIX_SEMAPHORES
 1

	)

59 
	#_POSIX_SYNCHRONIZED_IO
 1

	)

60 
	#_POSIX_TIMERS
 1

	)

61 
	#_POSIX_BARRIERS
 200112L

	)

62 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

63 
	#_POSIX_SPIN_LOCKS
 200112L

	)

67 
	#_POSIX_THREADS
 1

	)

68 
	#_POSIX_THREAD_ATTR_STACKADDR
 1

	)

69 
	#_POSIX_THREAD_ATTR_STACKSIZE
 1

	)

70 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 1

	)

71 
	#_POSIX_THREAD_PRIO_INHERIT
 1

	)

72 
	#_POSIX_THREAD_PRIO_PROTECT
 1

	)

73 
	#_POSIX_THREAD_PROCESS_SHARED
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 1

	)

77 
	#_POSIX_SPAWN
 1

	)

78 
	#_POSIX_TIMEOUTS
 1

	)

79 
	#_POSIX_CPUTIME
 1

	)

80 
	#_POSIX_THREAD_CPUTIME
 1

	)

81 
	#_POSIX_SPORADIC_SERVER
 1

	)

82 
	#_POSIX_THREAD_SPORADIC_SERVER
 1

	)

83 
	#_POSIX_DEVICE_CONTROL
 1

	)

84 
	#_POSIX_DEVCTL_DIRECTION
 1

	)

85 
	#_POSIX_INTERRUPT_CONTROL
 1

	)

86 
	#_POSIX_ADVISORY_INFO
 1

	)

89 
	#_UNIX98_THREAD_MUTEX_ATTRIBUTES
 1

	)

94 #ifde‡
__XMK__


95 
	#_POSIX_THREADS
 1

	)

96 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 1

	)

100 #ifde‡
__svr4__


101 
	#_POSIX_JOB_CONTROL
 1

	)

102 
	#_POSIX_SAVED_IDS
 1

	)

103 
	#_POSIX_VERSION
 199009L

	)

106 #ifde‡
__CYGWIN__


108 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__˝lu•lus
Ë|| 
__STDC_VERSION__
 >= 199901L

109 
	#_POSIX_VERSION
 200112L

	)

110 
	#_POSIX2_VERSION
 200112L

	)

111 
	#_XOPEN_VERSION
 600

	)

113 
	#_POSIX_ADVISORY_INFO
 200112L

	)

116 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

117 
	#_POSIX_CLOCK_SELECTION
 200112L

	)

118 
	#_POSIX_CPUTIME
 200112L

	)

119 
	#_POSIX_FSYNC
 200112L

	)

120 
	#_POSIX_IPV6
 200112L

	)

121 
	#_POSIX_JOB_CONTROL
 1

	)

122 
	#_POSIX_MAPPED_FILES
 200112L

	)

124 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

125 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

126 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

127 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

128 
	#_POSIX_NO_TRUNC
 1

	)

130 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

131 
	#_POSIX_RAW_SOCKETS
 200112L

	)

132 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

133 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

134 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_SAVED_IDS
 1

	)

136 
	#_POSIX_SEMAPHORES
 200112L

	)

137 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

138 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_SPIN_LOCKS
 200112L

	)

142 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

143 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

144 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

145 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

148 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

149 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

150 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

152 
	#_POSIX_THREADS
 200112L

	)

154 
	#_POSIX_TIMERS
 1

	)

160 
	#_POSIX_VDISABLE
 '\0'

	)

161 
	#_POSIX2_C_BIND
 200112L

	)

162 
	#_POSIX2_C_DEV
 200112L

	)

163 
	#_POSIX2_CHAR_TERM
 200112L

	)

173 
	#_POSIX2_SW_DEV
 200112L

	)

174 
	#_POSIX2_UPE
 200112L

	)

175 
	#_POSIX_V6_ILP32_OFF32
 -1

	)

176 #ifde‡
__LP64__


177 
	#_POSIX_V6_ILP32_OFFBIG
 -1

	)

178 
	#_POSIX_V6_LP64_OFF64
 1

	)

179 
	#_POSIX_V6_LPBIG_OFFBIG
 1

	)

181 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

182 
	#_POSIX_V6_LP64_OFF64
 -1

	)

183 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

185 
	#_XBS5_ILP32_OFF32
 
_POSIX_V6_ILP32_OFF32


	)

186 
	#_XBS5_ILP32_OFFBIG
 
_POSIX_V6_ILP32_OFFBIG


	)

187 
	#_XBS5_LP64_OFF64
 
_POSIX_V6_LP64_OFF64


	)

188 
	#_XBS5_LPBIG_OFFBIG
 
_POSIX_V6_LPBIG_OFFBIG


	)

189 
	#_XOPEN_CRYPT
 1

	)

190 
	#_XOPEN_ENH_I18N
 1

	)

194 
	#_XOPEN_SHM
 1

	)

203 
	#__STDC_ISO_10646__
 200305L

	)

214 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& deföed(
_XOPEN_SOURCE
)

215 #i‡(
_XOPEN_SOURCE
 - 0) == 700

216 
	#_POSIX_C_SOURCE
 200809L

	)

217 #ñi‡(
_XOPEN_SOURCE
 - 0) == 600

218 
	#_POSIX_C_SOURCE
 200112L

	)

219 #ñi‡(
_XOPEN_SOURCE
 - 0) == 500

220 
	#_POSIX_C_SOURCE
 199506L

	)

221 #ñi‡(
_XOPEN_SOURCE
 - 0) < 500

222 
	#_POSIX_C_SOURCE
 2

	)

226 #ifde‡
__˝lu•lus


	@/usr/include/sys/reent.h

7 #i‚de‡
_SYS_REENT_H_


8 #ifde‡
__˝lu•lus


11 
	#_SYS_REENT_H_


	)

13 
	~<_™si.h
>

14 
	~<sys/_ty≥s.h
>

16 
	#_NULL
 0

	)

18 #i‚de‡
__L⁄g


19 #i‡
__LONG_MAX__
 == 2147483647L

20 
	#__L⁄g
 

	)

21 
	t__L⁄g
 
	t__UL⁄g
;

22 #ñi‡
__INT_MAX__
 == 2147483647

23 
	#__L⁄g
 

	)

24 
	t__L⁄g
 
	t__UL⁄g
;

28 #i‡!
deföed
–
__L⁄g
)

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__L⁄g


33 
	#__L⁄g
 
__öt32_t


	)

34 
__uöt32_t
 
	t__UL⁄g
;

37 
_ªít
;

44 
	s_Bigöt


46 
_Bigöt
 *
_√xt
;

47 
_k
, 
_maxwds
, 
_sign
, 
_wds
;

48 
__UL⁄g
 
_x
[1];

52 
	s__tm


54 
__tm_£c
;

55 
__tm_mö
;

56 
__tm_hour
;

57 
__tm_mday
;

58 
__tm_m⁄
;

59 
__tm_yór
;

60 
__tm_wday
;

61 
__tm_yday
;

62 
__tm_isd°
;

69 
	#_ATEXIT_SIZE
 32

	)

71 
	s_⁄_exô_¨gs
 {

72 * 
_‚¨gs
[
_ATEXIT_SIZE
];

73 * 
_dso_h™dÀ
[
_ATEXIT_SIZE
];

75 
__UL⁄g
 
_‚ty≥s
;

78 
__UL⁄g
 
_is_cxa
;

81 #ifde‡
_REENT_SMALL


82 
	s_©exô
 {

83 
_©exô
 *
_√xt
;

84 
_öd
;

85 (*
_‚s
[
_ATEXIT_SIZE
])();

86 
_⁄_exô_¨gs
 * 
_⁄_exô_¨gs_±r
;

88 
	#_ATEXIT_INIT
 {
_NULL
, 0, {_NULL}, _NULL}

	)

90 
	s_©exô
 {

91 
_©exô
 *
_√xt
;

92 
_öd
;

94 (*
_‚s
[
_ATEXIT_SIZE
])();

95 
_⁄_exô_¨gs
 _on_exit_args;

97 
	#_ATEXIT_INIT
 {
_NULL
, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}

	)

100 #ifde‡
_REENT_GLOBAL_ATEXIT


101 
	#_REENT_INIT_ATEXIT


	)

103 
	#_REENT_INIT_ATEXIT
 \

104 
_NULL
, 
_ATEXIT_INIT
,

	)

114 
	s__sbuf
 {

115 *
_ba£
;

116 
_size
;

144 #ifde‡
_REENT_SMALL


150 
	s__sFILE_Áke
 {

151 *
_p
;

152 
_r
;

153 
_w
;

154 
_Êags
;

155 
_fûe
;

156 
__sbuf
 
_bf
;

157 
_lbfsize
;

159 
_ªít
 *
_d©a
;

165 
_VOID
 
_EXFUN
(
__söô
,(
_ªít
 *));

167 
	#_REENT_SMALL_CHECK_INIT
(
±r
) \

170 i‡((
±r
Ë&& !’å)->
__sdidöô
) \

171 
	`__söô
 (
±r
); \

173 0)

	)

175 
	#_REENT_SMALL_CHECK_INIT
(
±r
Ë

	)

178 
	s__sFILE
 {

179 *
	g_p
;

180 
	g_r
;

181 
	g_w
;

182 
	g_Êags
;

183 
	g_fûe
;

184 
__sbuf
 
	g_bf
;

185 
	g_lbfsize
;

187 #ifde‡
_REENT_SMALL


188 
_ªít
 *
	g_d©a
;

192 
_PTR
 
	g_cookõ
;

194 
_READ_WRITE_RETURN_TYPE
 
_EXFNPTR
(
_ªad
, (
_ªít
 *, 
_PTR
,

196 
_READ_WRITE_RETURN_TYPE
 
_EXFNPTR
(
_wrôe
, (
_ªít
 *, 
_PTR
,

198 
_Âos_t
 
_EXFNPTR
(
_£ek
, (
_ªít
 *, 
_PTR
, _fpos_t, ));

199 
_EXFNPTR
(
_˛o£
, (
_ªít
 *, 
_PTR
));

202 
__sbuf
 
	g_ub
;

203 *
	g_up
;

204 
	g_ur
;

207 
	g_ubuf
[3];

208 
	g_nbuf
[1];

211 
__sbuf
 
	g_lb
;

214 
	g_blksize
;

215 
_off_t
 
	g_off£t
;

217 #i‚de‡
_REENT_SMALL


218 
_ªít
 *
	g_d©a
;

221 #i‚de‡
__SINGLE_THREAD__


222 
_Êock_t
 
	g_lock
;

224 
_mb°©e_t
 
	g_mb°©e
;

225 
	g_Êags2
;

228 #ifde‡
__CUSTOM_FILE_IO__


231 
	~<sys/cu°om_fûe.h
>

234 #ifde‡
__LARGE64_FILES


235 
	s__sFILE64
 {

236 *
	g_p
;

237 
	g_r
;

238 
	g_w
;

239 
	g_Êags
;

240 
	g_fûe
;

241 
__sbuf
 
	g_bf
;

242 
	g_lbfsize
;

244 
_ªít
 *
	g_d©a
;

247 
_PTR
 
	g_cookõ
;

249 
_READ_WRITE_RETURN_TYPE
 
_EXFNPTR
(
_ªad
, (
_ªít
 *, 
_PTR
,

251 
_READ_WRITE_RETURN_TYPE
 
_EXFNPTR
(
_wrôe
, (
_ªít
 *, 
_PTR
,

253 
_Âos_t
 
_EXFNPTR
(
_£ek
, (
_ªít
 *, 
_PTR
, _fpos_t, ));

254 
_EXFNPTR
(
_˛o£
, (
_ªít
 *, 
_PTR
));

257 
__sbuf
 
	g_ub
;

258 *
	g_up
;

259 
	g_ur
;

262 
	g_ubuf
[3];

263 
	g_nbuf
[1];

266 
__sbuf
 
	g_lb
;

269 
	g_blksize
;

270 
	g_Êags2
;

272 
_off64_t
 
	g_off£t
;

273 
_Âos64_t
 
_EXFNPTR
(
_£ek64
, (
_ªít
 *, 
_PTR
, _fpos64_t, ));

275 #i‚de‡
__SINGLE_THREAD__


276 
_Êock_t
 
	g_lock
;

278 
_mb°©e_t
 
	g_mb°©e
;

280 
__sFILE64
 
	t__FILE
;

282 
__sFILE
 
	t__FILE
;

286 
	s_glue


288 
_glue
 *
	g_√xt
;

289 
	g_niobs
;

290 
__FILE
 *
	g_iobs
;

307 
	#_RAND48_SEED_0
 (0x330e)

	)

308 
	#_RAND48_SEED_1
 (0xabcd)

	)

309 
	#_RAND48_SEED_2
 (0x1234)

	)

310 
	#_RAND48_MULT_0
 (0xe66d)

	)

311 
	#_RAND48_MULT_1
 (0xdìc)

	)

312 
	#_RAND48_MULT_2
 (0x0005)

	)

313 
	#_RAND48_ADD
 (0x000b)

	)

314 
	s_ønd48
 {

315 
	g_£ed
[3];

316 
	g_mu…
[3];

317 
	g_add
;

318 #ifde‡
_REENT_SMALL


320 
__exãnsi⁄__
 
	g_ønd_√xt
;

325 
	#_REENT_EMERGENCY_SIZE
 25

	)

326 
	#_REENT_ASCTIME_SIZE
 26

	)

327 
	#_REENT_SIGNAL_SIZE
 24

	)

337 #ifde‡
_REENT_SMALL


339 
	s_m¥ec


342 
_Bigöt
 *
	g_ªsu…
;

343 
	g_ªsu…_k
;

344 
_Bigöt
 *
	g_p5s
;

345 
_Bigöt
 **
	g_‰ìli°
;

349 
	s_misc_ªít


352 *
	g_°πok_œ°
;

353 
_mb°©e_t
 
	g_mbÀn_°©e
;

354 
_mb°©e_t
 
	g_w˘omb_°©e
;

355 
_mb°©e_t
 
	g_mbtowc_°©e
;

356 
	g_l64a_buf
[8];

357 
	g_gëd©e_îr
;

358 
_mb°©e_t
 
	g_mbæí_°©e
;

359 
_mb°©e_t
 
	g_mbπowc_°©e
;

360 
_mb°©e_t
 
	g_mb§towcs_°©e
;

361 
_mb°©e_t
 
	g_w¸tomb_°©e
;

362 
_mb°©e_t
 
	g_wc§tombs_°©e
;

367 
	s_ªít


371 
	g_î∫o
;

376 
__FILE
 *
	g_°dö
, *
	g_°dout
, *
	g_°dîr
;

378 
	g_öc
;

380 *
	g_emîgícy
;

382 
	g__sdidöô
;

384 
	g_cuºít_ˇãg‹y
;

385 
_CONST
 *
	g_cuºít_loˇÀ
;

387 
_m¥ec
 *
	g_mp
;

389 
_EXFNPTR
(
__˛ónup
, (
_ªít
 *));

391 
	g_gamma_signgam
;

394 
	g_cvéí
;

395 *
	g_cvtbuf
;

397 
_ønd48
 *
	g_r48
;

398 
__tm
 *
	g_loˇ…ime_buf
;

399 *
	g_as˘ime_buf
;

402 (**(
	g_sig_func
))();

404 #i‚de‡
_REENT_GLOBAL_ATEXIT


406 
_©exô
 *
	g_©exô
;

407 
_©exô
 
	g_©exô0
;

410 
_glue
 
	g__sglue
;

411 
__FILE
 *
	g__sf
;

412 
_misc_ªít
 *
	g_misc
;

413 *
	g_sig«l_buf
;

416 c⁄° 
__sFILE_Áke
 
__sf_Áke_°dö
;

417 c⁄° 
__sFILE_Áke
 
__sf_Áke_°dout
;

418 c⁄° 
__sFILE_Áke
 
__sf_Áke_°dîr
;

420 
	#_REENT_INIT
(
v¨
) \

422 (
__FILE
 *)&
__sf_Áke_°dö
, \

423 (
__FILE
 *)&
__sf_Áke_°dout
, \

424 (
__FILE
 *)&
__sf_Áke_°dîr
, \

426 
_NULL
, \

430 
_NULL
, \

431 
_NULL
, \

434 
_NULL
, \

435 
_NULL
, \

436 
_NULL
, \

437 
_NULL
, \

438 
_NULL
, \

439 
_REENT_INIT_ATEXIT
 \

440 {
_NULL
, 0, _NULL}, \

441 
_NULL
, \

442 
_NULL
, \

443 
_NULL
 \

444 }

	)

446 
	#_REENT_INIT_PTR
(
v¨
) \

447 { 
	`mem£t
((
v¨
), 0, (*(var))); \

448 (
v¨
)->
_°dö
 = (
__FILE
 *)&
__sf_Áke_°dö
; \

449 (
v¨
)->
_°dout
 = (
__FILE
 *)&
__sf_Áke_°dout
; \

450 (
v¨
)->
_°dîr
 = (
__FILE
 *)&
__sf_Áke_°dîr
; \

451 (
v¨
)->
_cuºít_loˇÀ
 = "C"; \

452 }

	)

455 #i‡
DEBUG


456 
	~<as£π.h
>

457 
	#__ªít_as£π
(
x
Ë
	`as£π
(x)

	)

459 
	#__ªít_as£π
(
x
Ë(()0)

	)

462 #ifde‡
__CUSTOM_FILE_IO__


463 #îr‹ 
Cu°om
 
FILE
 
I
/
O
 
™d
 
_REENT_SMALL
 
nŸ
 
cuºíéy
 
suµ‹ãd
.

467 
	#_REENT_CHECK
(
v¨
, 
wh©
, 
ty≥
, 
size
, 
öô
) do { \

468 
_ªít
 *
_r
 = (
v¨
); \

469 i‡(
_r
->
wh©
 =
NULL
) { \

470 
_r
->
wh©
 = (
ty≥
)
	`mÆloc
(
size
); \

471 
	`__ªít_as£π
(
_r
->
wh©
); \

472 
öô
; \

474 } 0)

	)

476 
	#_REENT_CHECK_TM
(
v¨
) \

477 
	`_REENT_CHECK
(
v¨
, 
_loˇ…ime_buf
, 
__tm
 *,  *((var)->_localtime_buf), \

478  )

	)

480 
	#_REENT_CHECK_ASCTIME_BUF
(
v¨
) \

481 
	`_REENT_CHECK
(
v¨
, 
_as˘ime_buf
, *, 
_REENT_ASCTIME_SIZE
, \

482 
	`mem£t
((
v¨
)->
_as˘ime_buf
, 0, 
_REENT_ASCTIME_SIZE
))

	)

485 
	#_REENT_INIT_RAND48
(
v¨
) do { \

486 
_ªít
 *
_r
 = (
v¨
); \

487 
_r
->
_r48
->
_£ed
[0] = 
_RAND48_SEED_0
; \

488 
_r
->
_r48
->
_£ed
[1] = 
_RAND48_SEED_1
; \

489 
_r
->
_r48
->
_£ed
[2] = 
_RAND48_SEED_2
; \

490 
_r
->
_r48
->
_mu…
[0] = 
_RAND48_MULT_0
; \

491 
_r
->
_r48
->
_mu…
[1] = 
_RAND48_MULT_1
; \

492 
_r
->
_r48
->
_mu…
[2] = 
_RAND48_MULT_2
; \

493 
_r
->
_r48
->
_add
 = 
_RAND48_ADD
; \

494 
_r
->
_r48
->
_ønd_√xt
 = 1; \

495 } 0)

	)

496 
	#_REENT_CHECK_RAND48
(
v¨
) \

497 
	`_REENT_CHECK
(
v¨
, 
_r48
, 
_ønd48
 *,  *((v¨)->_r48), 
	`_REENT_INIT_RAND48
((v¨)))

	)

499 
	#_REENT_INIT_MP
(
v¨
) do { \

500 
_ªít
 *
_r
 = (
v¨
); \

501 
_r
->
_mp
->
_ªsu…_k
 = 0; \

502 
_r
->
_mp
->
_ªsu…
 = _r->_mp->
_p5s
 = 
_NULL
; \

503 
_r
->
_mp
->
_‰ìli°
 = 
_NULL
; \

504 } 0)

	)

505 
	#_REENT_CHECK_MP
(
v¨
) \

506 
	`_REENT_CHECK
(
v¨
, 
_mp
, 
_m¥ec
 *,  *((v¨)->_mp), 
	`_REENT_INIT_MP
(v¨))

	)

508 
	#_REENT_CHECK_EMERGENCY
(
v¨
) \

509 
	`_REENT_CHECK
(
v¨
, 
_emîgícy
, *, 
_REENT_EMERGENCY_SIZE
, )

	)

511 
	#_REENT_INIT_MISC
(
v¨
) do { \

512 
_ªít
 *
_r
 = (
v¨
); \

513 
_r
->
_misc
->
_°πok_œ°
 = 
_NULL
; \

514 
_r
->
_misc
->
_mbÀn_°©e
.
__cou¡
 = 0; \

515 
_r
->
_misc
->
_mbÀn_°©e
.
__vÆue
.
__wch
 = 0; \

516 
_r
->
_misc
->
_w˘omb_°©e
.
__cou¡
 = 0; \

517 
_r
->
_misc
->
_w˘omb_°©e
.
__vÆue
.
__wch
 = 0; \

518 
_r
->
_misc
->
_mbtowc_°©e
.
__cou¡
 = 0; \

519 
_r
->
_misc
->
_mbtowc_°©e
.
__vÆue
.
__wch
 = 0; \

520 
_r
->
_misc
->
_mbæí_°©e
.
__cou¡
 = 0; \

521 
_r
->
_misc
->
_mbæí_°©e
.
__vÆue
.
__wch
 = 0; \

522 
_r
->
_misc
->
_mbπowc_°©e
.
__cou¡
 = 0; \

523 
_r
->
_misc
->
_mbπowc_°©e
.
__vÆue
.
__wch
 = 0; \

524 
_r
->
_misc
->
_mb§towcs_°©e
.
__cou¡
 = 0; \

525 
_r
->
_misc
->
_mb§towcs_°©e
.
__vÆue
.
__wch
 = 0; \

526 
_r
->
_misc
->
_w¸tomb_°©e
.
__cou¡
 = 0; \

527 
_r
->
_misc
->
_w¸tomb_°©e
.
__vÆue
.
__wch
 = 0; \

528 
_r
->
_misc
->
_wc§tombs_°©e
.
__cou¡
 = 0; \

529 
_r
->
_misc
->
_wc§tombs_°©e
.
__vÆue
.
__wch
 = 0; \

530 
_r
->
_misc
->
_l64a_buf
[0] = '\0'; \

531 
_r
->
_misc
->
_gëd©e_îr
 = 0; \

532 } 0)

	)

533 
	#_REENT_CHECK_MISC
(
v¨
) \

534 
	`_REENT_CHECK
(
v¨
, 
_misc
, 
_misc_ªít
 *,  *((v¨)->_misc), 
	`_REENT_INIT_MISC
(v¨))

	)

536 
	#_REENT_CHECK_SIGNAL_BUF
(
v¨
) \

537 
	`_REENT_CHECK
(
v¨
, 
_sig«l_buf
, *, 
_REENT_SIGNAL_SIZE
, )

	)

539 
	#_REENT_SIGNGAM
(
±r
Ë(’å)->
_gamma_signgam
)

	)

540 
	#_REENT_RAND_NEXT
(
±r
Ë(’å)->
_r48
->
_ønd_√xt
)

	)

541 
	#_REENT_RAND48_SEED
(
±r
Ë(’å)->
_r48
->
_£ed
)

	)

542 
	#_REENT_RAND48_MULT
(
±r
Ë(’å)->
_r48
->
_mu…
)

	)

543 
	#_REENT_RAND48_ADD
(
±r
Ë(’å)->
_r48
->
_add
)

	)

544 
	#_REENT_MP_RESULT
(
±r
Ë(’å)->
_mp
->
_ªsu…
)

	)

545 
	#_REENT_MP_RESULT_K
(
±r
Ë(’å)->
_mp
->
_ªsu…_k
)

	)

546 
	#_REENT_MP_P5S
(
±r
Ë(’å)->
_mp
->
_p5s
)

	)

547 
	#_REENT_MP_FREELIST
(
±r
Ë(’å)->
_mp
->
_‰ìli°
)

	)

548 
	#_REENT_ASCTIME_BUF
(
±r
Ë(’å)->
_as˘ime_buf
)

	)

549 
	#_REENT_TM
(
±r
Ë(’å)->
_loˇ…ime_buf
)

	)

550 
	#_REENT_EMERGENCY
(
±r
Ë(’å)->
_emîgícy
)

	)

551 
	#_REENT_STRTOK_LAST
(
±r
Ë(’å)->
_misc
->
_°πok_œ°
)

	)

552 
	#_REENT_MBLEN_STATE
(
±r
Ë(’å)->
_misc
->
_mbÀn_°©e
)

	)

553 
	#_REENT_MBTOWC_STATE
(
±r
)(’å)->
_misc
->
_mbtowc_°©e
)

	)

554 
	#_REENT_WCTOMB_STATE
(
±r
)(’å)->
_misc
->
_w˘omb_°©e
)

	)

555 
	#_REENT_MBRLEN_STATE
(
±r
Ë(’å)->
_misc
->
_mbæí_°©e
)

	)

556 
	#_REENT_MBRTOWC_STATE
(
±r
Ë(’å)->
_misc
->
_mbπowc_°©e
)

	)

557 
	#_REENT_MBSRTOWCS_STATE
(
±r
Ë(’å)->
_misc
->
_mb§towcs_°©e
)

	)

558 
	#_REENT_WCRTOMB_STATE
(
±r
Ë(’å)->
_misc
->
_w¸tomb_°©e
)

	)

559 
	#_REENT_WCSRTOMBS_STATE
(
±r
Ë(’å)->
_misc
->
_wc§tombs_°©e
)

	)

560 
	#_REENT_L64A_BUF
(
±r
Ë(’å)->
_misc
->
_l64a_buf
)

	)

561 
	#_REENT_GETDATE_ERR_P
(
±r
Ë(&(’å)->
_misc
->
_gëd©e_îr
))

	)

562 
	#_REENT_SIGNAL_BUF
(
±r
Ë(’å)->
_sig«l_buf
)

	)

566 
	s_ªít


568 
	g_î∫o
;

573 
__FILE
 *
	g_°dö
, *
	g_°dout
, *
	g_°dîr
;

575 
	g_öc
;

576 
	g_emîgícy
[
_REENT_EMERGENCY_SIZE
];

578 
	g_cuºít_ˇãg‹y
;

579 
_CONST
 *
	g_cuºít_loˇÀ
;

581 
	g__sdidöô
;

583 
_EXFNPTR
(
__˛ónup
, (
_ªít
 *));

586 
_Bigöt
 *
	g_ªsu…
;

587 
	g_ªsu…_k
;

588 
_Bigöt
 *
	g_p5s
;

589 
_Bigöt
 **
	g_‰ìli°
;

592 
	g_cvéí
;

593 *
	g_cvtbuf
;

599 
	g_unu£d_ønd
;

600 * 
	g_°πok_œ°
;

601 
	g_as˘ime_buf
[
_REENT_ASCTIME_SIZE
];

602 
__tm
 
	g_loˇ…ime_buf
;

603 
	g_gamma_signgam
;

604 
__exãnsi⁄__
 
	g_ønd_√xt
;

605 
_ønd48
 
	g_r48
;

606 
_mb°©e_t
 
	g_mbÀn_°©e
;

607 
_mb°©e_t
 
	g_mbtowc_°©e
;

608 
_mb°©e_t
 
	g_w˘omb_°©e
;

609 
	g_l64a_buf
[8];

610 
	g_sig«l_buf
[
_REENT_SIGNAL_SIZE
];

611 
	g_gëd©e_îr
;

612 
_mb°©e_t
 
	g_mbæí_°©e
;

613 
_mb°©e_t
 
	g_mbπowc_°©e
;

614 
_mb°©e_t
 
	g_mb§towcs_°©e
;

615 
_mb°©e_t
 
	g_w¸tomb_°©e
;

616 
_mb°©e_t
 
	g_wc§tombs_°©e
;

617 
	g_h_î∫o
;

618 } 
	g_ªít
;

624 
	#_N_LISTS
 30

	)

625 * 
	g_√xtf
[
_N_LISTS
];

626 
	g_nmÆloc
[
_N_LISTS
];

627 } 
	g_unu£d
;

628 } 
	g_√w
;

630 #i‚de‡
_REENT_GLOBAL_ATEXIT


632 
_©exô
 *
	g_©exô
;

633 
_©exô
 
	g_©exô0
;

637 (**(
	g_sig_func
))();

642 
_glue
 
	g__sglue
;

643 
__FILE
 
	g__sf
[3];

646 
	#_REENT_INIT
(
v¨
) \

648 &(
v¨
).
__sf
[0], \

649 &(
v¨
).
__sf
[1], \

650 &(
v¨
).
__sf
[2], \

656 
_NULL
, \

657 
_NULL
, \

659 
_NULL
, \

660 
_NULL
, \

662 
_NULL
, \

666 
_NULL
, \

672 {
_RAND48_SEED_0
, 
_RAND48_SEED_1
, 
_RAND48_SEED_2
}, \

673 {
_RAND48_MULT_0
, 
_RAND48_MULT_1
, 
_RAND48_MULT_2
}, \

674 
_RAND48_ADD
 \

689 
_REENT_INIT_ATEXIT
 \

690 
_NULL
, \

691 {
_NULL
, 0, _NULL} \

692 }

	)

694 
	#_REENT_INIT_PTR
(
v¨
) \

695 { 
	`mem£t
((
v¨
), 0, (*(var))); \

696 (
v¨
)->
_°dö
 = &(v¨)->
__sf
[0]; \

697 (
v¨
)->
_°dout
 = &(v¨)->
__sf
[1]; \

698 (
v¨
)->
_°dîr
 = &(v¨)->
__sf
[2]; \

699 (
v¨
)->
_cuºít_loˇÀ
 = "C"; \

700 (
v¨
)->
_√w
.
_ªít
.
_ønd_√xt
 = 1; \

701 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_£ed
[0] = 
_RAND48_SEED_0
; \

702 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_£ed
[1] = 
_RAND48_SEED_1
; \

703 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_£ed
[2] = 
_RAND48_SEED_2
; \

704 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_mu…
[0] = 
_RAND48_MULT_0
; \

705 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_mu…
[1] = 
_RAND48_MULT_1
; \

706 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_mu…
[2] = 
_RAND48_MULT_2
; \

707 (
v¨
)->
_√w
.
_ªít
.
_r48
.
_add
 = 
_RAND48_ADD
; \

708 }

	)

710 
	#_REENT_CHECK_RAND48
(
±r
Ë

	)

711 
	#_REENT_CHECK_MP
(
±r
Ë

	)

712 
	#_REENT_CHECK_TM
(
±r
Ë

	)

713 
	#_REENT_CHECK_ASCTIME_BUF
(
±r
Ë

	)

714 
	#_REENT_CHECK_EMERGENCY
(
±r
Ë

	)

715 
	#_REENT_CHECK_MISC
(
±r
Ë

	)

716 
	#_REENT_CHECK_SIGNAL_BUF
(
±r
Ë

	)

718 
	#_REENT_SIGNGAM
(
±r
Ë(’å)->
_√w
.
_ªít
.
_gamma_signgam
)

	)

719 
	#_REENT_RAND_NEXT
(
±r
Ë(’å)->
_√w
.
_ªít
.
_ønd_√xt
)

	)

720 
	#_REENT_RAND48_SEED
(
±r
Ë(’å)->
_√w
.
_ªít
.
_r48
.
_£ed
)

	)

721 
	#_REENT_RAND48_MULT
(
±r
Ë(’å)->
_√w
.
_ªít
.
_r48
.
_mu…
)

	)

722 
	#_REENT_RAND48_ADD
(
±r
Ë(’å)->
_√w
.
_ªít
.
_r48
.
_add
)

	)

723 
	#_REENT_MP_RESULT
(
±r
Ë(’å)->
_ªsu…
)

	)

724 
	#_REENT_MP_RESULT_K
(
±r
Ë(’å)->
_ªsu…_k
)

	)

725 
	#_REENT_MP_P5S
(
±r
Ë(’å)->
_p5s
)

	)

726 
	#_REENT_MP_FREELIST
(
±r
Ë(’å)->
_‰ìli°
)

	)

727 
	#_REENT_ASCTIME_BUF
(
±r
Ë(’å)->
_√w
.
_ªít
.
_as˘ime_buf
)

	)

728 
	#_REENT_TM
(
±r
Ë(&’å)->
_√w
.
_ªít
.
_loˇ…ime_buf
)

	)

729 
	#_REENT_EMERGENCY
(
±r
Ë(’å)->
_emîgícy
)

	)

730 
	#_REENT_STRTOK_LAST
(
±r
Ë(’å)->
_√w
.
_ªít
.
_°πok_œ°
)

	)

731 
	#_REENT_MBLEN_STATE
(
±r
Ë(’å)->
_√w
.
_ªít
.
_mbÀn_°©e
)

	)

732 
	#_REENT_MBTOWC_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_mbtowc_°©e
)

	)

733 
	#_REENT_WCTOMB_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_w˘omb_°©e
)

	)

734 
	#_REENT_MBRLEN_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_mbæí_°©e
)

	)

735 
	#_REENT_MBRTOWC_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_mbπowc_°©e
)

	)

736 
	#_REENT_MBSRTOWCS_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_mb§towcs_°©e
)

	)

737 
	#_REENT_WCRTOMB_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_w¸tomb_°©e
)

	)

738 
	#_REENT_WCSRTOMBS_STATE
(
±r
)(’å)->
_√w
.
_ªít
.
_wc§tombs_°©e
)

	)

739 
	#_REENT_L64A_BUF
(
±r
Ë(’å)->
_√w
.
_ªít
.
_l64a_buf
)

	)

740 
	#_REENT_SIGNAL_BUF
(
±r
Ë(’å)->
_√w
.
_ªít
.
_sig«l_buf
)

	)

741 
	#_REENT_GETDATE_ERR_P
(
±r
Ë(&(’å)->
_√w
.
_ªít
.
_gëd©e_îr
))

	)

748 
	#_Kmax
 ( (
size_t
Ë<< 3)

	)

755 #i‚de‡
__ATTRIBUTE_IMPURE_PTR__


756 
	#__ATTRIBUTE_IMPURE_PTR__


	)

759 
_ªít
 *
_impuª_±r
 
__ATTRIBUTE_IMPURE_PTR__
;

760 
_ªít
 *
_CONST
 
_globÆ_impuª_±r
 
__ATTRIBUTE_IMPURE_PTR__
;

762 
_ª˛aim_ªít
 
_PARAMS
 ((
_ªít
 *));

766 #i‡
deföed
(
__DYNAMIC_REENT__
Ë&& !deföed(
__SINGLE_THREAD__
)

767 #i‚de‡
__gëªít


768 
_ªít
 * 
_EXFUN
(
__gëªít
, ());

770 
	#_REENT
 (
	`__gëªít
())

	)

772 
	#_REENT
 
_impuª_±r


	)

775 
	#_GLOBAL_REENT
 
_globÆ_impuª_±r


	)

777 #ifde‡
_REENT_GLOBAL_ATEXIT


778 
_©exô
 *
_globÆ_©exô
;

779 
	#_GLOBAL_ATEXIT
 
_globÆ_©exô


	)

781 
	#_GLOBAL_ATEXIT
 (
_GLOBAL_REENT
->
_©exô
)

	)

784 #ifde‡
__˝lu•lus


	@/usr/include/sys/stdio.h

11 #i‚de‡
_SYS_STDIO_H_


12 
	#_SYS_STDIO_H_


	)

14 
	~<sys/cdefs.h
>

15 
	~<sys/lock.h
>

20 #i‡!
deföed
(
__SINGLE_THREAD__
)

21 #i‡!
deföed
(
_Êockfûe
)

22 
	#_Êockfûe
(
Â
Ë({ i‡(!((Â)->
_Êags
 & 
__SSTR
)) \

23 
	`__cygwö_lock_lock
 ((
_LOCK_T
 *)&(
Â
)->
_lock
); })

	)

25 #i‡!
deföed
(
_·rylockfûe
)

26 
	#_·rylockfûe
(
Â
Ë(((Â)->
_Êags
 & 
__SSTR
) ? 0 : \

27 
	`__cygwö_lock_åylock
 ((
_LOCK_T
 *)&(
Â
)->
_lock
))

	)

29 #i‡!
deföed
(
_fu∆ockfûe
)

30 
	#_fu∆ockfûe
(
Â
Ë({ i‡(!((Â)->
_Êags
 & 
__SSTR
)) \

31 
	`__cygwö_lock_u∆ock
 ((
_LOCK_T
 *)&(
Â
)->
_lock
); })

	)

35 
__BEGIN_DECLS


37 
ssize_t
 
_EXFUN
(
gëlöe
, (**, 
size_t
 *, 
FILE
 *));

38 
ssize_t
 
_EXFUN
(
gëdñim
, (**, 
size_t
 *, , 
FILE
 *));

40 
	g__END_DECLS


	@/usr/include/sys/string.h

	@/usr/include/sys/types.h

18 #i‚de‡
_SYS_TYPES_H


20 
	~<_™si.h
>

22 #i‚de‡
__INTTYPES_DEFINED__


23 
	#__INTTYPES_DEFINED__


	)

25 
	~<machöe/_ty≥s.h
>

27 #i‡
deföed
(
__πems__
Ë|| deföed(
__XMK__
)

35 #i‡
___öt8_t_deföed


36 
__uöt8_t
 
	tu_öt8_t
;

38 #i‡
___öt16_t_deföed


39 
__uöt16_t
 
	tu_öt16_t
;

41 #i‡
___öt32_t_deföed


42 
__uöt32_t
 
	tu_öt32_t
;

45 #i‡
___öt64_t_deföed


46 
__uöt64_t
 
	tu_öt64_t
;

49 
__uöt64_t
 
	tu_quad_t
;

50 
__öt64_t
 
	tquad_t
;

51 
quad_t
 * 
	tqaddr_t
;

58 #i‚de‡
__√ed_öây≥s


60 
	#_SYS_TYPES_H


	)

61 
	~<sys/_ty≥s.h
>

63 #ifde‡
__i386__


64 #i‡
deföed
 (
GO32
Ë|| deföed (
__MSDOS__
)

65 
	#__MS_ty≥s__


	)

69 
	~<°ddef.h
>

70 
	~<machöe/ty≥s.h
>

79 #ifde‡
__GNUC__


80 
	#_ST_INT32
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
)))

	)

82 
	#_ST_INT32


	)

85 #i‚def 
_POSIX_SOURCE


87 
	#phyßdr
 
phyßdr_t


	)

88 
	#quad
 
quad_t


	)

90 #i‚de‡
_BSDTYPES_DEFINED


92 #i‚de‡
__u_ch¨_deföed


93 
	tu_ch¨
;

94 
	#__u_ch¨_deföed


	)

96 #i‚de‡
__u_sh‹t_deföed


97 
	tu_sh‹t
;

98 
	#__u_sh‹t_deföed


	)

100 #i‚de‡
__u_öt_deföed


101 
	tu_öt
;

102 
	#__u_öt_deföed


	)

104 #i‚de‡
__u_l⁄g_deföed


105 
	tu_l⁄g
;

106 
	#__u_l⁄g_deföed


	)

108 
	#_BSDTYPES_DEFINED


	)

111 
	tush‹t
;

112 
	tuöt
;

113 
	tul⁄g
;

116 #i‚de‡
__˛ock_t_deföed


117 
_CLOCK_T_
 
	t˛ock_t
;

118 
	#__˛ock_t_deföed


	)

121 #i‚de‡
__time_t_deföed


122 
_TIME_T_
 
	ttime_t
;

123 
	#__time_t_deföed


	)

126 #i‚de‡
__time•ec_deföed


127 
	#__time•ec_deföed


	)

130 
	stime•ec
 {

131 
time_t
 
	mtv_£c
;

132 
	mtv_n£c
;

136 
	sôimî•ec
 {

137 
time•ec
 
	mô_öãrvÆ
;

138 
time•ec
 
	mô_vÆue
;

141 #i‚de‡
__daddr_t_deföed


142 
	tdaddr_t
;

143 
	#__daddr_t_deföed


	)

145 #i‚de‡
__ˇddr_t_deföed


146 * 
	tˇddr_t
;

147 
	#__ˇddr_t_deföed


	)

150 #i‚de‡
__CYGWIN__


151 #i‡
deföed
(
__MS_ty≥s__
Ë|| deföed(
__πems__
) || \

152 
deföed
(
__•¨c__
Ë|| 
	$deföed
(
__SPU__
)

153 
	töo_t
;

155 
	töo_t
;

159 #ifde‡
__MS_ty≥s__


160 
	tvm_off£t_t
;

161 
	tvm_size_t
;

163 
	#__BIT_TYPES_DEFINED__


	)

165 sig√d 
	töt8_t
;

166 
	tu_öt8_t
;

167 
	töt16_t
;

168 
	tu_öt16_t
;

169 
	töt32_t
;

170 
	tu_öt32_t
;

171 
	töt64_t
;

172 
	tu_öt64_t
;

173 
öt32_t
 
	tªgi°î_t
;

183 #i‚de‡
__CYGWIN__


184 
_off_t
 
	toff_t
;

185 
__dev_t
 
	tdev_t
;

186 
__uid_t
 
	tuid_t
;

187 
__gid_t
 
	tgid_t
;

190 #i‡
	`deföed
(
__XMK__
)

191 sig√d 
	tpid_t
;

193 
	tpid_t
;

196 #i‡
	`deföed
(
__πems__
)

197 
_mode_t
 
	tmode_t
;

200 #i‚de‡
__CYGWIN__


201 
	tkey_t
;

203 
_ssize_t
 
	tssize_t
;

205 #i‡!
	`deföed
(
__CYGWIN__
Ë&& !deföed(
__πems__
)

206 #ifde‡
__MS_ty≥s__


207 * 
	taddr_t
;

208 
	tmode_t
;

210 #i‡
	`deföed
 (
__•¨c__
Ë&& !deföed (
__•¨c_v9__
)

211 #ifde‡
__svr4__


212 
	tmode_t
;

214 
	tmode_t
;

217 
	tmode_t
 
	t_ST_INT32
;

222 
	t∆ök_t
;

231 #i‡!(
	`deföed
 (
_POSIX_SOURCE
Ë|| deföed (
_WINSOCK_H
Ë|| deföed (
_WINSOCKAPI_
Ë|| deföed (
__USE_W32_SOCKETS
))

232 
	#_SYS_TYPES_FD_SET


	)

233 
	#NBBY
 8

	)

240 #i‚def 
FD_SETSIZE


241 
	#FD_SETSIZE
 64

	)

244 
	tfd_mask
;

245 
	#NFDBITS
 ( (
fd_mask
Ë* 
NBBY
Ë

	)

246 #i‚def 
howm™y


247 
	#howm™y
(
x
,
y
Ë(((x)+((y)-1))/(y))

	)

252 
	s_ty≥s_fd_£t
 {

253 
fd_mask
 
fds_bôs
[
	`howm™y
(
FD_SETSIZE
, 
NFDBITS
)];

254 } 
	t_ty≥s_fd_£t
;

256 
	#fd_£t
 
_ty≥s_fd_£t


	)

258 
	#FD_SET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] |(1L << (“Ë% NFDBITS)))

	)

259 
	#FD_CLR
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] &~(1L << (“Ë% NFDBITS)))

	)

260 
	#FD_ISSET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] & (1L << (“Ë% NFDBITS)))

	)

261 
	#FD_ZERO
(
p
Ë(
	`__exãnsi⁄__
 ()({ \

262 
size_t
 
__i
; \

263 *
__tmp
 = (*)
p
; \

264 
__i
 = 0; __ò<  (*(
p
)); ++__i) \

265 *
__tmp
++ = 0; \

266 
	}
}))

	)

270 #unde‡
__MS_ty≥s__


271 #unde‡
_ST_INT32


274 #i‚de‡
__˛ockid_t_deföed


275 
_CLOCKID_T_
 
	t˛ockid_t
;

276 
	#__˛ockid_t_deföed


	)

279 #i‚de‡
__timî_t_deföed


280 
_TIMER_T_
 
	ttimî_t
;

281 
	#__timî_t_deföed


	)

284 
	tu£c⁄ds_t
;

285 
	tsu£c⁄ds_t
;

287 
	~<sys/„©uªs.h
>

297 #i‡
deföed
(
_POSIX_THREADS
Ë&& !deföed(
__CYGWIN__
)

299 
	~<sys/sched.h
>

305 #i‡
deföed
(
__XMK__
)

306 
	t±hªad_t
;

308 
__uöt32_t
 
	t±hªad_t
;

312 
	#PTHREAD_SCOPE_PROCESS
 0

	)

313 
	#PTHREAD_SCOPE_SYSTEM
 1

	)

316 
	#PTHREAD_INHERIT_SCHED
 1

	)

319 
	#PTHREAD_EXPLICIT_SCHED
 2

	)

322 
	#PTHREAD_CREATE_DETACHED
 0

	)

323 
	#PTHREAD_CREATE_JOINABLE
 1

	)

325 #i‡
deföed
(
__XMK__
)

326 
	s±hªad_©å_s
 {

327 
	mc⁄ã¡i⁄sc›e
;

328 
sched_∑øm
 
	msched∑øm
;

329 
	mdëach°©e
;

330 *
	m°ackaddr
;

331 
size_t
 
	m°acksize
;

332 } 
	t±hªad_©å_t
;

334 
	#PTHREAD_STACK_MIN
 200

	)

338 
	mis_öôülized
;

339 *
	m°ackaddr
;

340 
	m°acksize
;

341 
	mc⁄ã¡i⁄sc›e
;

342 
	möhîôsched
;

343 
	mschedpﬁicy
;

344 
sched_∑øm
 
	msched∑øm
;

345 #i‡
deföed
(
__πems__
)

346 
size_t
 
	mgu¨dsize
;

350 #i‡
deföed
(
_POSIX_THREAD_CPUTIME
)

351 
	m˝utime_˛ock_Ælowed
;

353 
	mdëach°©e
;

355 } 
	t±hªad_©å_t
;

359 #i‡
deföed
(
_POSIX_THREAD_PROCESS_SHARED
)

362 
	#PTHREAD_PROCESS_PRIVATE
 0

	)

363 
	#PTHREAD_PROCESS_SHARED
 1

	)

368 #i‡
deföed
(
_POSIX_THREAD_PRIO_PROTECT
)

373 
	#PTHREAD_PRIO_NONE
 0

	)

374 
	#PTHREAD_PRIO_INHERIT
 1

	)

375 
	#PTHREAD_PRIO_PROTECT
 2

	)

378 #i‡
deföed
(
_UNIX98_THREAD_MUTEX_ATTRIBUTES
)

391 
	#PTHREAD_MUTEX_NORMAL
 0

	)

403 
	#PTHREAD_MUTEX_RECURSIVE
 1

	)

412 
	#PTHREAD_MUTEX_ERRORCHECK
 2

	)

422 
	#PTHREAD_MUTEX_DEFAULT
 3

	)

426 #i‡
deföed
(
__XMK__
)

427 
	t±hªad_muãx_t
;

430 
	mty≥
;

431 } 
	t±hªad_muãx©å_t
;

434 
__uöt32_t
 
	t±hªad_muãx_t
;

437 
	mis_öôülized
;

438 #i‡
deföed
(
_POSIX_THREAD_PROCESS_SHARED
)

439 
	m¥o˚ss_sh¨ed
;

441 #i‡
deföed
(
_POSIX_THREAD_PRIO_PROTECT
)

442 
	m¥io_˚ûög
;

443 
	m¥Ÿocﬁ
;

445 #i‡
deföed
(
_UNIX98_THREAD_MUTEX_ATTRIBUTES
)

446 
	mty≥
;

448 
	mªcursive
;

449 } 
	t±hªad_muãx©å_t
;

454 
__uöt32_t
 
	t±hªad_c⁄d_t
;

457 
	mis_öôülized
;

458 #i‡
deföed
(
_POSIX_THREAD_PROCESS_SHARED
)

459 
	m¥o˚ss_sh¨ed
;

461 } 
	t±hªad_c⁄d©å_t
;

465 
__uöt32_t
 
	t±hªad_key_t
;

468 
	mis_öôülized
;

469 
	möô_execuãd
;

470 } 
	t±hªad_⁄˚_t
;

472 #i‡
deföed
 (
__CYGWIN__
)

473 
	~<cygwö/ty≥s.h
>

479 #i‡
deföed
(
_POSIX_BARRIERS
)

480 
__uöt32_t
 
	t±hªad_b¨rõr_t
;

482 
	mis_öôülized
;

483 #i‡
deföed
(
_POSIX_THREAD_PROCESS_SHARED
)

484 
	m¥o˚ss_sh¨ed
;

486 } 
	t±hªad_b¨rõøâr_t
;

491 #i‡!
deföed
 (
__CYGWIN__
)

492 #i‡
deföed
(
_POSIX_SPIN_LOCKS
)

493 
__uöt32_t
 
	t±hªad_•ölock_t
;

498 #i‡
deföed
(
_POSIX_READER_WRITER_LOCKS
)

499 
__uöt32_t
 
	t±hªad_rwlock_t
;

501 
	mis_öôülized
;

502 #i‡
deföed
(
_POSIX_THREAD_PROCESS_SHARED
)

503 
	m¥o˚ss_sh¨ed
;

505 } 
	t±hªad_rwlock©å_t
;

511 #unde‡
__√ed_öây≥s


	@/usr/include/assert.h

5 #ifde‡
__˝lu•lus


9 
	~"_™si.h
"

11 #unde‡
as£π


13 #ifde‡
NDEBUG


14 
	#as£π
(
__e
Ë(()0)

	)

16 
	#as£π
(
__e
Ë((__eË? ()0 : 
	`__as£π_func
 (
__FILE__
, 
__LINE__
, \

17 
__ASSERT_FUNC
, #__e))

	)

19 #i‚de‡
__ASSERT_FUNC


21 #i‡
deföed
 
__˝lu•lus
 && deföed 
__GNUC__


22 
	#__ASSERT_FUNC
 
__PRETTY_FUNCTION__


	)

25 #ñi‡
__STDC_VERSION__
 >= 199901L

26 
	#__ASSERT_FUNC
 
__func__


	)

29 #ñi‡
__GNUC__
 >= 2

30 
	#__ASSERT_FUNC
 
__FUNCTION__


	)

34 
	#__ASSERT_FUNC
 ((*Ë0)

	)

39 
_EXFUN
(
__as£π
, (const *, , const *)

40 
_ATTRIBUTE
 ((
__n‹ëu∫__
)));

41 
_EXFUN
(
__as£π_func
, (const *, , const *, const *)

42 
_ATTRIBUTE
 ((
__n‹ëu∫__
)));

44 #i‡
__STDC_VERSION__
 >201112L && !
deföed
 
__˝lu•lus


45 
	#°©ic_as£π
 
_Sètic_as£π


	)

48 #ifde‡
__˝lu•lus


	@/usr/include/cygwin/types.h

12 #i‚de‡
_CYGWIN_TYPES_H


13 
	#_CYGWIN_TYPES_H


	)

15 #ifde‡
__˝lu•lus


20 
	~<°döt.h
>

21 
	~<ídün.h
>

22 
	~<bôs/w‹dsize.h
>

24 #i‚de‡
__time•ec_t_deföed


25 
	#__time•ec_t_deföed


	)

26 
time•ec
 
	ttime•ec_t
;

29 #i‚de‡
__time°ruc_t_deföed


30 
	#__time°ruc_t_deföed


	)

31 
time•ec
 
	ttime°ruc_t
;

34 #i‚de‡
__off_t_deföed


35 
	#__off_t_deföed


	)

37 #i‡
__WORDSIZE
 == 64

38 
_off_t
 
	toff_t
;

40 
_off64_t
 
	toff_t
;

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__dev_t_deföed


47 
	#__dev_t_deföed


	)

48 
__öt16_t
 
	t__dev16_t
;

49 
__uöt32_t
 
	tdev_t
;

52 #i‚de‡
__blksize_t_deföed


53 
	#__blksize_t_deföed


	)

54 
__öt32_t
 
	tblksize_t
;

57 #i‚de‡
__blk˙t_t_deföed


58 
	#__blk˙t_t_deföed


	)

59 
__öt32_t
 
	t__blk˙t32_t
;

60 
__öt64_t
 
	tblk˙t_t
;

63 #i‚de‡
__fsblk˙t_t_deföed


64 
	#__fsblk˙t_t_deföed


	)

66 
	tfsblk˙t_t
;

69 #i‚de‡
__fsfû˙t_t_deföed


70 
	#__fsfû˙t_t_deföed


	)

72 
	tfsfû˙t_t
;

75 #i‚de‡
__uid_t_deföed


76 
	#__uid_t_deföed


	)

77 
	t__uid16_t
;

78 
__uöt32_t
 
	tuid_t
;

81 #i‚de‡
__gid_t_deföed


82 
	#__gid_t_deföed


	)

83 
	t__gid16_t
;

84 
__uöt32_t
 
	tgid_t
;

87 #i‚de‡
__öo_t_deföed


88 
	#__öo_t_deföed


	)

89 #i‚de‡
__x86_64__


90 
__uöt32_t
 
	t__öo32_t
;

92 
__uöt64_t
 
	töo_t
;

96 #i‚de‡
__id_t_deföed


97 
	#__id_t_deföed


	)

98 
__uöt32_t
 
	tid_t
;

101 #i‡
deföed
 (
__INSIDE_CYGWIN__
Ë&& !deföed (
__x86_64__
)

102 
	s__Êock32
 {

103 
l_ty≥
;

104 
l_whí˚
;

105 
_off_t
 
l_°¨t
;

106 
_off_t
 
l_Àn
;

107 
l_pid
;

108 
l_xxx
;

112 
	sÊock
 {

113 
l_ty≥
;

114 
l_whí˚
;

115 
off_t
 
l_°¨t
;

116 
off_t
 
l_Àn
;

117 
pid_t
 
l_pid
;

120 #i‚de‡
__key_t_deföed


121 
	#__key_t_deföed


	)

122 
	tkey_t
;

125 #i‚de‡
__BIT_TYPES_DEFINED


126 
	#__BIT_TYPES_DEFINED__
 1

	)

128 #i‚de‡
__vm_off£t_t_deföed


129 
	#__vm_off£t_t_deföed


	)

130 
	tvm_off£t_t
;

133 #i‚de‡
__vm_size_t_deföed


134 
	#__vm_size_t_deföed


	)

135 
	tvm_size_t
;

138 #i‚de‡
__vm_obje˘_t_deföed


139 
	#__vm_obje˘_t_deföed


	)

140 *
	tvm_obje˘_t
;

143 #i‚de‡
__u_öt8_t_deföed


144 
	#__u_öt8_t_deföed


	)

145 
	tu_öt8_t
;

147 #i‚de‡
__u_öt16_t_deföed


148 
	#__u_öt16_t_deföed


	)

149 
__uöt16_t
 
	tu_öt16_t
;

151 #i‚de‡
__u_öt32_t_deföed


152 
	#__u_öt32_t_deföed


	)

153 
__uöt32_t
 
	tu_öt32_t
;

155 #i‚de‡
__u_öt64_t_deföed


156 
	#__u_öt64_t_deföed


	)

157 
__uöt64_t
 
	tu_öt64_t
;

160 #i‚de‡
__ªgi°î_t_deföed


161 
	#__ªgi°î_t_deföed


	)

162 
__öt32_t
 
	tªgi°î_t
;

165 #i‚de‡
__addr_t_deföed


166 
	#__addr_t_deföed


	)

167 *
	taddr_t
;

170 #i‚de‡
__mode_t_deföed


171 
	#__mode_t_deföed


	)

172 
	tmode_t
;

176 #i‡!
deföed
(
__INSIDE_CYGWIN__
Ë|| !deföed(
__˝lu•lus
)

178 
	s__±hªad_t
 {
__dummy
;} *
	t±hªad_t
;

179 
	s__±hªad_muãx_t
 {
__dummy
;} *
	t±hªad_muãx_t
;

181 
	s__±hªad_key_t
 {
__dummy
;} *
	t±hªad_key_t
;

182 
	s__±hªad_©å_t
 {
__dummy
;} *
	t±hªad_©å_t
;

183 
	s__±hªad_muãx©å_t
 {
__dummy
;} *
	t±hªad_muãx©å_t
;

184 
	s__±hªad_c⁄d©å_t
 {
__dummy
;} *
	t±hªad_c⁄d©å_t
;

185 
	s__±hªad_c⁄d_t
 {
__dummy
;} *
	t±hªad_c⁄d_t
;

190 
±hªad_muãx_t
 
muãx
;

191 
°©e
;

193 
	t±hªad_⁄˚_t
;

194 
	s__±hªad_•ölock_t
 {
__dummy
;} *
	t±hªad_•ölock_t
;

195 
	s__±hªad_rwlock_t
 {
__dummy
;} *
	t±hªad_rwlock_t
;

196 
	s__±hªad_rwlock©å_t
 {
__dummy
;} *
	t±hªad_rwlock©å_t
;

202 
˛ass
 
	t±hªad
 *
	t±hªad_t
;

203 
˛ass
 
	t±hªad_muãx
 *
	t±hªad_muãx_t
;

204 
˛ass
 
	t±hªad_key
 *
	t±hªad_key_t
;

205 
˛ass
 
	t±hªad_©å
 *
	t±hªad_©å_t
;

206 
˛ass
 
	t±hªad_muãx©å
 *
	t±hªad_muãx©å_t
;

207 
˛ass
 
	t±hªad_c⁄d©å
 *
	t±hªad_c⁄d©å_t
;

208 
˛ass
 
	t±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

209 
˛ass
 
	t±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

210 
˛ass
 
	t±hªad_•ölock
 *
	t±hªad_•ölock_t
;

211 
˛ass
 
	t±hªad_rwlock
 *
	t±hªad_rwlock_t
;

212 
˛ass
 
	t±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

215 
˛ass
 
	t£m≠h‹e
 *
	t£m_t
;

219 
	~<sys/sysma¸os.h
>

221 #ifde‡
__˝lu•lus


	@/usr/include/machine/_types.h

5 #i‚de‡
_MACHINE__TYPES_H


6 
	#_MACHINE__TYPES_H


	)

7 
	~<machöe/_deÁu…_ty≥s.h
>

	@/usr/include/machine/types.h

1 #i‚def 
_MACHTYPES_H_


2 
	#_MACHTYPES_H_


	)

9 #i‡
deföed
(
__πems__
)

10 
	~<machöe/_ty≥s.h
>

13 
	#_CLOCK_T_
 

	)

14 
	#_TIME_T_
 

	)

15 
	#_CLOCKID_T_
 

	)

16 
	#_TIMER_T_
 

	)

18 #i‚de‡
_HAVE_SYSTYPES


19 
	t__off_t
;

20 
	t__pid_t
;

21 #ifde‡
__GNUC__


22 
__exãnsi⁄__
 
	t__loff_t
;

24 
	t__loff_t
;

	@/usr/include/newlib.h

6 #i‚de‡
__NEWLIB_H__


8 
	#__NEWLIB_H__
 1

	)

14 
	#_NEWLIB_VERSION
 "2.0.0"

	)

18 
	#_WANT_IO_C99_FORMATS
 1

	)

21 
	#_WANT_IO_LONG_LONG
 1

	)

27 
	#_WANT_IO_LONG_DOUBLE
 1

	)

30 
	#_WANT_IO_POS_ARGS
 1

	)

37 
	#_MB_CAPABLE
 1

	)

40 
	#_MB_LEN_MAX
 8

	)

54 
	#_ATEXIT_DYNAMIC_ALLOC
 1

	)

57 
	#_HAVE_LONG_DOUBLE
 1

	)

63 
	#_FVWRITE_IN_STREAMIO
 1

	)

66 
	#_FSEEK_OPTIMIZATION
 1

	)

69 
	#_WIDE_ORIENT
 1

	)

72 
	#_UNBUF_STREAM_OPT
 1

	)

	@/usr/include/stdint.h

11 #i‚de‡
_STDINT_H


12 
	#_STDINT_H


	)

14 
	~<bôs/w‹dsize.h
>

18 #i‚de‡
__öt8_t_deföed


19 
	#__öt8_t_deföed


	)

20 sig√d 
	töt8_t
;

21 
	töt16_t
;

22 
	töt32_t
;

23 #i‡
__WORDSIZE
 == 64

24 
	töt64_t
;

26 
	töt64_t
;

30 
	tuöt8_t
;

31 
	tuöt16_t
;

32 #i‚de‡
__uöt32_t_deföed


33 
	#__uöt32_t_deföed


	)

34 
	tuöt32_t
;

36 #i‡
__WORDSIZE
 == 64

37 
	tuöt64_t
;

39 
	tuöt64_t
;

44 sig√d 
	töt_Àa°8_t
;

45 
	töt_Àa°16_t
;

46 
	töt_Àa°32_t
;

47 #i‡
__WORDSIZE
 == 64

48 
	töt_Àa°64_t
;

50 
	töt_Àa°64_t
;

53 
	tuöt_Àa°8_t
;

54 
	tuöt_Àa°16_t
;

55 
	tuöt_Àa°32_t
;

56 #i‡
__WORDSIZE
 == 64

57 
	tuöt_Àa°64_t
;

59 
	tuöt_Àa°64_t
;

64 sig√d 
	töt_Á°8_t
;

65 #i‡
__WORDSIZE
 == 64

66 
	töt_Á°16_t
;

67 
	töt_Á°32_t
;

68 
	töt_Á°64_t
;

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

75 
	tuöt_Á°8_t
;

76 #i‡
__WORDSIZE
 == 64

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
	tuöt_Á°64_t
;

81 
	tuöt_Á°16_t
;

82 
	tuöt_Á°32_t
;

83 
	tuöt_Á°64_t
;

88 #i‚de‡
__öçå_t_deföed


89 
	#__öçå_t_deföed


	)

90 #i‡
__WORDSIZE
 == 64

91 
	töçå_t
;

93 
	töçå_t
;

96 #i‡
__WORDSIZE
 == 64

97 
	tuöçå_t
;

99 
	tuöçå_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tötmax_t
;

106 
	tuötmax_t
;

108 
	tötmax_t
;

109 
	tuötmax_t
;

114 #i‡!
deföed
 (
__˝lu•lus
Ë|| deföed (
__STDC_LIMIT_MACROS
) \

115 || 
	$deföed
 (
__INSIDE_CYGWIN__
)

117 #i‡
__x86_64__


118 
	#__I64
(
n
Ë¿## 
L


	)

119 
	#__U64
(
n
Ë¿## 
UL


	)

121 
	#__I64
(
n
Ë¿## 
LL


	)

122 
	#__U64
(
n
Ë¿## 
ULL


	)

127 
	#INT8_MIN
 (-128)

	)

128 
	#INT16_MIN
 (-32768)

	)

129 
	#INT32_MIN
 (-2147483647 - 1)

	)

130 
	#INT64_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

132 
	#INT8_MAX
 (127)

	)

133 
	#INT16_MAX
 (32767)

	)

134 
	#INT32_MAX
 (2147483647)

	)

135 
	#INT64_MAX
 (
	`__I64
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__U64
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32768)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647 - 1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__I64
(9223372036854775807))

	)

154 
	#UINT_LEAST8_MAX
 (255)

	)

155 
	#UINT_LEAST16_MAX
 (65535)

	)

156 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

157 
	#UINT_LEAST64_MAX
 (
	`__U64
(18446744073709551615))

	)

161 
	#INT_FAST8_MIN
 (-128)

	)

162 #i‡
__WORDSIZE
 == 64

163 
	#INT_FAST16_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

164 
	#INT_FAST32_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

166 
	#INT_FAST16_MIN
 (-2147483647 - 1)

	)

167 
	#INT_FAST32_MIN
 (-2147483647 - 1)

	)

169 
	#INT_FAST64_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

171 
	#INT_FAST8_MAX
 (127)

	)

172 #i‡
__WORDSIZE
 == 64

173 
	#INT_FAST16_MAX
 (
	`__I64
(9223372036854775807))

	)

174 
	#INT_FAST32_MAX
 (
	`__I64
(9223372036854775807))

	)

176 
	#INT_FAST16_MAX
 (2147483647)

	)

177 
	#INT_FAST32_MAX
 (2147483647)

	)

179 
	#INT_FAST64_MAX
 (
	`__I64
(9223372036854775807))

	)

181 
	#UINT_FAST8_MAX
 (255)

	)

182 #i‡
__WORDSIZE
 == 64

183 
	#UINT_FAST16_MAX
 (
	`__U64
(18446744073709551615))

	)

184 
	#UINT_FAST32_MAX
 (
	`__U64
(18446744073709551615))

	)

186 
	#UINT_FAST16_MAX
 (4294967295U)

	)

187 
	#UINT_FAST32_MAX
 (4294967295U)

	)

189 
	#UINT_FAST64_MAX
 (
	`__U64
(18446744073709551615))

	)

193 #i‡
__WORDSIZE
 == 64

194 
	#INTPTR_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

195 
	#INTPTR_MAX
 (
	`__I64
(9223372036854775807))

	)

196 
	#UINTPTR_MAX
 (
	`__U64
(18446744073709551615))

	)

198 
	#INTPTR_MIN
 (-2147483647 - 1)

	)

199 
	#INTPTR_MAX
 (2147483647)

	)

200 
	#UINTPTR_MAX
 (4294967295U)

	)

205 
	#INTMAX_MIN
 (-
	`__I64
(9223372036854775807Ë- 1)

	)

206 
	#INTMAX_MAX
 (
	`__I64
(9223372036854775807))

	)

207 
	#UINTMAX_MAX
 (
	`__U64
(18446744073709551615))

	)

211 #i‚de‡
PTRDIFF_MIN


212 #i‡
__WORDSIZE
 == 64

213 
	#PTRDIFF_MIN
 (-9223372036854775807L - 1)

	)

214 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647 - 1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

221 #i‚de‡
SIG_ATOMIC_MIN


222 
	#SIG_ATOMIC_MIN
 (-2147483647 - 1)

	)

224 #i‚de‡
SIG_ATOMIC_MAX


225 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

228 #i‚de‡
SIZE_MAX


229 #i‡
__WORDSIZE
 == 64

230 
	#SIZE_MAX
 (18446744073709551615UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

236 #i‚de‡
WCHAR_MIN


237 #ifde‡
__WCHAR_MIN__


238 
	#WCHAR_MIN
 
__WCHAR_MIN__


	)

239 
	#WCHAR_MAX
 
__WCHAR_MAX__


	)

241 
	#WCHAR_MIN
 (0)

	)

242 
	#WCHAR_MAX
 (65535)

	)

246 #i‚de‡
WINT_MIN


247 
	#WINT_MIN
 0U

	)

248 
	#WINT_MAX
 (4294967295U)

	)

255 #i‡!
	`deföed
 (
__˝lu•lus
Ë|| deföed (
__STDC_CONSTANT_MACROS
) \

256 || 
	$deföed
 (
__INSIDE_CYGWIN__
)

260 
	#INT8_C
(
x
Ë
	)
x

261 
	#INT16_C
(
x
Ë
	)
x

262 
	#INT32_C
(
x
Ë
	)
x

263 #i‡
__WORDSIZE
 == 64

264 
	#INT64_C
(
x
Ëx ## 
L


	)

266 
	#INT64_C
(
x
Ëx ## 
LL


	)

269 
	#UINT8_C
(
x
Ë
	)
x

270 
	#UINT16_C
(
x
Ë
	)
x

271 
	#UINT32_C
(
x
Ëx ## 
U


	)

272 #i‡
__WORDSIZE
 == 64

273 
	#UINT64_C
(
x
Ëx ## 
UL


	)

275 
	#UINT64_C
(
x
Ëx ## 
ULL


	)

280 #i‡
__WORDSIZE
 == 64

281 
	#INTMAX_C
(
x
Ëx ## 
L


	)

282 
	#UINTMAX_C
(
x
Ëx ## 
UL


	)

284 
	#INTMAX_C
(
x
Ëx ## 
LL


	)

285 
	#UINTMAX_C
(
x
Ëx ## 
ULL


	)

	@/usr/include/sys/_types.h

9 #i‚def 
_SYS__TYPES_H


10 
	#_SYS__TYPES_H


	)

12 
	~<machöe/_ty≥s.h
>

13 
	~<sys/lock.h
>

15 #i‚de‡
__off_t_deföed


16 
	t_off_t
;

19 #i‡
deföed
(
__πems__
)

21 
	t__dev_t
;

23 #i‚de‡
__dev_t_deföed


24 
	t__dev_t
;

28 #i‚de‡
__uid_t_deföed


29 
	t__uid_t
;

31 #i‚de‡
__gid_t_deföed


32 
	t__gid_t
;

35 #i‚de‡
__off64_t_deföed


36 
__exãnsi⁄__
 
	t_off64_t
;

43 #i‚de‡
__Âos_t_deföed


44 
	t_Âos_t
;

48 #ifde‡
__LARGE64_FILES


49 #i‚de‡
__Âos64_t_deföed


50 
_off64_t
 
	t_Âos64_t
;

54 #i‚de‡
__ssize_t_deföed


55 #ifde‡
__SIZE_TYPE__


59 sig√d

	)

60 
__SIZE_TYPE__
 
	t_ssize_t
;

63 #i‡
deföed
(
__INT_MAX__
) && __INT_MAX__ == 2147483647

64 
	t_ssize_t
;

66 
	t_ssize_t
;

71 
	#__√ed_wöt_t


	)

72 
	~<°ddef.h
>

74 #i‚de‡
__mb°©e_t_deföed


78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t_mb°©e_t
;

87 #i‚de‡
__Êock_t_deföed


88 
_LOCK_RECURSIVE_T
 
	t_Êock_t
;

91 #i‚de‡
__ic⁄v_t_deföed


93 *
	t_ic⁄v_t
;

	@/usr/include/sys/config.h

1 #i‚de‡
__SYS_CONFIG_H__


2 
	#__SYS_CONFIG_H__


	)

4 
	~<machöe/õìÂ.h
>

5 
	~<sys/„©uªs.h
>

7 #ifde‡
__Ørch64__


8 
	#MALLOC_ALIGNMENT
 16

	)

12 #i‡
deföed
(
__H8500__
Ë|| deföed(
__W65__
)

13 
	#__SMALL_BITFIELDS


	)

16 
	#H8300
 1

	)

20 #i‡
deföed
(
__Z8001__
Ë|| deföed(
__Z8002__
Ë|| deföed(
__H8500__
Ë|| deföed(
__W65__
Ë|| deföed (
__mn10200__
Ë|| deföed (
__AVR__
)

22 #unde‡
INT_MAX


23 #unde‡
UINT_MAX


24 
	#INT_MAX
 32767

	)

25 
	#UINT_MAX
 65535

	)

28 #i‡
deföed
 (
__H8300__
Ë|| deföed (
__H8300H__
Ë|| deföed(
__H8300S__
Ë|| deföed (
__H8300SX__
)

29 
	#__SMALL_BITFIELDS


	)

30 
	#H8300
 1

	)

31 #unde‡
INT_MAX


32 #unde‡
UINT_MAX


33 
	#INT_MAX
 
__INT_MAX__


	)

34 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

37 #i‡(
deföed
(
__CR16__
Ë|| deföed(
__CR16C__
Ë||deföed(
__CR16CP__
))

38 #i‚de‡
__INT32__


39 
	#__SMALL_BITFIELDS


	)

40 #unde‡
INT_MAX


41 #unde‡
UINT_MAX


42 
	#INT_MAX
 32767

	)

43 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

45 #unde‡
INT_MAX


46 #unde‡
UINT_MAX


47 
	#INT_MAX
 2147483647

	)

48 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

53 #i‡
deföed
 (
__xc16x__
Ë|| deföed (
__xc16xL__
Ë|| deföed (
__xc16xS__
)

54 
	#__SMALL_BITFIELDS


	)

57 #ifde‡
__W65__


58 
	#__SMALL_BITFIELDS


	)

61 #i‡
deföed
(
__D10V__
)

62 
	#__SMALL_BITFIELDS


	)

63 #unde‡
INT_MAX


64 #unde‡
UINT_MAX


65 
	#INT_MAX
 
__INT_MAX__


	)

66 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

67 
	#_POINTER_INT
 

	)

70 #i‡
deföed
(
__mc68hc11__
Ë|| deföed(
__mc68hc12__
Ë|| deföed(
__mc68hc1x__
)

71 #unde‡
INT_MAX


72 #unde‡
UINT_MAX


73 
	#INT_MAX
 
__INT_MAX__


	)

74 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

75 
	#_POINTER_INT
 

	)

78 #ifde‡
___AM29K__


79 
	#_FLOAT_RET
 

	)

82 #ifde‡
__i386__


83 #i‚de‡
__unix__


85 
	#_FLOAT_RET
 

	)

87 #i‡
deföed
(
__löux__
Ë|| deföed(
__RDOS__
)

89 
	#__DYNAMIC_REENT__


	)

90 
	#HAVE_GETDATE


	)

91 
	#_HAVE_SYSTYPES


	)

92 
	#_READ_WRITE_RETURN_TYPE
 
_ssize_t


	)

93 
	#__LARGE64_FILES
 1

	)

95 
	#_LARGEFILE64_SOURCE
 1

	)

99 #ifde‡
__mn10200__


100 
	#__SMALL_BITFIELDS


	)

103 #ifde‡
__AVR__


104 
	#__SMALL_BITFIELDS


	)

105 
	#_POINTER_INT
 

	)

108 #ifde‡
__v850


109 
	#__ATTRIBUTE_IMPURE_PTR__
 
	`__©åibuã__
((
__sda__
))

	)

113 #i‡
deföed
(
__PPC__
)

114 #i‡
deföed
(
_CALL_SYSV
)

115 
	#__ATTRIBUTE_IMPURE_PTR__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".sd©a")))

	)

117 #ifde‡
__SPE__


118 
	#_LONG_DOUBLE
 

	)

123 #i‡
deföed
 (
__MICROBLAZE__
)

124 #i‚de‡
_REENT_SMALL


125 
	#_REENT_SMALL


	)

128 #ifde‡
__XMK__


129 
	#_UNIX98_THREAD_MUTEX_ATTRIBUTES


	)

133 #i‡
deföed
(
__mùs__
Ë&& !deföed(
__πems__
)

134 
	#__ATTRIBUTE_IMPURE_PTR__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".sd©a")))

	)

137 #ifde‡
__x°‹my16__


138 
	#__SMALL_BITFIELDS


	)

139 #unde‡
INT_MAX


140 #unde‡
UINT_MAX


141 
	#INT_MAX
 
__INT_MAX__


	)

142 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

143 
	#MALLOC_ALIGNMENT
 8

	)

144 
	#_POINTER_INT
 

	)

145 
	#__BUFSIZ__
 16

	)

146 
	#_REENT_SMALL


	)

149 #i‡
deföed
 
__MSP430__


150 #i‚de‡
_REENT_SMALL


151 
	#_REENT_SMALL


	)

154 
	#__SMALL_BITFIELDS


	)

156 #ifde‡
__MSP430X_LARGE__


157 
	#_POINTER_INT
 

	)

159 
	#_POINTER_INT
 

	)

163 #ifde‡
__m32c__


164 
	#__SMALL_BITFIELDS


	)

165 #unde‡
INT_MAX


166 #unde‡
UINT_MAX


167 
	#INT_MAX
 
__INT_MAX__


	)

168 
	#UINT_MAX
 (
__INT_MAX__
 * 2U + 1)

	)

169 
	#MALLOC_ALIGNMENT
 8

	)

170 #i‡
deföed
(
__r8c_˝u__
Ë|| deföed(
__m16c_˝u__
)

171 
	#_POINTER_INT
 

	)

173 
	#_POINTER_INT
 

	)

175 
	#__BUFSIZ__
 16

	)

176 
	#_REENT_SMALL


	)

179 #ifde‡
__SPU__


180 
	#MALLOC_ALIGNMENT
 16

	)

181 
	#__CUSTOM_FILE_IO__


	)

189 #i‚de‡
__INT_MAX__


190 #ifde‡
INT_MAX


191 
	#__INT_MAX__
 
INT_MAX


	)

193 
	#__INT_MAX__
 2147483647

	)

197 #i‚de‡
__LONG_MAX__


198 #ifde‡
LONG_MAX


199 
	#__LONG_MAX__
 
LONG_MAX


	)

201 #i‡
deföed
 (
__Æpha__
Ë|| (deföed (
__•¨c__
Ë&& deföed(
__¨ch64__
)) \

202 || 
	$deföed
 (
__•¨cv9
)

203 
	#__LONG_MAX__
 9223372036854775807L

	)

205 
	#__LONG_MAX__
 2147483647L

	)

211 #i‚de‡
_POINTER_INT


212 
	#_POINTER_INT
 

	)

215 #ifde‡
__‰v__


216 
	#__ATTRIBUTE_IMPURE_PTR__
 
	`__©åibuã__
((
	`__£˘i⁄__
(".sd©a")))

	)

218 #unde‡
__RAND_MAX


219 #i‡
__INT_MAX__
 == 32767

220 
	#__RAND_MAX
 32767

	)

222 
	#__RAND_MAX
 0x7fffffff

	)

225 #i‡
	`deföed
(
__CYGWIN__
)

226 
	~<cygwö/c⁄fig.h
>

227 #i‡!
	`deföed
 (
__STRICT_ANSI__
Ë|| (
__STDC_VERSION__
 >= 199901L)

228 
	#__USE_XOPEN2K
 1

	)

232 #i‡
	`deföed
(
__πems__
)

233 
	#__FILENAME_MAX__
 255

	)

234 
	#_READ_WRITE_RETURN_TYPE
 
_ssize_t


	)

235 
	#__DYNAMIC_REENT__


	)

236 
	#_REENT_GLOBAL_ATEXIT


	)

239 #i‚de‡
__EXPORT


240 
	#__EXPORT


	)

243 #i‚de‡
__IMPORT


244 
	#__IMPORT


	)

250 #i‚de‡
_READ_WRITE_RETURN_TYPE


251 
	#_READ_WRITE_RETURN_TYPE
 

	)

254 #i‚de‡
__WCHAR_MAX__


255 #i‡
__INT_MAX__
 =32767 || 
	`deföed
 (
_WIN32
)

256 
	#__WCHAR_MAX__
 0xffffu

	)

262 #ifde‡
_WANT_REENT_SMALL


263 #i‚de‡
_REENT_SMALL


264 
	#_REENT_SMALL


	)

271 #ifde‡
_MB_EXTENDED_CHARSETS_ALL


272 
	#_MB_EXTENDED_CHARSETS_ISO
 1

	)

273 
	#_MB_EXTENDED_CHARSETS_WINDOWS
 1

	)

	@/usr/include/sys/custom_file.h

1 #îr‹ 
Sy°em
-
•ecific
 
cu°om_fûe
.
h
 
is
 
missög
.

	@/usr/include/sys/lock.h

11 #i‚de‡
_SYS_LOCK_H_


12 
	#_SYS_LOCK_H_


	)

14 *
	t_LOCK_T
;

15 
	#_LOCK_RECURSIVE_T
 
_LOCK_T


	)

21 
	#_LOCK_T_RECURSIVE_INITIALIZER
 ((
_LOCK_T
)18)

	)

22 
	#_LOCK_T_INITIALIZER
 ((
_LOCK_T
)19)

	)

24 
	#__LOCK_INIT
(
CLASS
,
NAME
) \

25 
CLASS
 
_LOCK_T
 
NAME
 = 
_LOCK_T_INITIALIZER
;

	)

26 
	#__LOCK_INIT_RECURSIVE
(
CLASS
,
NAME
) \

27 
CLASS
 
_LOCK_T
 
NAME
 = 
_LOCK_T_RECURSIVE_INITIALIZER
;

	)

29 
	#__lock_öô
(
__lock
Ë
	`__cygwö_lock_öô
(&__lock)

	)

30 
	#__lock_öô_ªcursive
(
__lock
Ë
	`__cygwö_lock_öô_ªcursive
(&__lock)

	)

31 
	#__lock_˛o£
(
__lock
Ë
	`__cygwö_lock_föi
(&__lock)

	)

32 
	#__lock_˛o£_ªcursive
(
__lock
Ë
	`__cygwö_lock_föi
(&__lock)

	)

33 
	#__lock_acquúe
(
__lock
Ë
	`__cygwö_lock_lock
(&__lock)

	)

34 
	#__lock_acquúe_ªcursive
(
__lock
Ë
	`__cygwö_lock_lock
(&__lock)

	)

35 
	#__lock_åy_acquúe
(
lock
Ë
	`__cygwö_lock_åylock
(&
__lock
)

	)

36 
	#__lock_åy_acquúe_ªcursive
(
lock
Ë
	`__cygwö_lock_åylock
(&
__lock
)

	)

37 
	#__lock_ªÀa£
(
__lock
Ë
	`__cygwö_lock_u∆ock
(&__lock)

	)

38 
	#__lock_ªÀa£_ªcursive
(
__lock
Ë
	`__cygwö_lock_u∆ock
(&__lock)

	)

40 #ifde‡
__˝lu•lus


44 
__cygwö_lock_öô
(
_LOCK_T
 *);

45 
__cygwö_lock_öô_ªcursive
(
_LOCK_T
 *);

46 
__cygwö_lock_föi
(
_LOCK_T
 *);

47 
__cygwö_lock_lock
(
_LOCK_T
 *);

48 
__cygwö_lock_åylock
(
_LOCK_T
 *);

49 
__cygwö_lock_u∆ock
(
_LOCK_T
 *);

50 #ifde‡
__˝lu•lus


	@/usr/include/sys/sched.h

21 #i‚de‡
_SYS_SCHED_H_


22 
	#_SYS_SCHED_H_


	)

24 #ifde‡
__˝lu•lus


30 #i‡
deföed
(
__CYGWIN__
)

31 
	#SCHED_OTHER
 3

	)

33 
	#SCHED_OTHER
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

39 #i‡
deföed
(
_POSIX_SPORADIC_SERVER
)

40 
	#SCHED_SPORADIC
 4

	)

46 
	ssched_∑øm
 {

47 
sched_¥i‹ôy
;

49 #i‡
deföed
(
_POSIX_SPORADIC_SERVER
Ë|| deföed(
_POSIX_THREAD_SPORADIC_SERVER
)

50 
sched_ss_low_¥i‹ôy
;

52 
time•ec
 
sched_ss_ª∂_≥riod
;

54 
time•ec
 
sched_ss_öô_budgë
;

56 
sched_ss_max_ª∂
;

61 #ifde‡
__˝lu•lus


	@/usr/include/bits/wordsize.h

3 #i‚de‡
_WORDSIZE_H


4 
	#_WORDSIZE_H
 1

	)

5 #ifde‡
__x86_64__


6 
	#__WORDSIZE
 64

	)

7 
	#__WORDSIZE_COMPAT32
 1

	)

9 
	#__WORDSIZE
 32

	)

	@/usr/include/cygwin/config.h

16 #i‚de‡
_CYGWIN_CONFIG_H


17 #ifde‡
__˝lu•lus


20 
	#_CYGWIN_CONFIG_H


	)

22 
	#__DYNAMIC_REENT__


	)

40 #ifde‡
_COMPILING_NEWLIB


41 #ifde‡
__x86_64__


42 
	~"../ésoff£ts64.h
"

45 
ölöe
 *
___gëªít
 ()

47 *
ªt
;

48 
__asm
 
__vﬁ©ûe__
 ("movq %%gs:8,%0" : "Ù" (
ªt
));

49  
ªt
 + 
és_loˇl_˛ib
;

51 
	#__gëªít
(Ë((
_ªít
 *Ë
	`___gëªít
())

	)

53 
	~"../ésoff£ts.h
"

54 *
_ésba£
 
__asm__
 ("%fs:4");

55 
	#__gëªít
(Ë(
_ªít
 *)(
_ésba£
 + 
és_loˇl_˛ib
)

	)

59 #ifde‡
__x86_64__


60 
	#__SYMBOL_PREFIX


	)

62 
	#__SYMBOL_PREFIX
 "_"

	)

64 
	#_SYMSTR
(
x
Ë
__SYMBOL_PREFIX
 #x

	)

66 
	#__FILENAME_MAX__
 4096

	)

71 
	#_READ_WRITE_RETURN_TYPE
 
_ssize_t


	)

72 
	#__LARGE64_FILES
 1

	)

73 
	#__USE_INTERNAL_STAT64
 1

	)

74 
	#__LINUX_ERRNO_EXTENSIONS__
 1

	)

75 
	#_MB_EXTENDED_CHARSETS_ALL
 1

	)

76 
	#__HAVE_LOCALE_INFO__
 1

	)

77 
	#__HAVE_LOCALE_INFO_EXTENDED__
 1

	)

78 
	#_WANT_C99_TIME_FORMATS
 1

	)

79 
	#_GLIBC_EXTENSION
 1

	)

80 #i‡
deföed
(
__INSIDE_CYGWIN__
Ë|| deföed(
_COMPILING_NEWLIB
)

81 
	#__EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

82 
	#__IMPORT


	)

84 
	#__EXPORT


	)

85 
	#__IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

88 #i‚de‡
__WCHAR_MAX__


89 
	#__WCHAR_MAX__
 0xffffu

	)

92 
	#DEFAULT_LOCALE
 "C.UTF-8"

	)

94 #ifde‡
__˝lu•lus


	@/usr/include/endian.h

11 #i‚de‡
_ENDIAN_H_


12 
	#_ENDIAN_H_


	)

14 
	~<sys/c⁄fig.h
>

15 
	~<bôs/ídün.h
>

18 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

19 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

20 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

21 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

24 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


25 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

26 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


27 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

30 #i‡ ! 
deföed
 
_POSIX_SOURCE


32 
	~<byãsw≠.h
>

34 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


36 
	#htobe16
(
x
Ë
	`bsw≠_16
(x)

	)

37 
	#htobe32
(
x
Ë
	`bsw≠_32
(x)

	)

38 
	#htobe64
(
x
Ë
	`bsw≠_64
(x)

	)

40 
	#be16toh
(
x
Ë
	`bsw≠_16
(x)

	)

41 
	#be32toh
(
x
Ë
	`bsw≠_32
(x)

	)

42 
	#be64toh
(
x
Ë
	`bsw≠_64
(x)

	)

44 
	#htﬁe16
(
x
Ë(x)

	)

45 
	#htﬁe32
(
x
Ë(x)

	)

46 
	#htﬁe64
(
x
Ë(x)

	)

48 
	#À16toh
(
x
Ë(x)

	)

49 
	#À32toh
(
x
Ë(x)

	)

50 
	#À64toh
(
x
Ë(x)

	)

54 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


56 
	#htobe16
(
x
Ë(x)

	)

57 
	#htobe32
(
x
Ë(x)

	)

58 
	#htobe64
(
x
Ë(x)

	)

60 
	#be16toh
(
x
Ë(x)

	)

61 
	#be32toh
(
x
Ë(x)

	)

62 
	#be64toh
(
x
Ë(x)

	)

64 
	#htﬁe16
(
x
Ë
	`bsw≠_16
(x)

	)

65 
	#htﬁe32
(
x
Ë
	`bsw≠_32
(x)

	)

66 
	#htﬁe64
(
x
Ë
	`bsw≠_64
(x)

	)

68 
	#À16toh
(
x
Ë
	`bsw≠_16
(x)

	)

69 
	#À32toh
(
x
Ë
	`bsw≠_32
(x)

	)

70 
	#À64toh
(
x
Ë
	`bsw≠_64
(x)

	)

	@/usr/include/machine/_default_types.h

5 #i‚de‡
_MACHINE__DEFAULT_TYPES_H


6 
	#_MACHINE__DEFAULT_TYPES_H


	)

8 #ifde‡
__˝lu•lus


15 #i‡
__GNUC_PREREQ
 (3, 3)

17 
	#__EXP
(
x
Ë
__
##x##
	)
__

20 
	#__EXP
(
x
Ë
	)
x

21 
	~<limôs.h
>

24 #i‡
__EXP
(
SCHAR_MAX
) == 0x7f

25 sig√d 
	t__öt8_t
 ;

26 
	t__uöt8_t
 ;

27 
	#___öt8_t_deföed
 1

	)

30 #i‡
__EXP
(
INT_MAX
) == 0x7fff

31 sig√d 
	t__öt16_t
;

32 
	t__uöt16_t
;

33 
	#___öt16_t_deföed
 1

	)

34 #ñi‡
__EXP
(
SHRT_MAX
) == 0x7fff

35 sig√d 
	t__öt16_t
;

36 
	t__uöt16_t
;

37 
	#___öt16_t_deföed
 1

	)

38 #ñi‡
__EXP
(
SCHAR_MAX
) == 0x7fff

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 
	#___öt16_t_deföed
 1

	)

44 #i‡
___öt16_t_deföed


45 
__öt16_t
 
	t__öt_Àa°16_t
;

46 
__uöt16_t
 
	t__uöt_Àa°16_t
;

47 
	#___öt_Àa°16_t_deföed
 1

	)

49 #i‡!
___öt8_t_deföed


50 
__öt16_t
 
	t__öt_Àa°8_t
;

51 
__uöt16_t
 
	t__uöt_Àa°8_t
;

52 
	#___öt_Àa°8_t_deföed
 1

	)

56 #i‡
__EXP
(
INT_MAX
) == 0x7fffffffL

57 sig√d 
	t__öt32_t
;

58 
	t__uöt32_t
;

59 
	#___öt32_t_deföed
 1

	)

60 #ñi‡
__EXP
(
LONG_MAX
) == 0x7fffffffL

61 sig√d 
	t__öt32_t
;

62 
	t__uöt32_t
;

63 
	#___öt32_t_deföed
 1

	)

64 #ñi‡
__EXP
(
SHRT_MAX
) == 0x7fffffffL

65 sig√d 
	t__öt32_t
;

66 
	t__uöt32_t
;

67 
	#___öt32_t_deföed
 1

	)

68 #ñi‡
__EXP
(
SCHAR_MAX
) == 0x7fffffffL

69 sig√d 
	t__öt32_t
;

70 
	t__uöt32_t
;

71 
	#___öt32_t_deföed
 1

	)

74 #i‡
___öt32_t_deföed


75 
__öt32_t
 
	t__öt_Àa°32_t
;

76 
__uöt32_t
 
	t__uöt_Àa°32_t
;

77 
	#___öt_Àa°32_t_deföed
 1

	)

79 #i‡!
___öt8_t_deföed


80 
__öt32_t
 
	t__öt_Àa°8_t
;

81 
__uöt32_t
 
	t__uöt_Àa°8_t
;

82 
	#___öt_Àa°8_t_deföed
 1

	)

84 #i‡!
___öt16_t_deföed


85 
__öt32_t
 
	t__öt_Àa°16_t
;

86 
__uöt32_t
 
	t__uöt_Àa°16_t
;

87 
	#___öt_Àa°16_t_deföed
 1

	)

91 #i‡
__EXP
(
LONG_MAX
) > 0x7fffffff

92 sig√d 
	t__öt64_t
;

93 
	t__uöt64_t
;

94 
	#___öt64_t_deföed
 1

	)

97 #ñi‡ 
deföed
(
__LONG_LONG_MAX__
) && (__LONG_LONG_MAX__ > 0x7fffffff)

98 sig√d 
	t__öt64_t
;

99 
	t__uöt64_t
;

100 
	#___öt64_t_deföed
 1

	)

103 #ñi‡ 
deföed
(
LLONG_MAX
) && (LLONG_MAX > 0x7fffffff)

104 sig√d 
	t__öt64_t
;

105 
	t__uöt64_t
;

106 
	#___öt64_t_deföed
 1

	)

108 #ñi‡ 
__EXP
(
INT_MAX
) > 0x7fffffff

109 sig√d 
	t__öt64_t
;

110 
	t__uöt64_t
;

111 
	#___öt64_t_deföed
 1

	)

114 #unde‡
__EXP


116 #ifde‡
__˝lu•lus


	@/usr/include/machine/ieeefp.h

1 #i‚de‡
__IEEE_BIG_ENDIAN


2 #i‚de‡
__IEEE_LITTLE_ENDIAN


53 #i‡(
deföed
(
__¨m__
Ë|| deföed(
__thumb__
)Ë&& !deföed(
__MAVERICK__
)

58 #ifde‡
__VFP_FP__


59 #ifde‡
__ARMEL__


60 
	#__IEEE_LITTLE_ENDIAN


	)

62 
	#__IEEE_BIG_ENDIAN


	)

65 
	#__IEEE_BIG_ENDIAN


	)

66 #ifde‡
__ARMEL__


67 
	#__IEEE_BYTES_LITTLE_ENDIAN


	)

72 #i‡
deföed
 (
__Ørch64__
)

73 #i‡
deföed
 (
__AARCH64EL__
)

74 
	#__IEEE_LITTLE_ENDIAN


	)

76 
	#__IEEE_BIG_ENDIAN


	)

80 #ifde‡
__ïùh™y__


81 
	#__IEEE_LITTLE_ENDIAN


	)

82 
	#Suddí_UndîÊow
 1

	)

85 #ifde‡
__hµa__


86 
	#__IEEE_BIG_ENDIAN


	)

89 #ifde‡
__nds32__


90 #ifde‡
__big_ídün__


91 
	#__IEEE_BIG_ENDIAN


	)

93 
	#__IEEE_LITTLE_ENDIAN


	)

97 #ifde‡
__SPU__


98 
	#__IEEE_BIG_ENDIAN


	)

100 
	#isföôe
(
__y
) \

101 (
	`__exãnsi⁄__
 ({
__cy
; \

102 ( (
__y
) ==  ()) ? (1) : \

103 (
__cy
 = 
	`Â˛assify
(
__y
)Ë!
FP_INFINITE
 && __cy !
FP_NAN
;}))

	)

105 
	#isöf
(
__x
Ë(( (__xË= ()Ë? (0Ë: 
	`__isöfd
(__x))

	)

106 
	#i¢™
(
__x
Ë(( (__xË= ()Ë? (0Ë: 
	`__i¢™d
(__x))

	)

113 
	#__õìÂ_i¢™f
(
x
Ë0

	)

114 
	#__õìÂ_isöff
(
x
Ë0

	)

115 
	#__õìÂ_föôef
(
x
Ë1

	)

118 #ifde‡
__•¨c__


119 #ifde‡
__LITTLE_ENDIAN_DATA__


120 
	#__IEEE_LITTLE_ENDIAN


	)

122 
	#__IEEE_BIG_ENDIAN


	)

126 #i‡
deföed
(
__m68k__
Ë|| deföed(
__mc68000__
)

127 
	#__IEEE_BIG_ENDIAN


	)

130 #i‡
deföed
(
__mc68hc11__
Ë|| deföed(
__mc68hc12__
Ë|| deföed(
__mc68hc1x__
)

131 
	#__IEEE_BIG_ENDIAN


	)

132 #ifde‡
__HAVE_SHORT_DOUBLE__


133 
	#_DOUBLE_IS_32BITS


	)

137 #i‡
deföed
 (
__H8300__
Ë|| deföed (
__H8300H__
Ë|| deföed (
__H8300S__
Ë|| deföed (
__H8500__
Ë|| deföed (
__H8300SX__
)

138 
	#__IEEE_BIG_ENDIAN


	)

139 
	#_FLOAT_ARG
 

	)

140 
	#_DOUBLE_IS_32BITS


	)

143 #i‡
deföed
 (
__xc16x__
Ë|| deföed (
__xc16xL__
Ë|| deföed (
__xc16xS__
)

144 
	#__IEEE_LITTLE_ENDIAN


	)

145 
	#_FLOAT_ARG
 

	)

146 
	#_DOUBLE_IS_32BITS


	)

150 #ifde‡
__sh__


151 #ifde‡
__LITTLE_ENDIAN__


152 
	#__IEEE_LITTLE_ENDIAN


	)

154 
	#__IEEE_BIG_ENDIAN


	)

156 #i‡
deföed
(
__SH2E__
Ë|| deföed(
__SH3E__
Ë|| deföed(
__SH4_SINGLE_ONLY__
Ë|| deföed(
__SH2A_SINGLE_ONLY__
)

157 
	#_DOUBLE_IS_32BITS


	)

161 #ifde‡
_AM29K


162 
	#__IEEE_BIG_ENDIAN


	)

165 #ifde‡
_WIN32


166 
	#__IEEE_LITTLE_ENDIAN


	)

169 #ifde‡
__i386__


170 
	#__IEEE_LITTLE_ENDIAN


	)

173 #ifde‡
__i960__


174 
	#__IEEE_LITTLE_ENDIAN


	)

177 #ifde‡
__lm32__


178 
	#__IEEE_BIG_ENDIAN


	)

181 #ifde‡
__M32R__


182 
	#__IEEE_BIG_ENDIAN


	)

185 #i‡
deföed
(
_C4x
Ë|| deföed(
_C3x
)

186 
	#__IEEE_BIG_ENDIAN


	)

187 
	#_DOUBLE_IS_32BITS


	)

190 #ifde‡
__TMS320C6X__


191 #ifde‡
_BIG_ENDIAN


192 
	#__IEEE_BIG_ENDIAN


	)

194 
	#__IEEE_LITTLE_ENDIAN


	)

198 #ifde‡
__TIC80__


199 
	#__IEEE_LITTLE_ENDIAN


	)

202 #ifde‡
__MIPSEL__


203 
	#__IEEE_LITTLE_ENDIAN


	)

205 #ifde‡
__MIPSEB__


206 
	#__IEEE_BIG_ENDIAN


	)

209 #ifde‡
__MMIX__


210 
	#__IEEE_BIG_ENDIAN


	)

213 #ifde‡
__D30V__


214 
	#__IEEE_BIG_ENDIAN


	)

219 #ifde‡
__W65__


220 
	#__IEEE_LITTLE_ENDIAN


	)

221 
	#_DOUBLE_IS_32BITS


	)

224 #i‡
deföed
(
__Z8001__
Ë|| deföed(
__Z8002__
)

225 
	#__IEEE_BIG_ENDIAN


	)

228 #ifde‡
__m88k__


229 
	#__IEEE_BIG_ENDIAN


	)

232 #ifde‡
__mn10300__


233 
	#__IEEE_LITTLE_ENDIAN


	)

236 #ifde‡
__mn10200__


237 
	#__IEEE_LITTLE_ENDIAN


	)

238 
	#_DOUBLE_IS_32BITS


	)

241 #ifde‡
__v800


242 
	#__IEEE_LITTLE_ENDIAN


	)

245 #ifde‡
__v850


246 
	#__IEEE_LITTLE_ENDIAN


	)

249 #ifde‡
__D10V__


250 
	#__IEEE_BIG_ENDIAN


	)

251 #i‡
__DOUBLE__
 == 32

252 
	#_DOUBLE_IS_32BITS


	)

256 #ifde‡
__PPC__


257 #i‡(
deföed
(
_BIG_ENDIAN
Ë&& _BIG_ENDIANË|| (deföed(
_AIX
) && _AIX)

258 
	#__IEEE_BIG_ENDIAN


	)

260 #i‡(
deföed
(
_LITTLE_ENDIAN
Ë&& _LITTLE_ENDIANË|| (deföed(
__sun__
Ë&& __sun__Ë|| (deföed(
_WIN32
) && _WIN32)

261 
	#__IEEE_LITTLE_ENDIAN


	)

266 #ifde‡
__x°‹my16__


267 
	#__IEEE_LITTLE_ENDIAN


	)

270 #ifde‡
__¨c__


271 #ifde‡
__big_ídün__


272 
	#__IEEE_BIG_ENDIAN


	)

274 
	#__IEEE_LITTLE_ENDIAN


	)

278 #ifde‡
__CRX__


279 
	#__IEEE_LITTLE_ENDIAN


	)

282 #ifde‡
__‰30__


283 
	#__IEEE_BIG_ENDIAN


	)

286 #ifde‡
__mc‹e__


287 
	#__IEEE_BIG_ENDIAN


	)

290 #ifde‡
__mt__


291 
	#__IEEE_BIG_ENDIAN


	)

294 #ifde‡
__‰v__


295 
	#__IEEE_BIG_ENDIAN


	)

298 #ifde‡
__moxõ__


299 #ifde‡
__MOXIE_BIG_ENDIAN__


300 
	#__IEEE_BIG_ENDIAN


	)

302 
	#__IEEE_LITTLE_ENDIAN


	)

306 #ifde‡
__ü64__


307 #ifde‡
__BIG_ENDIAN__


308 
	#__IEEE_BIG_ENDIAN


	)

310 
	#__IEEE_LITTLE_ENDIAN


	)

314 #ifde‡
__AVR__


315 
	#__IEEE_LITTLE_ENDIAN


	)

316 
	#_DOUBLE_IS_32BITS


	)

319 #i‡
deföed
(
__‹32__
Ë|| deföed(
__‹1k__
Ë|| deföed(
__‹16__
)

320 
	#__IEEE_BIG_ENDIAN


	)

323 #ifde‡
__IP2K__


324 
	#__IEEE_BIG_ENDIAN


	)

325 
	#__SMALL_BITFIELDS


	)

326 
	#_DOUBLE_IS_32BITS


	)

329 #ifde‡
__iq2000__


330 
	#__IEEE_BIG_ENDIAN


	)

333 #ifde‡
__MAVERICK__


334 #ifde‡
__ARMEL__


335 
	#__IEEE_LITTLE_ENDIAN


	)

337 
	#__IEEE_BIG_ENDIAN


	)

341 #ifde‡
__m32c__


342 
	#__IEEE_LITTLE_ENDIAN


	)

343 
	#__SMALL_BITFIELDS


	)

346 #ifde‡
__CRIS__


347 
	#__IEEE_LITTLE_ENDIAN


	)

350 #ifde‡
__BFIN__


351 
	#__IEEE_LITTLE_ENDIAN


	)

354 #ifde‡
__x86_64__


355 
	#__IEEE_LITTLE_ENDIAN


	)

358 #ifde‡
__mï__


359 #ifde‡
__LITTLE_ENDIAN__


360 
	#__IEEE_LITTLE_ENDIAN


	)

362 
	#__IEEE_BIG_ENDIAN


	)

366 #ifde‡
__MICROBLAZE__


367 #i‚de‡
__MICROBLAZEEL__


368 
	#__IEEE_BIG_ENDIAN


	)

370 
	#__IEEE_LITTLE_ENDIAN


	)

374 #ifde‡
__MSP430__


375 
	#__IEEE_LITTLE_ENDIAN


	)

376 
	#__SMALL_BITFIELDS


	)

379 #ifde‡
__RL78__


380 
	#__IEEE_LITTLE_ENDIAN


	)

381 
	#__SMALL_BITFIELDS


	)

382 
	#_DOUBLE_IS_32BITS


	)

385 #ifde‡
__RX__


387 #ifde‡
__RX_BIG_ENDIAN__


388 
	#__IEEE_BIG_ENDIAN


	)

390 
	#__IEEE_LITTLE_ENDIAN


	)

393 #i‚de‡
__RX_64BIT_DOUBLES__


394 
	#_DOUBLE_IS_32BITS


	)

397 #ifde‡
__RX_16BIT_INTS__


398 
	#__SMALL_BITFIELDS


	)

403 #i‡(
deföed
(
__CR16__
Ë|| deföed(
__CR16C__
Ë||deföed(
__CR16CP__
))

404 
	#__IEEE_LITTLE_ENDIAN


	)

405 
	#__SMALL_BITFIELDS


	)

408 #ifde‡
__NIOS2__


409 #ifde‡
__nios2_big_ídün__


410 
	#__IEEE_BIG_ENDIAN


	)

412 
	#__IEEE_LITTLE_ENDIAN


	)

416 #i‚de‡
__IEEE_BIG_ENDIAN


417 #i‚de‡
__IEEE_LITTLE_ENDIAN


418 #îr‹ 
Endü√ss
 
nŸ
 
de˛¨ed
!!

	@/usr/include/sys/sysmacros.h

11 #i‚de‡
_SYS_SYSMACROS_H


12 
	#_SYS_SYSMACROS_H


	)

14 
	~<sys/ty≥s.h
>

16 
_ELIDABLE_INLINE
 
gnu_dev_maj‹
(
dev_t
);

17 
_ELIDABLE_INLINE
 
gnu_dev_mö‹
(
dev_t
);

18 
_ELIDABLE_INLINE
 
dev_t
 
gnu_dev_makedev
(, );

20 
_ELIDABLE_INLINE
 

21 
	$gnu_dev_maj‹
(
dev_t
 
dev
)

23  ()(((
dev
) >> 16) & 0xffff);

24 
	}
}

26 
_ELIDABLE_INLINE
 

27 
	$gnu_dev_mö‹
(
dev_t
 
dev
)

29  ()((
dev
) & 0xffff);

30 
	}
}

32 
_ELIDABLE_INLINE
 
dev_t


33 
	$gnu_dev_makedev
(
maj
, 
mö
)

35  (((
maj
Ë<< 16Ë| ((
mö
) & 0xffff));

36 
	}
}

38 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
(dev)

	)

39 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
(dev)

	)

40 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
(maj, mö)

	)

	@/usr/include/bits/endian.h

11 #i‚de‡
_BITS_ENDIAN_H_


12 
	#_BITS_ENDIAN_H_


	)

14 #i‚de‡
__BIG_ENDIAN


15 
	#__BIG_ENDIAN
 4321

	)

17 #i‚de‡
__LITTLE_ENDIAN


18 
	#__LITTLE_ENDIAN
 1234

	)

21 #i‚de‡
__BYTE_ORDER


22 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/byteswap.h

11 #i‚de‡
_BYTESWAP_H


12 
	#_BYTESWAP_H


	)

14 #ifde‡
__˝lu•lus


18 
__ölöe
 

19 
bsw≠_16
 (
__x
)

21  (
__x
 >> 8) | (__x << 8);

24 
__ölöe
 

25 
bsw≠_32
 (
__x
)

27  (
bsw≠_16
 (
__x
 & 0xffff) << 16) | (bswap_16 (__x >> 16));

30 
__ölöe
 

31 
bsw≠_64
 (
__x
)

33  (((Ë
bsw≠_32
 (
__x
 & 0xffffffffull)) << 32) | (bswap_32 (__x >> 32));

36 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

12 #i‚de‡
_LIMITS_H___


14 
	~<„©uªs.h
>

15 
	~<bôs/w‹dsize.h
>

17 #i‚de‡
_MACH_MACHLIMITS_H_


20 
	#_LIMITS_H___


	)

21 
	#_MACH_MACHLIMITS_H_


	)

27 #unde‡
CHAR_BIT


28 
	#CHAR_BIT
 
__CHAR_BIT__


	)

31 #unde‡
LONG_BIT


32 
	#LONG_BIT
 (
__SIZEOF_LONG__
 * 
__CHAR_BIT__
)

	)

35 #unde‡
WORD_BIT


36 
	#WORD_BIT
 (
__SIZEOF_INT__
 * 
__CHAR_BIT__
)

	)

39 #i‚de‡
MB_LEN_MAX


41 
	#MB_LEN_MAX
 8

	)

45 #unde‡
SCHAR_MIN


46 
	#SCHAR_MIN
 (-128)

	)

47 #unde‡
SCHAR_MAX


48 
	#SCHAR_MAX
 127

	)

51 #unde‡
UCHAR_MAX


52 
	#UCHAR_MAX
 255

	)

55 #ifde‡
__CHAR_UNSIGNED__


56 #unde‡
CHAR_MIN


57 
	#CHAR_MIN
 0

	)

58 #unde‡
CHAR_MAX


59 
	#CHAR_MAX
 255

	)

61 #unde‡
CHAR_MIN


62 
	#CHAR_MIN
 (-128)

	)

63 #unde‡
CHAR_MAX


64 
	#CHAR_MAX
 127

	)

68 #unde‡
SHRT_MIN


69 
	#SHRT_MIN
 (-32768)

	)

70 #unde‡
SHRT_MAX


71 
	#SHRT_MAX
 32767

	)

74 #unde‡
USHRT_MAX


75 
	#USHRT_MAX
 65535

	)

78 #i‚de‡
__INT_MAX__


79 
	#__INT_MAX__
 2147483647

	)

81 #unde‡
INT_MIN


82 
	#INT_MIN
 (-
INT_MAX
-1)

	)

83 #unde‡
INT_MAX


84 
	#INT_MAX
 
__INT_MAX__


	)

87 #unde‡
UINT_MAX


88 
	#UINT_MAX
 (
INT_MAX
 * 2U + 1)

	)

92 #i‚de‡
__LONG_MAX__


93 #i‡
__WORDSIZE
 == 64

94 
	#__LONG_MAX__
 9223372036854775807L

	)

96 
	#__LONG_MAX__
 2147483647L

	)

99 #unde‡
LONG_MIN


100 
	#LONG_MIN
 (-
LONG_MAX
-1L)

	)

101 #unde‡
LONG_MAX


102 
	#LONG_MAX
 
__LONG_MAX__


	)

105 #unde‡
ULONG_MAX


106 
	#ULONG_MAX
 (
LONG_MAX
 * 2UL + 1)

	)

109 #i‚de‡
__LONG_LONG_MAX__


110 
	#__LONG_LONG_MAX__
 9223372036854775807LL

	)

113 #i‡
deföed
 (
__GNU_LIBRARY__
Ë? deföed (
__USE_GNU
Ë: !deföed (
__STRICT_ANSI__
)

114 #unde‡
LONG_LONG_MIN


115 
	#LONG_LONG_MIN
 (-
LONG_LONG_MAX
-1)

	)

116 #unde‡
LONG_LONG_MAX


117 
	#LONG_LONG_MAX
 
__LONG_LONG_MAX__


	)

120 #unde‡
ULONG_LONG_MAX


121 
	#ULONG_LONG_MAX
 (
LONG_LONG_MAX
 * 2ULL + 1)

	)

125 #unde‡
LLONG_MIN


126 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

127 #unde‡
LLONG_MAX


128 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

131 #unde‡
ULLONG_MAX


132 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

135 #unde‡
SSIZE_MAX


136 
	#SSIZE_MAX
 (
__LONG_MAX__
)

	)

150 #unde‡
AIO_LISTIO_MAX


155 #unde‡
AIO_MAX


160 #unde‡
AIO_PRIO_DELTA_MAX


166 #unde‡
ARG_MAX


167 
	#ARG_MAX
 32000

	)

170 #unde‡
ATEXIT_MAX


171 
	#ATEXIT_MAX
 32

	)

174 #unde‡
CHILD_MAX


175 
	#CHILD_MAX
 256

	)

178 #unde‡
DELAYTIMER_MAX


182 #unde‡
HOST_NAME_MAX


183 
	#HOST_NAME_MAX
 255

	)

186 #unde‡
IOV_MAX


187 
	#IOV_MAX
 1024

	)

190 #unde‡
LOGIN_NAME_MAX


191 
	#LOGIN_NAME_MAX
 256

	)

194 #unde‡
MQ_OPEN_MAX


195 
	#MQ_OPEN_MAX
 
OPEN_MAX


	)

198 #unde‡
MQ_PRIO_MAX


199 
	#MQ_PRIO_MAX
 
INT_MAX


	)

205 #unde‡
OPEN_MAX


206 
	#OPEN_MAX
 256

	)

209 #unde‡
PAGESIZE


210 #unde‡
PAGE_SIZE


211 
	#PAGESIZE
 65536

	)

212 
	#PAGE_SIZE
 
PAGESIZE


	)

221 #unde‡
PTHREAD_DESTRUCTOR_ITERATIONS


222 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 1

	)

226 #unde‡
PTHREAD_KEYS_MAX


227 
	#PTHREAD_KEYS_MAX
 1024

	)

237 #unde‡
PTHREAD_STACK_MIN


238 
	#PTHREAD_STACK_MIN
 65536

	)

242 #unde‡
PTHREAD_THREADS_MAX


248 #unde‡
RTSIG_MAX


249 #i‡
__WORDSIZE
 == 64

250 
	#RTSIG_MAX
 33

	)

252 
	#RTSIG_MAX
 1

	)

257 #unde‡
SEM_NSEMS_MAX


261 #unde‡
SEM_VALUE_MAX


262 
	#SEM_VALUE_MAX
 1147483648

	)

266 #unde‡
SIGQUEUE_MAX


267 
	#SIGQUEUE_MAX
 32

	)

271 #unde‡
SS_REPL_MAX


275 #unde‡
STREAM_MAX


276 
	#STREAM_MAX
 20

	)

279 #unde‡
SYMLOOP_MAX


280 
	#SYMLOOP_MAX
 10

	)

283 #unde‡
TIMER_MAX


284 
	#TIMER_MAX
 32

	)

287 #unde‡
TRACE_EVENT_NAME_MAX


292 #unde‡
TRACE_NAME_MAX


297 #unde‡
TRACE_SYS_MAX


303 #unde‡
TRACE_USER_EVENT_MAX


307 #unde‡
TTY_NAME_MAX


308 
	#TTY_NAME_MAX
 32

	)

311 #unde‡
TZNAME_MAX


318 #unde‡
FILESIZEBITS


319 
	#FILESIZEBITS
 64

	)

322 #unde‡
LINK_MAX


323 
	#LINK_MAX
 1024

	)

326 #unde‡
MAX_CANON


327 
	#MAX_CANON
 255

	)

330 #unde‡
MAX_INPUT


331 
	#MAX_INPUT
 255

	)

334 #unde‡
NAME_MAX


335 
	#NAME_MAX
 255

	)

341 #unde‡
PATH_MAX


342 
	#PATH_MAX
 4096

	)

346 #unde‡
PIPE_BUF


347 
	#PIPE_BUF
 4096

	)

351 #unde‡
POSIX_ALLOC_SIZE_MIN


357 #unde‡
POSIX_REC_INCR_XFER_SIZE


361 #unde‡
POSIX_REC_MAX_XFER_SIZE


365 #unde‡
POSIX_REC_MIN_XFER_SIZE


369 #unde‡
POSIX_REC_XFER_ALIGN


373 #unde‡
SYMLINK_MAX


374 
	#SYMLINK_MAX
 (
PATH_MAX
 - 1)

	)

380 #unde‡
BC_BASE_MAX


381 
	#BC_BASE_MAX
 99

	)

384 #unde‡
BC_DIM_MAX


385 
	#BC_DIM_MAX
 2048

	)

388 #unde‡
BC_SCALE_MAX


389 
	#BC_SCALE_MAX
 99

	)

392 #unde‡
BC_STRING_MAX


393 
	#BC_STRING_MAX
 1000

	)

396 #unde‡
CHARCLASS_NAME_MAX


405 #unde‡
COLL_WEIGHTS_MAX


410 #unde‡
EXPR_NEST_MAX


411 
	#EXPR_NEST_MAX
 32

	)

414 #unde‡
LINE_MAX


415 
	#LINE_MAX
 2048

	)

419 #unde‡
NGROUPS_MAX


420 
	#NGROUPS_MAX
 1024

	)

424 #unde‡
RE_DUP_MAX


425 
	#RE_DUP_MAX
 255

	)

435 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

439 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

440 
	#_POSIX_AIO_MAX
 1

	)

441 
	#_POSIX_ARG_MAX
 4096

	)

442 
	#_POSIX_CHILD_MAX
 25

	)

443 
	#_POSIX_DELAYTIMER_MAX
 32

	)

444 
	#_POSIX_HOST_NAME_MAX
 255

	)

445 
	#_POSIX_LINK_MAX
 8

	)

446 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

447 
	#_POSIX_MAX_CANON
 255

	)

448 
	#_POSIX_MAX_INPUT
 255

	)

449 
	#_POSIX_MQ_OPEN_MAX
 8

	)

450 
	#_POSIX_MQ_PRIO_MAX
 32

	)

451 
	#_POSIX_NAME_MAX
 14

	)

452 
	#_POSIX_NGROUPS_MAX
 8

	)

453 
	#_POSIX_OPEN_MAX
 20

	)

454 
	#_POSIX_PATH_MAX
 256

	)

455 
	#_POSIX_PIPE_BUF
 512

	)

456 
	#_POSIX_RE_DUP_MAX
 255

	)

457 
	#_POSIX_RTSIG_MAX
 8

	)

458 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

459 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

460 
	#_POSIX_SIGQUEUE_MAX
 32

	)

461 
	#_POSIX_SSIZE_MAX
 32767

	)

462 
	#_POSIX_STREAM_MAX
 8

	)

463 
	#_POSIX_SS_REPL_MAX
 4

	)

464 
	#_POSIX_SYMLINK_MAX
 255

	)

465 
	#_POSIX_SYMLOOP_MAX
 8

	)

466 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

467 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

468 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

469 
	#_POSIX_TIMER_MAX
 32

	)

470 
	#_POSIX_TRACE_EVENT_NAME_MAX
 30

	)

471 
	#_POSIX_TRACE_NAME_MAX
 8

	)

472 
	#_POSIX_TRACE_SYS_MAX
 8

	)

473 
	#_POSIX_TRACE_USER_EVENT_MAX
 32

	)

474 
	#_POSIX_TTY_NAME_MAX
 9

	)

475 
	#_POSIX_TZNAME_MAX
 6

	)

477 
	#_POSIX2_BC_BASE_MAX
 99

	)

478 
	#_POSIX2_BC_DIM_MAX
 2048

	)

479 
	#_POSIX2_BC_SCALE_MAX
 99

	)

480 
	#_POSIX2_BC_STRING_MAX
 1000

	)

481 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

482 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

483 
	#_POSIX2_LINE_MAX
 2048

	)

484 
	#_POSIX2_RE_DUP_MAX
 255

	)

486 
	#_XOPEN_IOV_MAX
 16

	)

487 
	#_XOPEN_NAME_MAX
 255

	)

488 
	#_XOPEN_PATH_MAX
 1024

	)

492 
	#NL_ARGMAX
 9

	)

493 
	#NL_LANGMAX
 14

	)

494 
	#NL_MSGMAX
 32767

	)

495 
	#NL_NMAX
 
INT_MAX


	)

496 
	#NL_SETMAX
 255

	)

497 
	#NL_TEXTMAX
 
_POSIX2_LINE_MAX


	)

500 #unde‡
NZERO


501 
	#NZERO
 20

	)

	@/usr/include/features.h

11 #i‚de‡
_FEATURES_H


12 
	#_FEATURES_H


	)

14 
	~<sys/cdefs.h
>

15 
	~<sys/„©uªs.h
>

	@
1
.
1
/usr/include
65
1687
HelloWorld/HelloWorld.cpp
Listener/Listener.cpp
Overlapped/Overlapped.cpp
Serial/Serial.cpp
Serial/Serial.h
Serial/SerialEx.cpp
Serial/SerialEx.h
Serial/SerialMFC.h
Serial/SerialWnd.cpp
Serial/SerialWnd.h
SerialTestMFC/AboutDlg.cpp
SerialTestMFC/AboutDlg.h
SerialTestMFC/ChildFrm.cpp
SerialTestMFC/ChildFrm.h
SerialTestMFC/ChildView.cpp
SerialTestMFC/ChildView.h
SerialTestMFC/ComSelectDlg.cpp
SerialTestMFC/ComSelectDlg.h
SerialTestMFC/MainFrm.cpp
SerialTestMFC/MainFrm.h
SerialTestMFC/PageComEvents.cpp
SerialTestMFC/PageComEvents.h
SerialTestMFC/PageComSettings.cpp
SerialTestMFC/PageComSettings.h
SerialTestMFC/Resource.h
SerialTestMFC/RichCommEdit.cpp
SerialTestMFC/RichCommEdit.h
SerialTestMFC/SerialTestMFC.cpp
SerialTestMFC/SerialTestMFC.h
SerialTestMFC/SheetSettings.cpp
SerialTestMFC/SheetSettings.h
SerialTestMFC/StdAfx.cpp
SerialTestMFC/StdAfx.h
/usr/include/malloc.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/_ansi.h
/usr/include/machine/malloc.h
/usr/include/sys/cdefs.h
/usr/include/sys/features.h
/usr/include/sys/reent.h
/usr/include/sys/stdio.h
/usr/include/sys/string.h
/usr/include/sys/types.h
/usr/include/assert.h
/usr/include/cygwin/types.h
/usr/include/machine/_types.h
/usr/include/machine/types.h
/usr/include/newlib.h
/usr/include/stdint.h
/usr/include/sys/_types.h
/usr/include/sys/config.h
/usr/include/sys/custom_file.h
/usr/include/sys/lock.h
/usr/include/sys/sched.h
/usr/include/bits/wordsize.h
/usr/include/cygwin/config.h
/usr/include/endian.h
/usr/include/machine/_default_types.h
/usr/include/machine/ieeefp.h
/usr/include/sys/sysmacros.h
/usr/include/bits/endian.h
/usr/include/byteswap.h
/usr/include/limits.h
/usr/include/features.h
